{
    "version": "https://jsonfeed.org/version/1",
    "title": "指尖小屋 • All posts by \"状态机\" tag",
    "description": "学习的过程大概就是学了忘,忘了学，抽空多停下来总结，不要冲的太前。",
    "home_page_url": "https://www.fasty97.top",
    "items": [
        {
            "id": "https://www.fasty97.top/2022/06/11/%E5%85%B3%E4%BA%8E%E7%8A%B6%E6%80%81%E6%9C%BA%E7%9A%84%E6%80%9D%E8%80%83/",
            "url": "https://www.fasty97.top/2022/06/11/%E5%85%B3%E4%BA%8E%E7%8A%B6%E6%80%81%E6%9C%BA%E7%9A%84%E6%80%9D%E8%80%83/",
            "title": "关于状态机的思考",
            "date_published": "2022-06-10T18:15:39.000Z",
            "content_html": "<blockquote>\n<p>状态机是对状态模式的一种使用。用于独立处理在各个状态的具体情况和转换关系。</p>\n</blockquote>\n<h2 id=\"开始\"><a class=\"markdownIt-Anchor\" href=\"#开始\">#</a> 开始</h2>\n<p>当我们需要处理带流程响应的问题时，可以将其抽象为状态问题。</p>\n<p class=\"red\">例如下图的我们需要处理 OnEnter、OnUpdate、OnExit 三个部分。</p>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20220615115055.png\" alt=\"\"></p>\n<h2 id=\"有限状态机\"><a class=\"markdownIt-Anchor\" href=\"#有限状态机\">#</a> 有限状态机</h2>\n<blockquote>\n<p>有且仅有可能处于一种状态，解决状态区分和转换问题。</p>\n<p>有限状态机是下列几种状态机的基础，下面的状态机都基于有限状态机进行相关功能的扩充。</p>\n</blockquote>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20220615115505.png\" alt=\"\"></p>\n<h3 id=\"转换方式\"><a class=\"markdownIt-Anchor\" href=\"#转换方式\">#</a> 转换方式</h3>\n<p>在状态机中，我们需要使用一种转换方式来进行状态切换，在 Unity 的 Animator 中使用条件参数进行跳转。我们可以使用类似事件的方式来跳转、或者使用任意能够保证正确进行 原状态到目标状态 转换的方式。</p>\n<h3 id=\"实现方式\"><a class=\"markdownIt-Anchor\" href=\"#实现方式\">#</a> 实现方式</h3>\n<blockquote>\n<p>对于有限状态机来说，我们只需要保证具有 <code>状态</code> 、 <code>转换关系</code> 即可。</p>\n</blockquote>\n<h4 id=\"状态\"><a class=\"markdownIt-Anchor\" href=\"#状态\">#</a> 状态</h4>\n<p>状态是我们需要管理的核心，状态中可以包含转换关系 Dict。</p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"><span>非继承式状态</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token comment\">/// 简单 Fsm 状态</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FsmState</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Name <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     <span class=\"token keyword\">public</span> <span class=\"token class-name\">Dictionary<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> FsmTranslation<span class=\"token punctuation\">></span></span> translationDict<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     <span class=\"token keyword\">public</span> <span class=\"token function\">FsmState</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>         <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>Name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>         translationDict <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Dictionary<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> FsmTranslation<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>         <span class=\"token keyword\">return</span> Name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"转换条件\"><a class=\"markdownIt-Anchor\" href=\"#转换条件\">#</a> 转换条件</h4>\n<p>转换条件包括了起止状态和状态切换时要执行的回调函数。</p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"><span>转换条件</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token comment\">/// 简单 Fsm 转换条件</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FsmTranslation</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token class-name\">FsmState</span> fromState<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token class-name\">FsmState</span> toState<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token class-name\">FsmTranslationCallBack</span> callBack<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token comment\">/// 创建条件</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token comment\">/// &lt;param name=\"fromState\"> 开始状态 & lt;/param></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token comment\">/// &lt;param name=\"name\"> 响应事件 & lt;/param></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token comment\">/// &lt;param name=\"toState\"> 目标状态 & lt;/param></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token comment\">/// &lt;param name=\"callBack\"> 转换回调 & lt;/param></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token function\">FsmTranslation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FsmState</span> fromState<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">FsmState</span> toState<span class=\"token punctuation\">,</span> <span class=\"token class-name\">FsmTranslationCallBack</span> callBack<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fromState <span class=\"token operator\">=</span> fromState<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toState <span class=\"token operator\">=</span> toState<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>callBack <span class=\"token operator\">=</span> callBack<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"控制机器\"><a class=\"markdownIt-Anchor\" href=\"#控制机器\">#</a> 控制机器</h4>\n<p>我们需要一个控制机器来管理我们的状态和条件，让整个系统能够自动化的运转起来，这个部分我将其称之为<ins>状态机器</ins>。<br>\n状态机器存储了当前的状态情况，以及根据条件转变条件的方法 <code>HandleEvent</code> 。</p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"><span>机器</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 当前状态</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">FsmState</span> CurState <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">Dictionary<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> FsmState<span class=\"token punctuation\">></span></span> StateDict <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Dictionary<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> FsmState<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/// 添加状态</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/// &lt;param name=\"state\">State.&lt;/param></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">AddState</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FsmState</span> state<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    StateDict<span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> state<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">/// 添加条转</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">/// &lt;param name=\"translation\">Translation.&lt;/param></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">AddTranslation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FsmTranslation</span> translation<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    StateDict<span class=\"token punctuation\">[</span>translation<span class=\"token punctuation\">.</span>fromState<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>translationDict<span class=\"token punctuation\">[</span>translation<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> translation<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">/// 启动状态机</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">/// &lt;param name=\"state\">State.&lt;/param></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FsmState</span> state<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    CurState <span class=\"token operator\">=</span> state<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">/// 处理事件</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">/// &lt;param name=\"name\">Name.&lt;/param></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">HandleEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>CurState <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> CurState<span class=\"token punctuation\">.</span>translationDict<span class=\"token punctuation\">.</span><span class=\"token function\">ContainsKey</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        UnityEngine<span class=\"token punctuation\">.</span>Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fromState:\"</span> <span class=\"token operator\">+</span> CurState<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        CurState<span class=\"token punctuation\">.</span>translationDict<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">callBack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        CurState <span class=\"token operator\">=</span> CurState<span class=\"token punctuation\">.</span>translationDict<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>toState<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        UnityEngine<span class=\"token punctuation\">.</span>Debug<span class=\"token punctuation\">.</span><span class=\"token function\">LogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"toState:\"</span> <span class=\"token operator\">+</span> CurState<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"思考\"><a class=\"markdownIt-Anchor\" href=\"#思考\">#</a> 思考</h3>\n<p>通过上面这一步我们已经搭建了一个基本的状态机模板，上面使用的是<ins>非继承的模式</ins>，当然我们可以将状态机接口抽象出去，成为一个接口。</p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/// FSM 有限状态机接口</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IFsmState</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnEnter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnExit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如上所示这种形式，我们的状态类通过继承接口来外挂状态行为，这种方式有好有坏，好处是：<ins>可以结构更加严谨的使用状态机接口，逻辑清晰</ins>。</p>\n<p>坏处是：<ins>在使用时也许我们会为了一个状态而去创建一个子类，导致子类过多，而子类的功能本身存在重合的情况</ins>。</p>\n<h2 id=\"并发状态机\"><a class=\"markdownIt-Anchor\" href=\"#并发状态机\">#</a> 并发状态机</h2>\n<blockquote>\n<p>相当于同时运行多个有限状态机，解决多状态并行问题。</p>\n</blockquote>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20220622170627.png\" alt=\"\"></p>\n<p>在 Unity 的 Animator Controller 中，我们每一个创建的控制器就是一个 FSM 状态机，但我们使用多个时，这些状态机并不会相互干扰，独立并发的运行，此时我们可以将这种多个状态机同时运行的情况称之为是并发状态机。</p>\n<h2 id=\"分层状态机\"><a class=\"markdownIt-Anchor\" href=\"#分层状态机\">#</a> 分层状态机</h2>\n<blockquote>\n<p>相当于在有限状态机中添加层级划分，通过层级来指定当前使用的状态机。</p>\n</blockquote>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20220622170913.png\" alt=\"\"></p>\n<p>在动画系统中可以看到有 Layer 的概念，这就是使用分层状态机的概念，不过在我们的普通分层状态中，我们的每个层级权重都为 1，也就是说每次运行一个层级时有且只运行这一个层级，而 Unity 增加了权重的概念，这个概念让状态层级之间可以可以状态和层级的混合。</p>\n<h2 id=\"下推状态机\"><a class=\"markdownIt-Anchor\" href=\"#下推状态机\">#</a> 下推状态机</h2>\n<blockquote>\n<p>相当于使用一个栈来存储状态的历史记录，以便在需要时回到原先的状态。</p>\n<p>在退出一个状态时，自动恢复到之前的状态。</p>\n</blockquote>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20220622171349.png\" alt=\"\"></p>\n<p>如图所示：每个次级状态都与前一个状态存在回溯关系（<ins>这个回溯关系是不需要条件的</ins>），当我们退出 C 状态时，我们会自动回到 B 状态，退出 B 状态时自动回到 A 状态。</p>\n<p class=\"red\">状态机会将每一个使用的状态放入状态栈中，在退出当前状态时自动回溯到上一个状态。</p>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20220622171829.png\" alt=\"\"></p>\n<h2 id=\"相关阅读\"><a class=\"markdownIt-Anchor\" href=\"#相关阅读\">#</a> 相关阅读</h2>\n<ol>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9mYXN0eTk3LnRvcC8yMDIxLzA5LzA4L05vZGVDYW52YXMlRTQlQjklOEJGU00lRTYlOUMlODklRTklOTklOTAlRTclOEElQjYlRTYlODAlODElRTYlOUMlQkEv\">NodeCanvas 之 FSM 有限状态机 - NodeCanvas - 游戏开发 | Fasty Blog = 指尖小屋</span></li>\n</ol>\n",
            "tags": [
                "状态机",
                "有限状态机",
                "并发状态机",
                "分层状态机",
                "下推状态机",
                "AI"
            ]
        },
        {
            "id": "https://www.fasty97.top/2022/05/17/Unity%20Animator%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/",
            "url": "https://www.fasty97.top/2022/05/17/Unity%20Animator%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/",
            "title": "Unity Animator深入理解",
            "date_published": "2022-05-16T21:42:54.000Z",
            "content_html": "",
            "tags": [
                "状态机",
                "动画"
            ]
        },
        {
            "id": "https://www.fasty97.top/2021/09/08/NodeCanvas%E4%B9%8BFSM%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA/",
            "url": "https://www.fasty97.top/2021/09/08/NodeCanvas%E4%B9%8BFSM%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA/",
            "title": "NodeCanvas之FSM有限状态机",
            "date_published": "2021-09-08T14:27:11.000Z",
            "content_html": "<blockquote>\n<p>FSM 有限状态机是一种设计方式，用于处理不同状态的切换</p>\n<p>其主要包含以下几个部分：</p>\n<ol>\n<li>状态（进入、更新、离开）</li>\n<li>过渡条件 【 <code>用于控制状态的切换</code> 】</li>\n<li>状态机控制器【 <code>用于控制状态机</code> 】</li>\n</ol>\n</blockquote>\n<p>本文主要介绍 <code>NodeCanvas</code>  的 FSM 使用，具体基础 FSM 概念不做解释。</p>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20210908225324.png\" alt=\"image-20210908225324425\"></p>\n<center>FSM示例图</center>\n<h2 id=\"开始\"><a class=\"markdownIt-Anchor\" href=\"#开始\">#</a> 开始</h2>\n<p>为游戏对象添加如下脚本：</p>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20210909125307.png\" alt=\"image-20210909125300176\"></p>\n<h2 id=\"结点类型\"><a class=\"markdownIt-Anchor\" href=\"#结点类型\">#</a> 结点类型</h2>\n<p>NodeCanvas 中结点分为几个类型：</p>\n<ol>\n<li>Action State（动作状态，只处理进入状态）</li>\n<li>Super Action State （超级动作状态，能处理进入、更新、离开状态）</li>\n<li>Pass（过渡态，不做任何处理）</li>\n<li>Parallel（并行。 在状态机处于任意状态时，并行执行）</li>\n<li>Any State（能够从任意状态进行状态切换，在状态机过程中，时刻监听）</li>\n</ol>\n<h2 id=\"结语\"><a class=\"markdownIt-Anchor\" href=\"#结语\">#</a> 结语</h2>\n<p>在 FSM 中，也没什么太多可以讲的，其条件和行为结点为 <code>NodeCanvas</code>  行为树、状态机、对话树所共用。</p>\n<blockquote>\n<p>个人感觉，NodeCanvas 设计最棒的一点就是，他三种系统用的同一个底层，而且可以互相嵌套兼容。</p>\n</blockquote>\n",
            "tags": [
                "Unity Tool",
                "FSM",
                "状态机",
                "有限状态机"
            ]
        }
    ]
}