{
    "version": "https://jsonfeed.org/version/1",
    "title": "指尖小屋 • All posts by \"unity tool\" tag",
    "description": "学习的过程大概就是学了忘,忘了学，抽空多停下来总结，不要冲的太前。",
    "home_page_url": "https://www.fasty97.top",
    "items": [
        {
            "id": "https://www.fasty97.top/2021/09/10/NodeCanvas%E6%89%A9%E5%B1%95/",
            "url": "https://www.fasty97.top/2021/09/10/NodeCanvas%E6%89%A9%E5%B1%95/",
            "title": "NodeCanvas扩展",
            "date_published": "2021-09-10T02:12:21.000Z",
            "content_html": "<blockquote>\n<p>除去三大功能外，NodeCanvas 还有一些别的有趣的东西，能帮助我们改进 3 大流程。</p>\n</blockquote>\n<h3 id=\"standalone-action-list\"><a class=\"markdownIt-Anchor\" href=\"#standalone-action-list\">#</a> Standalone Action List</h3>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20210910101555.png\" alt=\"image-20210910101555501\"></p>\n<p>给对线添加如上脚本后，我们可以在对象上进行一些可视化的对话构建。</p>\n<h3 id=\"自定义action和condition\"><a class=\"markdownIt-Anchor\" href=\"#自定义action和condition\">#</a> 自定义 Action 和 Condition</h3>\n<blockquote>\n<p>我们可以自定义自己的节点，方便我们在 3 大功能上使用。</p>\n</blockquote>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20210910101826.png\" alt=\"image-20210910101826535\"></p>\n<p>生成脚本如下：</p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"><span>生成的行为</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">NodeCanvas<span class=\"token punctuation\">.</span>Framework</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">ParadoxNotion<span class=\"token punctuation\">.</span>Design</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">NodeCanvas<span class=\"token punctuation\">.</span>Tasks<span class=\"token punctuation\">.</span>Actions</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Category</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"my\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Description</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"输出一些内容\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Mylog</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ActionTask</span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token comment\">//Use for initialization. This is called only once in the lifetime of the task.</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token comment\">//Return null if init was successfull. Return an error string otherwise</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">OnInit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>         <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token comment\">//This is called once each time the task is enabled.</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token comment\">//Call EndAction() to mark the action as finished, either in success or failure.</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token comment\">//EndAction can be called from anywhere.</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnExecute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>         <span class=\"token function\">EndAction</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token comment\">//Called once per frame while the action is active.</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>         </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token comment\">//Called when the task is disabled.</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnStop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>         </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token comment\">//Called when the task is paused.</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnPause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>         </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>创建之后可以在 Action 中找到：</p>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20210910102308.png\" alt=\"image-20210910102308892\"></p>\n<p>条件如下：</p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"><span>生成的条件</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">NodeCanvas<span class=\"token punctuation\">.</span>Framework</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">ParadoxNotion<span class=\"token punctuation\">.</span>Design</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">NodeCanvas<span class=\"token punctuation\">.</span>Tasks<span class=\"token punctuation\">.</span>Conditions</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Category</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"my\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Description</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"控制条件\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">myCon</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ConditionTask</span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token comment\">//Use for initialization. This is called only once in the lifetime of the task.</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token comment\">//Return null if init was successfull. Return an error string otherwise</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">OnInit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>         <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token comment\">//Called whenever the condition gets enabled.</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnEnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>         </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token comment\">//Called whenever the condition gets disabled.</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnDisable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>         </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token comment\">//Called once per frame while the condition is active.</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token comment\">//Return whether the condition is success or failure.</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">OnCheck</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>         <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在图中使用：</p>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20210910102705.png\" alt=\"image-20210910102705181\"></p>\n<h3 id=\"全局黑板\"><a class=\"markdownIt-Anchor\" href=\"#全局黑板\">#</a> 全局黑板</h3>\n<blockquote>\n<p>可以在所有图中使用</p>\n</blockquote>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20210910102835.png\" alt=\"image-20210910102835494\"></p>\n<h3 id=\"类型管理器\"><a class=\"markdownIt-Anchor\" href=\"#类型管理器\">#</a> 类型管理器</h3>\n<blockquote>\n<p>用于管理添加新的数据类型</p>\n</blockquote>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20210910103000.png\" alt=\"image-20210910103000347\"></p>\n<h3 id=\"图控制台\"><a class=\"markdownIt-Anchor\" href=\"#图控制台\">#</a> 图控制台</h3>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20210910103100.png\" alt=\"image-20210910103100590\"></p>\n<h3 id=\"结构视图\"><a class=\"markdownIt-Anchor\" href=\"#结构视图\">#</a> 结构视图</h3>\n<blockquote>\n<p>可快速定位到对应节点</p>\n</blockquote>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20210910103148.png\" alt=\"image-20210910103148583\"></p>\n<h3 id=\"运行视图\"><a class=\"markdownIt-Anchor\" href=\"#运行视图\">#</a> 运行视图</h3>\n<p>方便在游戏运行中，显示运行的所有树</p>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20210910103307.png\" alt=\"image-20210910103307475\"></p>\n<h3 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h3>\n<blockquote>\n<p>比起另一套行为树插件来说， <code>NodeCanvas</code>  提供的功能比较基础，其更像是一个程序框架，因此其扩展性也更佳，通过提供的接口和程式，我们可以打造定制化的工作流，代码设计简洁有力。</p>\n</blockquote>\n<p>总之还是非常不错的！😏</p>\n",
            "tags": [
                "Unity Tool"
            ]
        },
        {
            "id": "https://www.fasty97.top/2021/09/09/NodeCanvas%E4%B9%8B%E5%AF%B9%E8%AF%9D%E6%A0%91/",
            "url": "https://www.fasty97.top/2021/09/09/NodeCanvas%E4%B9%8B%E5%AF%B9%E8%AF%9D%E6%A0%91/",
            "title": "NodeCanvas之对话树",
            "date_published": "2021-09-09T05:03:59.000Z",
            "content_html": "<h2 id=\"主要功能\"><a class=\"markdownIt-Anchor\" href=\"#主要功能\">#</a> 主要功能</h2>\n<blockquote>\n<p>基础功能都有，具备良好的扩展性。</p>\n</blockquote>\n<ol>\n<li>播放对话</li>\n<li>对话音效</li>\n<li>分支对话</li>\n<li>概览对话</li>\n<li>条件对话</li>\n<li>…</li>\n</ol>\n<h2 id=\"快速食用\"><a class=\"markdownIt-Anchor\" href=\"#快速食用\">#</a> 快速食用</h2>\n<h3 id=\"添加脚本\"><a class=\"markdownIt-Anchor\" href=\"#添加脚本\">#</a> 添加脚本</h3>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20210910095523.png\" alt=\"image-20210910095523494\"></p>\n<h3 id=\"添加角色并给角色添加\"><a class=\"markdownIt-Anchor\" href=\"#添加角色并给角色添加\">#</a> 添加角色并给角色添加</h3>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20210910100346.png\" alt=\"image-20210910100346800\"></p>\n<h3 id=\"编写对话树\"><a class=\"markdownIt-Anchor\" href=\"#编写对话树\">#</a> 编写对话树</h3>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20210910095400.png\" alt=\"image-20210910095352935\"></p>\n<h4 id=\"启动对话树\"><a class=\"markdownIt-Anchor\" href=\"#启动对话树\">#</a> 启动对话树</h4>\n<blockquote>\n<p><code>默认是不启动</code> 对话树的，可以在代码中控制启动也可以在属性面板设置游戏开始时启动。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">DialogueTreeController</span> dialogueTreeController<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Input<span class=\"token punctuation\">.</span><span class=\"token function\">GetKeyDown</span><span class=\"token punctuation\">(</span>KeyCode<span class=\"token punctuation\">.</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        dialogueTreeController<span class=\"token punctuation\">.</span><span class=\"token function\">StartBehaviour</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>为了保证对话正确显示，在 UI 层需要添加官方的预制体和事件系统监听</p>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20210910100905.png\" alt=\"image-20210910100905937\"></p>\n<h2 id=\"存在的问题待学习\"><a class=\"markdownIt-Anchor\" href=\"#存在的问题待学习\">#</a> 存在的问题待学习</h2>\n<ol>\n<li>\n<p>❓NodeCanvas 的对话树似乎 在显示富文本内容时存在问题。例如使用颜色代码，会出现输出颜色代码之后再实现效果的问题</p>\n</li>\n<li>\n<p>❓ 其配置的 UI 显示界面不清楚是如何进行绑定的</p>\n</li>\n</ol>\n",
            "tags": [
                "Unity Tool"
            ]
        },
        {
            "id": "https://www.fasty97.top/2021/09/08/NodeCanvas%E4%B9%8BFSM%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA/",
            "url": "https://www.fasty97.top/2021/09/08/NodeCanvas%E4%B9%8BFSM%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA/",
            "title": "NodeCanvas之FSM有限状态机",
            "date_published": "2021-09-08T14:27:11.000Z",
            "content_html": "<blockquote>\n<p>FSM 有限状态机是一种设计方式，用于处理不同状态的切换</p>\n<p>其主要包含以下几个部分：</p>\n<ol>\n<li>状态（进入、更新、离开）</li>\n<li>过渡条件 【 <code>用于控制状态的切换</code> 】</li>\n<li>状态机控制器【 <code>用于控制状态机</code> 】</li>\n</ol>\n</blockquote>\n<p>本文主要介绍 <code>NodeCanvas</code>  的 FSM 使用，具体基础 FSM 概念不做解释。</p>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20210908225324.png\" alt=\"image-20210908225324425\"></p>\n<center>FSM示例图</center>\n<h2 id=\"开始\"><a class=\"markdownIt-Anchor\" href=\"#开始\">#</a> 开始</h2>\n<p>为游戏对象添加如下脚本：</p>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20210909125307.png\" alt=\"image-20210909125300176\"></p>\n<h2 id=\"结点类型\"><a class=\"markdownIt-Anchor\" href=\"#结点类型\">#</a> 结点类型</h2>\n<p>NodeCanvas 中结点分为几个类型：</p>\n<ol>\n<li>Action State（动作状态，只处理进入状态）</li>\n<li>Super Action State （超级动作状态，能处理进入、更新、离开状态）</li>\n<li>Pass（过渡态，不做任何处理）</li>\n<li>Parallel（并行。 在状态机处于任意状态时，并行执行）</li>\n<li>Any State（能够从任意状态进行状态切换，在状态机过程中，时刻监听）</li>\n</ol>\n<h2 id=\"结语\"><a class=\"markdownIt-Anchor\" href=\"#结语\">#</a> 结语</h2>\n<p>在 FSM 中，也没什么太多可以讲的，其条件和行为结点为 <code>NodeCanvas</code>  行为树、状态机、对话树所共用。</p>\n<blockquote>\n<p>个人感觉，NodeCanvas 设计最棒的一点就是，他三种系统用的同一个底层，而且可以互相嵌套兼容。</p>\n</blockquote>\n",
            "tags": [
                "Unity Tool",
                "FSM",
                "状态机",
                "有限状态机"
            ]
        },
        {
            "id": "https://www.fasty97.top/2021/09/04/NodeCanvas%E4%B9%8B%E8%A1%8C%E4%B8%BA%E6%A0%91/",
            "url": "https://www.fasty97.top/2021/09/04/NodeCanvas%E4%B9%8B%E8%A1%8C%E4%B8%BA%E6%A0%91/",
            "title": "NodeCanvas之行为树",
            "date_published": "2021-09-04T12:15:26.000Z",
            "content_html": "<h2 id=\"认识行为树\"><a class=\"markdownIt-Anchor\" href=\"#认识行为树\">#</a> 认识行为树</h2>\n<ol>\n<li>什么是行为树？<br>\n自顶向下的树形结构</li>\n</ol>\n<p>行为树 Behavior Tree 是一种数据结构，自顶向下的树形结构。</p>\n<ol start=\"2\">\n<li>什么情况下要使用行为树？<br>\n情况多变，条件复杂</li>\n</ol>\n<p>在处理逻辑复杂的问题时，这个复杂可能是条件复杂，情况多样。</p>\n<p>行为树并非是游戏 Ai 的专属，在处理其他复杂业务逻辑或可能时都可以尝试用行为树来解决。</p>\n<ol start=\"3\">\n<li>行为树有什么优点？<br>\n高效可读，易于扩展</li>\n</ol>\n<p>行为树解决的问题是将复杂的关系，简单化，能很大程度的加强程序的可读性，健壮性。</p>\n<ol start=\"4\">\n<li>\n<p>行为树由哪几部分组成？<br>\n主要由四部分  CDAC 组成 ，两根两叶</p>\n<pre><code>Composites  组合节点    只能作为根节点，控制子节点的执行（顺序）\nDecorator 装饰节点         只能作为根节点，修饰子节点\nActions     行为节点         只能作为叶子节点，执行具体动作\nConditinals 条件节点       只能作为叶子节点，判断条件\n</code></pre>\n<ol start=\"5\">\n<li>行为树的工作流程？<br>\n自顶向下，从左至右（并发进行），逐层进行</li>\n</ol>\n</li>\n</ol>\n<blockquote>\n<p>行为树执行的成果（成功 / 失败），由其子节点决定，子节点执行完成后会向父节点传递成功 / 失败的消息，<br>\n最终这些来自各个子枝的消息汇聚到行为树，行为树将结果整合得到行为树的最终执行结果。<br>\n其最终结果：同真为真，一假则假</p>\n</blockquote>\n<h2 id=\"关于nodecanvas\"><a class=\"markdownIt-Anchor\" href=\"#关于nodecanvas\">#</a> 关于 NodeCanvas</h2>\n<blockquote>\n<p><code>NodeCanvas</code>  是一个集成了:</p>\n<ul>\n<li>行为树</li>\n<li>对话树</li>\n<li>FSM 有限状态机</li>\n</ul>\n<p>的可视化 开发工具。</p>\n</blockquote>\n<h2 id=\"快速开始\"><a class=\"markdownIt-Anchor\" href=\"#快速开始\">#</a> 快速开始</h2>\n<h3 id=\"准备\"><a class=\"markdownIt-Anchor\" href=\"#准备\">#</a> 准备</h3>\n<p>准备一个角色，1.  配置好动画控制器，2. 进行 NaveMesh 的网格烘焙。</p>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20210904203556.png\" alt=\"Aa\"></p>\n<p>添加上以下组件:</p>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20210904203733.png\" alt=\"image-20210904203733291\"></p>\n<h3 id=\"创建行为树\"><a class=\"markdownIt-Anchor\" href=\"#创建行为树\">#</a> 创建行为树</h3>\n<p>可以看到由两个部分组成</p>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20210904204124.png\" alt=\"image-20210904204124080\"></p>\n<h4 id=\"数据黑板\"><a class=\"markdownIt-Anchor\" href=\"#数据黑板\">#</a> 数据黑板</h4>\n<blockquote>\n<p>“黑板”（Blackboard）在人工智能领域已经是一个很古老的东西了，它基于一种很直观的概念，就是一群人为了解决一个问题，在黑板前聚集，每个人都可以发表自己的意见，然后在黑板上写下自己的看法，当然你也可以基于别人记录在黑板上的看法，来发表和更新自己的看法，在这样不断的意见交换，看法更新的过程中，越来越趋向于对于问题的最终解答。一开始的黑板系统就是这样一个由多个子系统来共同协作的人工智能解决方案。</p>\n</blockquote>\n<p>可参考: <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5haXNoYXJpbmcuY29tL2FyY2hpdmVzLzgwMQ==\">http://www.aisharing.com/archives/801</span></p>\n<p><code>在NodeCanvas里，我们可以把需要共享点数据放在黑板里，在多个行为树中共享。</code></p>\n<h4 id=\"操作窗口\"><a class=\"markdownIt-Anchor\" href=\"#操作窗口\">#</a> 操作窗口</h4>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20210904204714.png\" alt=\"image-20210904204714062\"></p>\n<p>左上可以导入导出，右上是黑板数据。</p>\n<p>可以添加不同类型点节点， <code>行为树一般从流程节点开始</code> 。</p>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20210904204908.png\" alt=\"image-20210904204908578\"></p>\n<h4 id=\"基本流程\"><a class=\"markdownIt-Anchor\" href=\"#基本流程\">#</a> 基本流程</h4>\n<ol>\n<li>\n<p>Sequencer 依次执行直到失败</p>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20210904205615.png\" alt=\"image-20210904205615378\"></p>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20210904205615.png\" alt=\"\"><br>\n完成效果如下:<br>\n<img data-src=\"https://pic.fasty97.top/NotePad/20210904210007.gif\" alt=\"\"></p>\n</li>\n<li>\n<p>Selector 依次执行直到成功</p>\n</li>\n</ol>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20210904210501.png\" alt=\"image-20210904210501209\"></p>\n<ol start=\"3\">\n<li>Parallel  并行执行</li>\n</ol>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20210904210629.png\" alt=\"image-20210904210629825\"> 其中，可以结束配置参数：</p>\n<p>第一次成功、第一次失败、第一次成功或失败。</p>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20210904211016.png\" alt=\"image-20210904211016371\"></p>\n<h2 id=\"完成的行为树\"><a class=\"markdownIt-Anchor\" href=\"#完成的行为树\">#</a> 完成的行为树</h2>\n<blockquote>\n<p>包含攻击、追逐、徘徊、巡逻几个状态</p>\n</blockquote>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20210905162014.png\" alt=\"image-20210905162014408\"></p>\n<h3 id=\"节点介绍\"><a class=\"markdownIt-Anchor\" href=\"#节点介绍\">#</a> 节点介绍</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9hMTI0NzA1NzdmZDA=\">NodeCanvas—— 行为树节点介绍 - 简书 (jianshu.com)</span></p>\n<h2 id=\"扩展-分层行为树\"><a class=\"markdownIt-Anchor\" href=\"#扩展-分层行为树\">#</a> 扩展 - 分层行为树</h2>\n<p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTYyNDAyNC9hcnRpY2xlL2RldGFpbHMvODA4NzkyOTQ=\">分层机制 - 复杂行为树的行为控制_一生做游戏 - CSDN 博客_复杂行为树</span></p>\n<h2 id=\"综合参考\"><a class=\"markdownIt-Anchor\" href=\"#综合参考\">#</a> 综合参考</h2>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20210905122921.png\" alt=\"image-20210905122914367\"></p>\n",
            "tags": [
                "Unity Tool",
                "行为树"
            ]
        },
        {
            "id": "https://www.fasty97.top/2020/01/29/NaughtyAttributes%E6%9B%B4%E7%9B%B4%E8%A7%82%E7%9A%84%E7%AE%A1%E7%90%86%E5%B1%9E%E6%80%A7/",
            "url": "https://www.fasty97.top/2020/01/29/NaughtyAttributes%E6%9B%B4%E7%9B%B4%E8%A7%82%E7%9A%84%E7%AE%A1%E7%90%86%E5%B1%9E%E6%80%A7/",
            "title": "NaughtyAttributes更直观的管理属性",
            "date_published": "2020-01-29T07:09:20.000Z",
            "content_html": "<h3>NaughtyAttributes</h3>\n<p>使用 NaughtyAttributes 可以很方便的管理 unity 属性面板的脚本属性，可以实现许多 unity 原先特性不能实现的效果，详情可以看向下面的 github 地址：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2Ricml6b3YvTmF1Z2h0eUF0dHJpYnV0ZXM=\">Github 项目地址</span></p>\n<p>想水一期文章，好的，水完了～</p>\n",
            "tags": [
                "好物推荐",
                "unity Tool"
            ]
        }
    ]
}