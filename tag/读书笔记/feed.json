{
    "version": "https://jsonfeed.org/version/1",
    "title": "指尖小屋 • All posts by \"读书笔记\" tag",
    "description": "学习的过程大概就是学了忘,忘了学，抽空多停下来总结，不要冲的太前。",
    "home_page_url": "https://www.fasty97.top",
    "items": [
        {
            "id": "https://www.fasty97.top/2022/12/26/Unity%E5%85%A5%E9%97%A8%E7%B2%BE%E8%A6%81%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%E8%AE%A9%E7%94%BB%E9%9D%A2%E5%8A%A8%E8%B5%B7%E6%9D%A5/",
            "url": "https://www.fasty97.top/2022/12/26/Unity%E5%85%A5%E9%97%A8%E7%B2%BE%E8%A6%81%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%E8%AE%A9%E7%94%BB%E9%9D%A2%E5%8A%A8%E8%B5%B7%E6%9D%A5/",
            "title": "Unity入门精要（十一）让画面动起来",
            "date_published": "2022-12-26T03:34:17.000Z",
            "content_html": "<h2 id=\"unityshader的内置时间变量\"><a class=\"markdownIt-Anchor\" href=\"#unityshader的内置时间变量\">#</a> UnityShader 的内置时间变量</h2>\n<p><img data-src=\"http://pic.fasty97.top/NotePad/202212261137373.png\" alt=\"image-20221226113747301\"></p>\n<h2 id=\"序列帧动画\"><a class=\"markdownIt-Anchor\" href=\"#序列帧动画\">#</a> 序列帧动画</h2>\n<p><img data-src=\"http://pic.fasty97.top/NotePad/202212261519510.gif\" alt=\"\"></p>\n<blockquote>\n<p>通过使用 Time 实现循环的特效播放。</p>\n</blockquote>\n<figure class=\"highlight glsl\"><figcaption data-lang=\"GLSL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Shader <span class=\"token string\">\"Unlit/Exp2Shader\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    Properties</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">_Color</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Color Tint\"</span><span class=\"token punctuation\">,</span>Color<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function\">_MainTex</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Texture\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span>D<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"white\"</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">_HorizontalAmount</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Horizontal Amount\"</span><span class=\"token punctuation\">,</span>Float<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token function\">_VerticalAmount</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Vertical Amount\"</span><span class=\"token punctuation\">,</span>Float<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token function\">_Speed</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Speed\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">Range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">30</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    SubShader</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        Tags</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token string\">\"Queue\"</span><span class=\"token operator\">=</span><span class=\"token string\">\"Transparent\"</span> <span class=\"token string\">\"IgnoreProjector\"</span><span class=\"token operator\">=</span><span class=\"token string\">\"True\"</span> <span class=\"token string\">\"RenderType\"</span><span class=\"token operator\">=</span><span class=\"token string\">\"Transparent\"</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        Pass</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            CGPROGRAM</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">vertex vert</span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">fragment frag</span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token comment\">// make fog work</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">multi_compile_fog</span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"UnityCG.cginc\"</span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">struct</span> <span class=\"token class-name\">appdata</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                float4 vertex <span class=\"token operator\">:</span> POSITION<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                float2 uv <span class=\"token operator\">:</span> TEXCOORD0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token keyword\">struct</span> <span class=\"token class-name\">v2f</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                float2 uv <span class=\"token operator\">:</span> TEXCOORD0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                float4 vertex <span class=\"token operator\">:</span> SV_POSITION<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token keyword\">sampler2D</span> _MainTex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            float4 _MainTex_ST<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            v2f <span class=\"token function\">vert</span><span class=\"token punctuation\">(</span>appdata v<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                v2f o<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                o<span class=\"token punctuation\">.</span>vertex <span class=\"token operator\">=</span> <span class=\"token function\">UnityObjectToClipPos</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>vertex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                o<span class=\"token punctuation\">.</span>uv <span class=\"token operator\">=</span> <span class=\"token function\">TRANSFORM_TEX</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>uv<span class=\"token punctuation\">,</span> _MainTex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                <span class=\"token keyword\">return</span> o<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token keyword\">float</span> _Speed<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token keyword\">float</span> _HorizontalAmount<span class=\"token punctuation\">,</span> _VerticalAmount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            fixed4 _Color<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            fixed4 <span class=\"token function\">frag</span><span class=\"token punctuation\">(</span>v2f i<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> SV_Target</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                <span class=\"token keyword\">float</span> time <span class=\"token operator\">=</span> <span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>_Time<span class=\"token punctuation\">.</span>y <span class=\"token operator\">*</span> _Speed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                <span class=\"token keyword\">float</span> row <span class=\"token operator\">=</span> <span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>time <span class=\"token operator\">/</span> _HorizontalAmount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                <span class=\"token keyword\">float</span> column <span class=\"token operator\">=</span> time <span class=\"token operator\">-</span> row <span class=\"token operator\">*</span> _VerticalAmount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                half2 uv <span class=\"token operator\">=</span> i<span class=\"token punctuation\">.</span>uv <span class=\"token operator\">+</span> <span class=\"token function\">half2</span><span class=\"token punctuation\">(</span>column<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                uv<span class=\"token punctuation\">.</span>x <span class=\"token operator\">/=</span> _HorizontalAmount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                uv<span class=\"token punctuation\">.</span>y <span class=\"token operator\">/=</span> _VerticalAmount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                fixed4 c <span class=\"token operator\">=</span> <span class=\"token function\">tex2D</span><span class=\"token punctuation\">(</span>_MainTex<span class=\"token punctuation\">,</span> uv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                c<span class=\"token punctuation\">.</span>rgb <span class=\"token operator\">*=</span> _Color<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                <span class=\"token keyword\">return</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            ENDCG</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>   </pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>    Fallback <span class=\"token string\">\"Transparent/VertexLit\"</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"无限滚动背景\"><a class=\"markdownIt-Anchor\" href=\"#无限滚动背景\">#</a> 无限滚动背景</h2>\n<p>很多无限滚动的背景也是使用了纹理动画。纹理资源： <span class=\"exturl\" data-url=\"aHR0cHM6Ly9vcGVuZ2FtZWFydC5vcmcv\">OpenGameArt.org</span></p>\n<blockquote>\n<p>注意： uv 现已经不存在 zw 值。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Shader <span class=\"token string\">\"Unlit/BackGroundShader\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    Properties</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        _MainTex <span class=\"token punctuation\">(</span><span class=\"token string\">\"Texture\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2D</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"white\"</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function\">_DetailTex</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2nd Layer (RGB)\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">2D</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token string\">\"white\"</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">_ScrollX</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Base Layer Scrool Speed\"</span><span class=\"token punctuation\">,</span>Float<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">1.0</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">_Scroll2X</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2nd Layer Scroll Speed\"</span><span class=\"token punctuation\">,</span>Float<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">1.0</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token function\">_Multiplier</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Layer Multiplier\"</span><span class=\"token punctuation\">,</span>Float<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    SubShader</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        Tags</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token string\">\"RenderType\"</span><span class=\"token operator\">=</span><span class=\"token string\">\"Opaque\"</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        LOD <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        Pass</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            CGPROGRAM</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">pragma</span> vertex vert</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">pragma</span> fragment frag</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token comment\">// make fog work</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">pragma</span> multi_compile_fog</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token preprocessor property\">#include </span><span class=\"token string\">\"UnityCG.cginc\"</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">struct</span> <span class=\"token class-name\">appdata</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token class-name\">float4</span> vertex <span class=\"token punctuation\">:</span> POSITION<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token class-name\">float2</span> uv <span class=\"token punctuation\">:</span> TEXCOORD0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token keyword\">struct</span> <span class=\"token class-name\">v2f</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token class-name\">float2</span> uv <span class=\"token punctuation\">:</span> TEXCOORD0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                <span class=\"token function\">UNITY_FOG_COORDS</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token class-name\">float4</span> vertex <span class=\"token punctuation\">:</span> SV_POSITION<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token class-name\">sampler2D</span> _MainTex<span class=\"token punctuation\">,</span> _DetailTex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token class-name\">float4</span> _MainTex_ST<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> _ScrollX<span class=\"token punctuation\">,</span> _Scroll2X<span class=\"token punctuation\">,</span> _Multiplier<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token class-name\">float4</span> _DetailTex_ST<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token return-type class-name\">v2f</span> <span class=\"token function\">vert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">appdata</span> v<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                <span class=\"token class-name\">v2f</span> o<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                o<span class=\"token punctuation\">.</span>vertex <span class=\"token operator\">=</span> <span class=\"token function\">UnityObjectToClipPos</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>vertex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                o<span class=\"token punctuation\">.</span>uv<span class=\"token punctuation\">.</span>xy <span class=\"token operator\">=</span> <span class=\"token function\">TRANSFORM_TEX</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>uv<span class=\"token punctuation\">,</span> _MainTex<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">frac</span><span class=\"token punctuation\">(</span><span class=\"token function\">float2</span><span class=\"token punctuation\">(</span>_ScrollX<span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> _Time<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                o<span class=\"token punctuation\">.</span>uv<span class=\"token punctuation\">.</span>zw <span class=\"token operator\">=</span> <span class=\"token function\">TRANSFORM_TEX</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>uv<span class=\"token punctuation\">,</span> _DetailTex<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">frac</span><span class=\"token punctuation\">(</span><span class=\"token function\">float2</span><span class=\"token punctuation\">(</span>_Scroll2X<span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> _Time<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token function\">UNITY_TRANSFER_FOG</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span> o<span class=\"token punctuation\">.</span>vertex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                <span class=\"token keyword\">return</span> o<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token return-type class-name\">fixed4</span> <span class=\"token function\">frag</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">v2f</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> SV_Target</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                <span class=\"token class-name\">fixed4</span> firstLayer <span class=\"token operator\">=</span> <span class=\"token function\">tex2D</span><span class=\"token punctuation\">(</span>_MainTex<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">.</span>uv<span class=\"token punctuation\">.</span>xy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                <span class=\"token class-name\">fixed4</span> secondLayer <span class=\"token operator\">=</span> <span class=\"token function\">tex2D</span><span class=\"token punctuation\">(</span>_DetailTex<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">.</span>uv<span class=\"token punctuation\">.</span>zw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                <span class=\"token class-name\">fixed4</span> c <span class=\"token operator\">=</span> <span class=\"token function\">lerp</span><span class=\"token punctuation\">(</span>firstLayer<span class=\"token punctuation\">,</span> secondLayer<span class=\"token punctuation\">,</span> secondLayer<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                c<span class=\"token punctuation\">.</span>rgb <span class=\"token operator\">*=</span> _Multiplier<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                <span class=\"token keyword\">return</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            ENDCG</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    Fallback <span class=\"token string\">\"VertexLit\"</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"顶点动画\"><a class=\"markdownIt-Anchor\" href=\"#顶点动画\">#</a> 顶点动画</h2>\n",
            "tags": [
                "Shader",
                "读书笔记"
            ]
        },
        {
            "id": "https://www.fasty97.top/2022/12/26/Unity%E5%85%A5%E9%97%A8%E7%B2%BE%E8%A6%81%EF%BC%88%E4%B8%83%EF%BC%89%20%E5%9F%BA%E7%A1%80%E7%BA%B9%E7%90%86/",
            "url": "https://www.fasty97.top/2022/12/26/Unity%E5%85%A5%E9%97%A8%E7%B2%BE%E8%A6%81%EF%BC%88%E4%B8%83%EF%BC%89%20%E5%9F%BA%E7%A1%80%E7%BA%B9%E7%90%86/",
            "title": "Unity入门精要（七）基础纹理",
            "date_published": "2022-12-26T03:13:00.000Z",
            "content_html": "<h1 id=\"unity-shader-第七章-基础纹理\"><a class=\"markdownIt-Anchor\" href=\"#unity-shader-第七章-基础纹理\">#</a> Unity Shader 第七章 基础纹理</h1>\n<blockquote>\n<p>纹理 —— 使用一张图片来控制模型的外观，使用纹理映射技术把一张图黏在模型表面，逐纹素地控制模型的颜色。</p>\n</blockquote>\n<p>通常使用纹理映射坐标对应纹理中的 2D 坐标，这被称为是 UV 坐标。</p>\n<p>顶点 UV 坐标的范围通常被归一到 [0,1] 范围内。</p>\n<p>DirectX 中原点位于左上角，OpenGL 中原点位于左下角。</p>\n<p Unity=\"\" 使用的是OpenGL的坐标，即原点位于左下角=\"\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"></span></span></p>\n<p><img data-src=\"http://pic.fasty97.top/NotePad/202209131416024.png\" alt=\"image-20220824104021468\"></p>\n<h2 id=\"纹理采样\"><a class=\"markdownIt-Anchor\" href=\"#纹理采样\">#</a> 纹理采样</h2>\n<figure class=\"highlight glsl\"><figcaption data-lang=\"GLSL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Upgrade NOTE: replaced 'mul(UNITY_MATRIX_MVP,*)' with 'UnityObjectToClipPos(*)'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Shader <span class=\"token string\">\"Book/SingleTexture\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    Properties</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">_Color</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Color Tint\"</span><span class=\"token punctuation\">,</span>Color<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">_MainTex</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Texture\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span>D<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"white\"</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">//        反射</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token function\">_Specular</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Specular\"</span><span class=\"token punctuation\">,</span>Color<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">//        高光</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">_Gloss</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Gloss\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">Range</span><span class=\"token punctuation\">(</span><span class=\"token number\">8.0</span><span class=\"token punctuation\">,</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    SubShader</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        Tags</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token string\">\"RenderType\"</span><span class=\"token operator\">=</span><span class=\"token string\">\"Opaque\"</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token string\">\"LightMode\"</span><span class=\"token operator\">=</span><span class=\"token string\">\"ForwardBase\"</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        LOD <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        Pass</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            CGPROGRAM</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">vertex vert</span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">fragment frag</span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token comment\">// make fog work</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">multi_compile_fog</span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"UnityCG.cginc\"</span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Lighting.cginc\"</span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token comment\">// 声明对应变量</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            fixed4 _Color<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token keyword\">sampler2D</span> _MainTex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            float4 _MainTex_ST<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            fixed4 _Specular<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token keyword\">float</span> _Gloss<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token comment\">// 输入</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token keyword\">struct</span> <span class=\"token class-name\">a2v</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                float4 vertex<span class=\"token operator\">:</span> POSITION<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                float3 normal<span class=\"token operator\">:</span> NORMAL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                float4 texcoord<span class=\"token operator\">:</span> TEXCOORD0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token keyword\">struct</span> <span class=\"token class-name\">v2f</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                float4 pos<span class=\"token operator\">:</span> SV_POSITION<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                float3 worldNormal<span class=\"token operator\">:</span> TEXCOORD0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                float3 worldPos<span class=\"token operator\">:</span> TEXCOORD1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                float2 uv<span class=\"token operator\">:</span> TEXCOORD2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token comment\">// 进行顶点着色器</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            v2f <span class=\"token function\">vert</span><span class=\"token punctuation\">(</span>a2v v<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                v2f o<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                o<span class=\"token punctuation\">.</span>pos <span class=\"token operator\">=</span> <span class=\"token function\">UnityObjectToClipPos</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>vertex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                o<span class=\"token punctuation\">.</span>worldNormal <span class=\"token operator\">=</span> <span class=\"token function\">UnityObjectToWorldNormal</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>normal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                o<span class=\"token punctuation\">.</span>worldPos <span class=\"token operator\">=</span> <span class=\"token function\">mul</span><span class=\"token punctuation\">(</span>unity_ObjectToWorld<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span>vertex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>xyz<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                <span class=\"token comment\">// 计算 Thing And Offset</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                o<span class=\"token punctuation\">.</span>uv <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span>texcoord<span class=\"token punctuation\">.</span>xy <span class=\"token operator\">*</span> _MainTex_ST<span class=\"token punctuation\">.</span>xy <span class=\"token operator\">+</span> _MainTex_ST<span class=\"token punctuation\">.</span>zw<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                <span class=\"token comment\">// 可使用 Unity 内置宏</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>                <span class=\"token comment\">// o.uv = TRANSFORM_TEX(v.texcoord, _MainTex);</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>                <span class=\"token keyword\">return</span> o<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token comment\">// 进行片元着色器</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            fixed4 <span class=\"token function\">frag</span><span class=\"token punctuation\">(</span>v2f i<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> SV_Target</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                <span class=\"token comment\">// 光线方向</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>                fixed3 worldNormal <span class=\"token operator\">=</span> <span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span>worldNormal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>                fixed3 worldLightDir <span class=\"token operator\">=</span> <span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token function\">UnityWorldSpaceLightDir</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span>worldPos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>                <span class=\"token comment\">// 纹理采样</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>                fixed3 albedo <span class=\"token operator\">=</span> <span class=\"token function\">tex2D</span><span class=\"token punctuation\">(</span>_MainTex<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">.</span>uv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>rgb <span class=\"token operator\">*</span> _Color<span class=\"token punctuation\">.</span>rgb<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>                <span class=\"token comment\">// 环境光</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>                fixed3 ambient <span class=\"token operator\">=</span> UNITY_LIGHTMODEL_AMBIENT<span class=\"token punctuation\">.</span>xyz <span class=\"token operator\">*</span> albedo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>                <span class=\"token comment\">// 漫反射 - 半兰伯特模型</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>                fixed3 diffuse <span class=\"token operator\">=</span> _LightColor0<span class=\"token punctuation\">.</span>rgb <span class=\"token operator\">*</span> albedo <span class=\"token operator\">*</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token function\">dot</span><span class=\"token punctuation\">(</span>worldNormal<span class=\"token punctuation\">,</span> worldLightDir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>                fixed3 viewDir <span class=\"token operator\">=</span> <span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token function\">UnityWorldSpaceViewDir</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span>worldPos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>                fixed3 halfDir <span class=\"token operator\">=</span> <span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span>worldLightDir <span class=\"token operator\">+</span> viewDir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>                <span class=\"token comment\">// 高光反射</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>                fixed3 specular <span class=\"token operator\">=</span> _LightColor0<span class=\"token punctuation\">.</span>rgb <span class=\"token operator\">*</span> _Specular<span class=\"token punctuation\">.</span>rgb <span class=\"token operator\">*</span> <span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token function\">dot</span><span class=\"token punctuation\">(</span>worldNormal<span class=\"token punctuation\">,</span> halfDir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> _Gloss<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token function\">fixed4</span><span class=\"token punctuation\">(</span>ambient <span class=\"token operator\">+</span> diffuse <span class=\"token operator\">+</span> specular<span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>            ENDCG</pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    Fallback <span class=\"token string\">\"Specular\"</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre></pre></td></tr><tr><td data-num=\"105\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"http://pic.fasty97.top/NotePad/202209131416080.png\" alt=\"image-20220824164058414\"></p>\n<p>值得注意的是：</p>\n<blockquote>\n<p>如果导入的纹理大小超过了 Max Texture Size 中的设置值，那么 Unity 将会把该纹理缩放为这个最大分辨率。理想情况下，导入的纹理可以是非正方形的，但长宽的大小应该是 2 的幂，例如 2、4、8、16、32、64 等。如果使用了非 2 的幂大小（Non Power of Two, NPOT）的纹理，那么这些纹理往往会占用更多的内存空间，而且 GPU 读取该纹理的速度也会有所下降。有一些平台甚至不支持这种 NPOT 纹理，这时 Unity 在内部会把它缩放成最近的 2 的幂大小。出于性能和空间的考虑，我们应该尽量使用 2 的幂大小的纹理。</p>\n</blockquote>\n<h2 id=\"凹凸映射\"><a class=\"markdownIt-Anchor\" href=\"#凹凸映射\">#</a> 凹凸映射</h2>\n<p>纹理的一种应用是凹凸映射（使用一张纹理来修改模型表面的法线，以便为模型提供更多的细节。）——++ 法线贴图 ++。</p>\n<p>有以下两种映射方式【高度纹理，法线纹理】：</p>\n<p><img data-src=\"http://pic.fasty97.top/NotePad/202209131416788.png\" alt=\"image-20220830094021154\"></p>\n<h3 id=\"高度纹理\"><a class=\"markdownIt-Anchor\" href=\"#高度纹理\">#</a> 高度纹理</h3>\n<p>存储颜色强度值来表示海拔高度，颜色越深表面越向外凸起，颜色越钱表面越向内凹陷。</p>\n<p>优点：直观明显</p>\n<p>缺点：计算复杂，不能实时计算得到表面法线，消耗性能。</p>\n<p><img data-src=\"http://pic.fasty97.top/NotePad/202209131416546.png\" alt=\"image-20220830094546307\"></p>\n<h3 id=\"法线纹理\"><a class=\"markdownIt-Anchor\" href=\"#法线纹理\">#</a> 法线纹理</h3>\n<p>存储表面法线方向，范围值为 [-1,1], 而像素分量范围为 [0,1]，需要进行映射。</p>\n<p><img data-src=\"http://pic.fasty97.top/NotePad/202209131417006.png\" alt=\"image-20220830094820422\"></p>\n<p>在对法线纹理进行采样后，还需要对结果进行一次反映射得到法线方向：</p>\n<p><code>normal=pixel*2-1</code></p>\n<p>根据使用的坐标系分为：</p>\n<ol>\n<li>\n<p>模型空间的法线纹理</p>\n<p>因为法线方向各不相同，在对应到贴图上是会呈现出不同的颜色，不同的颜色就对应不同的法线方向。—— 直观</p>\n</li>\n<li>\n<p>切线空间的法线纹理</p>\n<p>切线空间下的法线则呈现浅蓝色</p>\n</li>\n</ol>\n",
            "tags": [
                "Shader",
                "读书笔记"
            ]
        },
        {
            "id": "https://www.fasty97.top/2022/09/20/Unity%E5%85%A5%E9%97%A8%E7%B2%BE%E8%A6%81%EF%BC%88%E5%8D%81%EF%BC%89%E9%AB%98%E7%BA%A7%E7%BA%B9%E7%90%86/",
            "url": "https://www.fasty97.top/2022/09/20/Unity%E5%85%A5%E9%97%A8%E7%B2%BE%E8%A6%81%EF%BC%88%E5%8D%81%EF%BC%89%E9%AB%98%E7%BA%A7%E7%BA%B9%E7%90%86/",
            "title": "Unity入门精要（十）高级纹理",
            "date_published": "2022-09-20T13:14:05.000Z",
            "content_html": "<h1 id=\"高级纹理\"><a class=\"markdownIt-Anchor\" href=\"#高级纹理\">#</a> 高级纹理</h1>\n<ul>\n<li>基础纹理：法线纹理、渐变纹理、遮罩纹理等。</li>\n<li>高级纹理：CubeMap、Render Texture、Procedure Texture</li>\n</ul>\n<h2 id=\"cubemap立方体纹理\"><a class=\"markdownIt-Anchor\" href=\"#cubemap立方体纹理\">#</a> CubeMap 立方体纹理</h2>\n<blockquote>\n<p>在图形学中，立方体纹理是环境映射的一种实现方法。</p>\n</blockquote>\n<img data-src=\"http://pic.fasty97.top/NotePad/202209131407838.png\" alt=\"image-20220913140753789\" style=\"zoom:50%;\" />\n<center>立方体纹理采样</center>\n<p>立方体纹理常常用于天空盒、环境映射。</p>\n",
            "tags": [
                "Shader",
                "读书笔记"
            ]
        },
        {
            "id": "https://www.fasty97.top/2022/05/20/Unity%E5%85%A5%E9%97%A8%E7%B2%BE%E8%A6%81%EF%BC%88%E4%B9%9D%EF%BC%89%E5%A4%8D%E6%9D%82%E5%85%89%E7%85%A7/",
            "url": "https://www.fasty97.top/2022/05/20/Unity%E5%85%A5%E9%97%A8%E7%B2%BE%E8%A6%81%EF%BC%88%E4%B9%9D%EF%BC%89%E5%A4%8D%E6%9D%82%E5%85%89%E7%85%A7/",
            "title": "Unity入门精要（九）复杂光照",
            "date_published": "2022-05-19T22:58:51.000Z",
            "content_html": "<h1 id=\"复杂光照\"><a class=\"markdownIt-Anchor\" href=\"#复杂光照\">#</a> 复杂光照</h1>\n<p>在之前的学习中，我们使用的都是单一光照，实际在游戏中可能存在多个光源，不同的光源会互相影响构成真正的光照系统，在这一节我们将实现一个真正可用的光照模型。</p>\n<h2 id=\"渲染路径-rendering-path\"><a class=\"markdownIt-Anchor\" href=\"#渲染路径-rendering-path\">#</a> 渲染路径 Rendering Path</h2>\n<blockquote>\n<p>📖 决定了光照是如何应用到 Unity Shader 中的。</p>\n</blockquote>\n<p>我们只有为 Shader 正确地选择和设置了需要的渲染路径，该 Shader 的光照计算才能被正确执行。</p>\n<p>🏷渲染路径的分类</p>\n<ul>\n<li>前向渲染路径（Forward Rendering Path）</li>\n<li>延迟渲染路径（Deferred Rendering Path）</li>\n<li>顶点照明渲染路径（Vertex Lit Rendering Path）—— 已经被弃用</li>\n</ul>\n<p>目前 unity 提供了新的渲染路径代替了原来的渲染路径。</p>\n<blockquote>\n<p>默认使用 Graphics 中的设置，可以在摄像机中对设置进行覆盖。</p>\n</blockquote>\n<p><img data-src=\"http://pic.fasty97.top/NotePad/202209021127030.png\" alt=\"image-20220902112709918\"></p>\n<p>在 Shader Pass 中来指定该 Pass 使用的渲染路径：</p>\n<figure class=\"highlight scss\"><figcaption data-lang=\"Sass (Scss)\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">Pass  </span><span class=\"token punctuation\">&#123;</span> <span class=\"token selector\">Tags  </span><span class=\"token punctuation\">&#123;</span>  <span class=\"token string\">\"LightMode\"</span>  =  <span class=\"token string\">\"ForwardBase\"</span>  <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>LightMode 标签可供使用的渲染路径：</p>\n<p><img data-src=\"http://pic.fasty97.top/NotePad/202209021129823.png\" alt=\"image-20220902112959760\"></p>\n<p>💭为 Pass 指定正确的渲染路径对于 Unity 光照变量正确赋值具有重要意义。</p>\n<blockquote>\n<p>Unity 默认使用前向渲染光照路径.</p>\n</blockquote>\n<h3 id=\"前向渲染路径\"><a class=\"markdownIt-Anchor\" href=\"#前向渲染路径\">#</a> 前向渲染路径</h3>\n<blockquote>\n<p>前向渲染是传统渲染方式，也是我们常用的一种渲染路径。</p>\n</blockquote>\n<p>📖 原理：每进行一次完整的前向渲染，我们需要渲染该对象的渲染图元，并计算两个缓冲区的信息：颜色缓冲区和深度缓冲区。</p>\n<center>前向渲染伪代码</center>\n<p><img data-src=\"http://pic.fasty97.top/NotePad/202209021402465.png\" alt=\"image-20220902140220407\"></p>\n<p>每个光照下的物体都需要进行一次逐像素的 Pass，也就是在一个场景中，n 个物体 m 个光源的下，渲染场景需要 n*m 次 Pass。</p>\n<h3 id=\"unity中的前向渲染\"><a class=\"markdownIt-Anchor\" href=\"#unity中的前向渲染\">#</a> Unity 中的前向渲染</h3>\n<p>Unity 中照亮物体有 3 种方式：</p>\n<ol>\n<li>逐顶点处理 Spherical</li>\n<li>逐像素处理 Harmonics</li>\n<li>球谐函数 SH</li>\n</ol>\n<p>光源使用哪一种处理方式取决于它的类型和渲染模式。</p>\n<p><img data-src=\"http://pic.fasty97.top/NotePad/202209021411344.png\" alt=\"image-20220902141112298\"></p>\n<blockquote>\n<p>将渲染类型设置为 Important（重要的）来告诉 Unity 这个光源是重要的，把它当成一个逐像素光源来处理。</p>\n<p>通常，Unity 会自动根据远近、强度等参数对光源的重要性进行排序。</p>\n</blockquote>\n<ul>\n<li>\n<p>场景中最亮的平行光总是按逐像素处理的。</p>\n</li>\n<li>\n<p>渲染模式被设置成 Not Important 的光源，会按逐顶点或者 SH 处理。・渲染模式被设置成 Important 的光源，会按逐像素处理。</p>\n</li>\n<li>\n<p>如果根据以上规则得到的逐像素光源数量小于 Quality Setting 中的逐像素光源数量 (Pixel Light Count)，会有更多的光源以逐像素的方式进行渲染。</p>\n</li>\n</ul>\n<h3 id=\"内置变量函数\"><a class=\"markdownIt-Anchor\" href=\"#内置变量函数\">#</a> 内置变量函数</h3>\n<p><img data-src=\"http://pic.fasty97.top/NotePad/202209021420443.png\" alt=\"image-20220902142017381\"></p>\n<p><img data-src=\"http://pic.fasty97.top/NotePad/202209021420246.png\" alt=\"image-20220902142034183\"></p>\n<h3 id=\"相关参考\"><a class=\"markdownIt-Anchor\" href=\"#相关参考\">#</a> 相关参考</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC85Mzg0NjAwMA==\">Unity 渲染路径 - 知乎 (zhihu.com)</span></p>\n<h2 id=\"顶点照明渲染路径\"><a class=\"markdownIt-Anchor\" href=\"#顶点照明渲染路径\">#</a> 顶点照明渲染路径</h2>\n<blockquote>\n<p>顶点照明渲染路径是对硬件配置要求最少、运算性能最高，但同时也是得到的效果最差的一种类型，它不支持那些逐像素才能得到的效果，例如阴影、法线映射、高精度的高光反射等。</p>\n</blockquote>\n<p>📖同理，使用逐顶点的方式进行光照计算。—— 是前向渲染的一个子集。</p>\n<h2 id=\"延迟渲染路径\"><a class=\"markdownIt-Anchor\" href=\"#延迟渲染路径\">#</a> 延迟渲染路径</h2>\n<blockquote>\n<p>当场景中包含大量实时光源时，前向选人的性能会急速下降。</p>\n</blockquote>\n<p>除了前向渲染中使用的颜色缓冲和深度缓冲之外，延迟渲染还需要利用额外的缓冲 —— 这些缓冲被统称为 GBuffer。</p>\n<h3 id=\"原理\"><a class=\"markdownIt-Anchor\" href=\"#原理\">#</a> 原理</h3>\n<p><img data-src=\"http://pic.fasty97.top/NotePad/202209021438497.png\" alt=\"image-20220902143817442\"></p>\n<p>在光照计算 Pass 中直接存储法线，表面情况等，从 Gbuff 取到数据后直接在光照 Pass 中计算，故而延迟渲染和场景复杂度不挂钩，通常就只使用两个 Pass 完成故而效率较高。</p>\n<h3 id=\"缺点\"><a class=\"markdownIt-Anchor\" href=\"#缺点\">#</a> 缺点</h3>\n<ul>\n<li>不支持真正的抗锯齿（anti-aliasing）功能。</li>\n<li>不能处理半透明物体。</li>\n<li>对显卡有一定要求。如果要使用延迟渲染的话，显卡必须支持 MRT（Multiple Render Targets）、Shader Mode 3.0 及以上、深度渲染纹理以及双面的模板缓冲。</li>\n</ul>\n<blockquote>\n<p>通常我们使用前向渲染路径类型：)</p>\n</blockquote>\n<h2 id=\"unity光源类型\"><a class=\"markdownIt-Anchor\" href=\"#unity光源类型\">#</a> Unity 光源类型</h2>\n<h2 id=\"阴影\"><a class=\"markdownIt-Anchor\" href=\"#阴影\">#</a> 阴影</h2>\n<h3 id=\"不透明物体的阴影\"><a class=\"markdownIt-Anchor\" href=\"#不透明物体的阴影\">#</a> 不透明物体的阴影</h3>\n<p><img data-src=\"http://pic.fasty97.top/NotePad/202209131137666.png\" alt=\"image-20220913113734111\"></p>\n<center>通过MeshRender可以设置阴影</center>\n<p>将 CastShaows 设置为 <code>Two Sided</code>  可以双面渲染。</p>\n<blockquote>\n<p>Unity 选择使用一个额外的 Pass 来专门更新光源的阴影映射纹理，这个 Pass 就是 <code>LightMode</code>  标签被设置为 <code>ShadowCaster</code>  的 <code>Pass</code> 。</p>\n</blockquote>\n<ul>\n<li>接收阴影：对阴影纹理进行采样，最终把阴影纹理和光照进行相乘。</li>\n<li>投射阴影：加入到光源的阴影纹理计算中，通过指定的 Pass 来实现，如果使用了屏幕空间投射，还会生成一张摄像机的深度图。</li>\n</ul>\n<h4 id=\"接收阴影\"><a class=\"markdownIt-Anchor\" href=\"#接收阴影\">#</a> 接收阴影</h4>\n<ol>\n<li>在 BasePass 中包含内置文件：</li>\n</ol>\n<figure class=\"highlight glsl\"><figcaption data-lang=\"GLSL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"AutoLight.cginc\"</span></span></pre></td></tr></table></figure><ol start=\"2\">\n<li>在顶点着色器的输出结构体中添加 <code>SHADOW_COORDS</code></li>\n</ol>\n<p>SHADOW_COORDS(2)</p>\n<ol start=\"3\">\n<li>在顶点着色器返回之前添加一个内置宏 <code>TRANSFER_SHADOW</code></li>\n</ol>\n<p>TRANSFER_SHADOW(o)</p>\n<ol start=\"4\">\n<li>在片元着色器中计算阴影值，使用 <code>SHADOW_ATTENUATION</code></li>\n</ol>\n<p>fixed shadow=SHADOW_ATTENUATION(i)</p>\n<blockquote>\n<p>📖PS: 由于这些宏中会使用上下文变量来进行相关计算，例如 TRANSFER_SHADOW 会使用 v.vertex 或 a.pos 来计算坐标，因此为了能够让这些宏正确工作，我们需要保证自定义的变量名和这些宏中使用的变量名相匹配。我们需要保证：a2f 结构体中的顶点坐标变量名必须是 vertex，顶点着色器的输出结构体 v2f 必须命名为 v，且 v2f 中的顶点位置变量必须命名为 pos。</p>\n</blockquote>\n<h3 id=\"透明物体的阴影\"><a class=\"markdownIt-Anchor\" href=\"#透明物体的阴影\">#</a> 透明物体的阴影</h3>\n",
            "tags": [
                "Shader",
                "读书笔记"
            ]
        },
        {
            "id": "https://www.fasty97.top/2021/12/07/Unity%E5%85%A5%E9%97%A8%E7%B2%BE%E8%A6%81%EF%BC%88%E4%BA%94%EF%BC%89Shader%E5%85%A5%E9%97%A8/",
            "url": "https://www.fasty97.top/2021/12/07/Unity%E5%85%A5%E9%97%A8%E7%B2%BE%E8%A6%81%EF%BC%88%E4%BA%94%EF%BC%89Shader%E5%85%A5%E9%97%A8/",
            "title": "Unity入门精要（五）Shader入门",
            "date_published": "2021-12-07T07:31:05.000Z",
            "content_html": "",
            "tags": [
                "Shader",
                "读书笔记"
            ]
        },
        {
            "id": "https://www.fasty97.top/2021/12/03/Unity%E5%85%A5%E9%97%A8%E7%B2%BE%E8%A6%81%EF%BC%88%E5%9B%9B%EF%BC%89%20%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/",
            "url": "https://www.fasty97.top/2021/12/03/Unity%E5%85%A5%E9%97%A8%E7%B2%BE%E8%A6%81%EF%BC%88%E5%9B%9B%EF%BC%89%20%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/",
            "title": "Unity入门精要（四） 数学基础",
            "date_published": "2021-12-03T15:18:37.000Z",
            "content_html": "<blockquote>\n<p>最常使用到的就是矢量和矩阵（数学的分支之一 —— 线性代数）</p>\n</blockquote>\n<h1 id=\"笛卡尔坐标系\"><a class=\"markdownIt-Anchor\" href=\"#笛卡尔坐标系\">#</a> 笛卡尔坐标系</h1>\n<blockquote>\n<p>大部分的计算位置、距离和角度等变量都是在笛卡尔坐标系下进行的。</p>\n</blockquote>\n<h2 id=\"二维笛卡尔坐标系\"><a class=\"markdownIt-Anchor\" href=\"#二维笛卡尔坐标系\">#</a> 二维笛卡尔坐标系</h2>\n<ul>\n<li>一个特殊的位置，原点，它是整个坐标系的中心</li>\n<li>两条过原点相互垂直的矢量，x 轴和 y 轴。</li>\n</ul>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20211203134502.png\" alt=\"image-20211203134455788\"></p>\n<blockquote>\n<p>不同的渲染方式，坐标系不同</p>\n</blockquote>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20211203134650.png\" alt=\"image-20211203134650147\"></p>\n<h2 id=\"三维笛卡尔坐标系\"><a class=\"markdownIt-Anchor\" href=\"#三维笛卡尔坐标系\">#</a> 三维笛卡尔坐标系</h2>\n<ul>\n<li>三个坐标轴相互垂直，长度为 1，这样的基矢量被称为标准正交基</li>\n<li>这三个坐标轴被称为是基矢量</li>\n</ul>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20211203134755.png\" alt=\"image-20211203134755628\"></p>\n<h2 id=\"左手坐标系和右手坐标系\"><a class=\"markdownIt-Anchor\" href=\"#左手坐标系和右手坐标系\">#</a> 左手坐标系和右手坐标系</h2>\n<blockquote>\n<p>在二维笛卡尔坐标系中，我们可以通过旋转将任何的坐标系重合，也就是说所有的二维笛卡尔坐标系都是等价的。</p>\n<p>但对于 <code>三维坐标系</code> ，有时不能靠这种旋转来使 2 个不同朝向的坐标系重合。</p>\n</blockquote>\n<h3 id=\"左手坐标系\"><a class=\"markdownIt-Anchor\" href=\"#左手坐标系\">#</a> 左手坐标系</h3>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20211203135648.png\" alt=\"image-20211203135647988\"></p>\n<h3 id=\"右手坐标系\"><a class=\"markdownIt-Anchor\" href=\"#右手坐标系\">#</a> 右手坐标系</h3>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20211203135727.png\" alt=\"image-20211203135727456\"></p>\n<h2 id=\"unity的坐标系\"><a class=\"markdownIt-Anchor\" href=\"#unity的坐标系\">#</a> Unity 的坐标系</h2>\n<ul>\n<li>在模型空间和世界空间中，使用左手坐标系</li>\n<li>观察空间，使用右手坐标系，z 轴坐标的减少意味着场景深度的增加</li>\n</ul>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20211203140041.png\" alt=\"image-20211203140041620\"></p>\n<h2 id=\"练习\"><a class=\"markdownIt-Anchor\" href=\"#练习\">#</a> 练习</h2>\n<ol>\n<li>右手坐标系</li>\n<li></li>\n</ol>\n<h1 id=\"点和矢量\"><a class=\"markdownIt-Anchor\" href=\"#点和矢量\">#</a> 点和矢量</h1>\n<h1 id=\"矩阵\"><a class=\"markdownIt-Anchor\" href=\"#矩阵\">#</a> 矩阵</h1>\n<h1 id=\"矩阵变换\"><a class=\"markdownIt-Anchor\" href=\"#矩阵变换\">#</a> 矩阵变换</h1>\n<h1 id=\"坐标空间\"><a class=\"markdownIt-Anchor\" href=\"#坐标空间\">#</a> 坐标空间</h1>\n<h1 id=\"法线变换\"><a class=\"markdownIt-Anchor\" href=\"#法线变换\">#</a> 法线变换</h1>\n",
            "tags": [
                "Shader",
                "读书笔记"
            ]
        },
        {
            "id": "https://www.fasty97.top/2021/11/30/Shader%E5%85%A5%E9%97%A8%E7%B2%BE%E8%A6%81%EF%BC%88%E4%B8%89%EF%BC%89UnityShader/",
            "url": "https://www.fasty97.top/2021/11/30/Shader%E5%85%A5%E9%97%A8%E7%B2%BE%E8%A6%81%EF%BC%88%E4%B8%89%EF%BC%89UnityShader/",
            "title": "Shader入门精要（三）UnityShader",
            "date_published": "2021-11-30T14:30:18.000Z",
            "content_html": "<h1 id=\"第三章-unityshader基础\"><a class=\"markdownIt-Anchor\" href=\"#第三章-unityshader基础\">#</a> 第三章 UnityShader 基础</h1>\n<blockquote>\n<p>正式进入 shader 学习了，好耶！</p>\n</blockquote>\n<p>使用 UnityShader 的流程：</p>\n<ol>\n<li>创建一个材质</li>\n<li>创建一个 UnityShader，为材质添加</li>\n<li>把材质赋给对象</li>\n<li>调整 shader 属性</li>\n</ol>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20211130223524.png\" alt=\"image-20211130223524763\"></p>\n<h2 id=\"创建shader\"><a class=\"markdownIt-Anchor\" href=\"#创建shader\">#</a> 创建 Shader</h2>\n<p>Unity 包含了多种 shader 模板供我们使用。</p>\n<table>\n<thead>\n<tr>\n<th>Standard Surface Shader</th>\n<th>标准光照模型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Unlit Shader</td>\n<td>不包含光照（但包含雾效）</td>\n</tr>\n<tr>\n<td>mage Effect Shader</td>\n<td>实现各种屏幕后处理效果</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>Unity Shader 的导入面板还可以方便地查看其使用的渲染队列（Render queue）、是否关闭批处理（Disablebatching）、属性列表（Properties）等信息。</p>\n<h2 id=\"shaderlab\"><a class=\"markdownIt-Anchor\" href=\"#shaderlab\">#</a> ShaderLab</h2>\n<p>ShaderLab 是 Unity 为我们抽象的一种 shader 语言，可以更方便的通用。</p>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20211130224529.png\" alt=\"image-20211130224529408\"></p>\n<h3 id=\"基本结构\"><a class=\"markdownIt-Anchor\" href=\"#基本结构\">#</a> 基本结构</h3>\n<figure class=\"highlight glsl\"><figcaption data-lang=\"GLSL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Shader <span class=\"token string\">\"ShaderName\"</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tProperties<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token comment\">// 属性</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">Name</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"display name\"</span><span class=\"token punctuation\">,</span> PropertyType<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span>DefaultValue</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tSubShader<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token comment\">//A 着色器</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tSubShader<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token comment\">//B 着色器</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tFallback <span class=\"token string\">\"VertexLit\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"属性类型\"><a class=\"markdownIt-Anchor\" href=\"#属性类型\">#</a> 属性类型</h3>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20211130225328.png\" alt=\"image-20211130225328452\"></p>\n<p>根据以上属性得到的 Shader 放置在材质上效果：</p>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20211201122201.png\" alt=\"image-20211201122154053\"></p>\n<h3 id=\"subshader\"><a class=\"markdownIt-Anchor\" href=\"#subshader\">#</a> SubShader</h3>\n<blockquote>\n<p>每个 Unityshader 可以包含多个 SubShader， <code>最少要有一个</code> 。</p>\n</blockquote>\n<p>加载时会自动选择第一个可以执行的 SubShader，如果都不支持的话，使用 FallBack 指定的 shader。（为了解决不同显卡的差异）</p>\n<figure class=\"highlight glsl\"><figcaption data-lang=\"GLSL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SubShader<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 可选的</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">[</span>Tages<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 可选的</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">[</span>RenderSetup<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    Pass <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">//other Passes</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>每个 Pass 定义了一次完整的渲染流程，Pass 过多，性能下降。</p>\n<h4 id=\"状态设置\"><a class=\"markdownIt-Anchor\" href=\"#状态设置\">#</a> 状态设置</h4>\n<p>在 SubShader 中我们可以设置渲染的一些状态。</p>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20211201123019.png\" alt=\"image-20211201123019333\"></p>\n<p>在 SubShader 中设置的状态会应用到所有的 Pass，也可以在 Pass 中单独设置。</p>\n<figure class=\"highlight glsl\"><figcaption data-lang=\"GLSL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Tags<span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"TagName1\"</span><span class=\"token operator\">=</span><span class=\"token string\">\"Value1\"</span> <span class=\"token string\">\"TagName2\"</span><span class=\"token operator\">=</span><span class=\"token string\">\"CC\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">//Tags 是一些 str 键值对</span></pre></td></tr></table></figure><h4 id=\"subshader标签类型\"><a class=\"markdownIt-Anchor\" href=\"#subshader标签类型\">#</a> SubShader 标签类型</h4>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20211201123359.png\" alt=\"image-20211201123359479\"></p>\n<blockquote>\n<p>这些标签只能在 SubShader 中申明不可在 Pass 中申明</p>\n</blockquote>\n<h3 id=\"pass\"><a class=\"markdownIt-Anchor\" href=\"#pass\">#</a> Pass</h3>\n<figure class=\"highlight glsl\"><figcaption data-lang=\"GLSL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Pass<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">[</span>Name<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">[</span>Tags<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">[</span>RenderSetup<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//Other</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>可以通过 Name 来使用 Pass，例如：</p>\n<p><code>UsePass &quot;MyShader/PASSNAME&quot;</code></p>\n<blockquote>\n<p>默认 Unity 会将所有 Pass 名称转换为大写，所以使用时需要使用大写名称</p>\n</blockquote>\n<h4 id=\"pass标签类型\"><a class=\"markdownIt-Anchor\" href=\"#pass标签类型\">#</a> Pass 标签类型</h4>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20211201124000.png\" alt=\"image-20211201124000121\"></p>\n<ul>\n<li>\n<p>・UsePass：如我们之前提到的一样，可以使用该命令来复用其他 Unity Shader 中的 Pass；</p>\n</li>\n<li>\n<p>・GrabPass：该 Pass 负责抓取屏幕并将结果存储在一张纹理中，以用于后续的 Pass 处理（详见 10.2.2 节）。</p>\n</li>\n</ul>\n<h3 id=\"fallback\"><a class=\"markdownIt-Anchor\" href=\"#fallback\">#</a> FallBack</h3>\n<p>在 SubShader 后定义，如果上述的都不支持，用这个最低级的 Shader 吧！</p>\n<figure class=\"highlight glsl\"><figcaption data-lang=\"GLSL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Fallback <span class=\"token string\">\"name\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 或者</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Fallback off</pre></td></tr></table></figure><blockquote>\n<p>FallBack 还会影响阴影的透射</p>\n</blockquote>\n<h2 id=\"unity-shader形式\"><a class=\"markdownIt-Anchor\" href=\"#unity-shader形式\">#</a> Unity Shader 形式</h2>\n<p>着色器代码可以写在 SubShader 中（表面着色器做法），也可以写在 Pass 语义块中（顶点 / 片元着色器和固定函数着色器的做法）。</p>\n<figure class=\"highlight glsl\"><figcaption data-lang=\"GLSL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Shader <span class=\"token string\">\"MyShader\"</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    Properties<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 所需的各种属性</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    SubShader<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 真正意义上的 shader 代码会放在这里</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 表面着色器（Surface Shader）</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 顶点 / 片元着色器（Vertex/Fragment Shader)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 固定函数着色器（Fixed Function Shader）</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    SubShader<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 和上一哥 SubShader 类似</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"表面着色器surface-shader\"><a class=\"markdownIt-Anchor\" href=\"#表面着色器surface-shader\">#</a> 表面着色器 (Surface Shader)</h3>\n<blockquote>\n<p>是 Unity 自己创造的一种着色器代码类型，需要的代码量少，渲染代价比较大</p>\n</blockquote>\n<p>在背后，任然转换为顶点片元着色器。</p>\n<pre><code class=\"language-glSL\">Shader &quot;Custom/Simple&quot;&#123;\n    SubShader&#123;\n        Tags&#123;&quot;RenderType&quot;= &quot;Opaque&quot;&#125;\n        CGPROGRAM\n        #pragma suface surf lambert\n            struct Input&#123;\n                float4 color: COLOR;\n            &#125;\n        void surf(Input In,in out SurfaceOutput o)&#123;\n            o.Albedo=1;\n        &#125;\n        ENDCG\n    &#125;\n    Fallback &quot;Diffuse&quot;\n&#125;\n</code></pre>\n<p>表面着色器不需要关心，有多少个 Pass，每个 Pass 如何渲染</p>\n<p>CGPROGRAM 和 ENDCG 之间的代码是使用 CG/HLSL 编写的，也就是说，我们需要把 CG/HLSL 语言嵌套在 ShaderLab 语言中。</p>\n<h3 id=\"顶点片元着色器vertexfragment-shader\"><a class=\"markdownIt-Anchor\" href=\"#顶点片元着色器vertexfragment-shader\">#</a> 顶点片元着色器（Vertex/Fragment Shader）</h3>\n<figure class=\"highlight glsl\"><figcaption data-lang=\"GLSL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Shader <span class=\"token string\">\"Custom/Simple VertexFragment Shader\"</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    SubShader<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        Pass<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            CGPROGRAM</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">vertex vert</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">fragment frag float4 <span class=\"token function\">vert</span><span class=\"token punctuation\">(</span>float4 v<span class=\"token operator\">:</span> POSITION<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>SV_POSITION<span class=\"token punctuation\">&#123;</span></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                    <span class=\"token keyword\">return</span> <span class=\"token function\">mul</span><span class=\"token punctuation\">(</span>UNITY_MATRIX_MVP<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            fixed4 <span class=\"token function\">frag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>SV_Target<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token function\">fixed4</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            ENDCG</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>顶点 / 片元着色器的代码也需要定义在 CGPROGRAM 和 ENDCG 之间，但不同的是，顶点 / 片元着色器是写在 Pass 语义块内，而非 SubShader 内的.</p>\n<h3 id=\"固定函数着色器\"><a class=\"markdownIt-Anchor\" href=\"#固定函数着色器\">#</a> 固定函数着色器</h3>\n<blockquote>\n<p>对于一些比较老旧的设备，不支持可编程管线着色器，就需要使用固定函数着色器</p>\n</blockquote>\n<h3 id=\"使用哪种形式\"><a class=\"markdownIt-Anchor\" href=\"#使用哪种形式\">#</a> 使用哪种形式？</h3>\n<ul>\n<li>如果你想和各种光源打交道，你可能更喜欢使用表面着色器，但需要小心它在移动平台的性能表现。</li>\n<li>如果你需要使用的光照数目非常少，例如只有一个平行光，那么使用顶点 / 片元着色器是一个更好的选择。</li>\n<li>最重要的是，如果你有很多自定义的渲染效果，那么请选择顶点 / 片元着色器。</li>\n</ul>\n<blockquote>\n<p>至此，第三章完！</p>\n</blockquote>\n",
            "tags": [
                "Shader",
                "读书笔记"
            ]
        },
        {
            "id": "https://www.fasty97.top/2021/09/10/Shader%E5%85%A5%E9%97%A8%E7%B2%BE%E8%A6%81%EF%BC%88%E4%BA%8C%EF%BC%89/",
            "url": "https://www.fasty97.top/2021/09/10/Shader%E5%85%A5%E9%97%A8%E7%B2%BE%E8%A6%81%EF%BC%88%E4%BA%8C%EF%BC%89/",
            "title": "Shader入门精要（二）",
            "date_published": "2021-09-10T07:00:15.000Z",
            "content_html": "<blockquote>\n<p>因为第一章内容太少，就再更一章吧～</p>\n</blockquote>\n<h1 id=\"第二篇-渲染流水线\"><a class=\"markdownIt-Anchor\" href=\"#第二篇-渲染流水线\">#</a> 第二篇 渲染流水线</h1>\n<p>Q: 渲染流水线在干什么？</p>\n<p>A: 渲染流水线的最终目的在于生成或者说是渲染一张二维纹理，即我们在电脑屏幕上看到的所有效果。它的输入是一个虚拟摄像机、一些光源、一些 Shader 以及纹理等。</p>\n<p>使用流水线的好处在于可以提高单位时间的生产量。</p>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20210911215359.png\" alt=\"image-20210911215352715\"></p>\n<p>流水线系统中决定最后生产速度的是最慢的工序所需的时间 ( <code>短板效应</code> )</p>\n<p>理想情况下，如果把一个非流水线系统分成 n 个流水线阶段，且每个阶段耗费时间相同的话，会使整个系统得到 n 倍的速度提升。（多线渲染？）</p>\n<h2 id=\"渲染流程概念上的流水线\"><a class=\"markdownIt-Anchor\" href=\"#渲染流程概念上的流水线\">#</a> 渲染流程 (概念上的流水线)</h2>\n<blockquote>\n<p>渲染流程分成 3 个阶段：应用阶段（Application Stage）、几何阶段（Geometry Stage）、光栅化阶段（Rasterizer Stage）。</p>\n</blockquote>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20210911215704.png\" alt=\"image-20210911215704318\"></p>\n<h3 id=\"应用阶段\"><a class=\"markdownIt-Anchor\" href=\"#应用阶段\">#</a> 应用阶段</h3>\n<p>这个阶段 <code>是由我们的应用主导</code> 的，因此通常由 <code>CPU负责实现</code> 。主要包含三个任务：</p>\n<pre>Error: Evaluation failed: TypeError: Cannot read property 'initialize' of undefined\n    at __puppeteer_evaluation_script__:3:32</pre><h3 id=\"几何阶段\"><a class=\"markdownIt-Anchor\" href=\"#几何阶段\">#</a> 几何阶段</h3>\n<p>几何阶段用于处理所有和我们要绘制的几何相关的事情。例如，决定需要绘制的图元是什么，怎样绘制它们，在哪里绘制它们。这一阶段 <code>通常在GPU上</code> 进行。几何阶段负责和每个渲染图元打交道，进行逐顶点、逐多边形的操作。这个阶段 <code>可以进一步分成更小的流水线阶段</code> ，这在下一章中会讲到。几何阶段的一个重要任务就是 <code>把顶点坐标变换到屏幕空间中</code> ，再交给光栅器进行处理。通过对输入的渲染图元进行多步处理后，这一阶段将会输出屏幕空间的二维顶点坐标、每个顶点对应的深度值、着色等相关信息，并传递给下一个阶段。</p>\n<h3 id=\"光栅化阶段\"><a class=\"markdownIt-Anchor\" href=\"#光栅化阶段\">#</a> 光栅化阶段</h3>\n<p>这一阶段将会使用上个阶段传递的数据来产生屏幕上的像素，并 <code>渲染出最终的图像</code> 。 <code>这一阶段也是在GPU上运行</code> 。光栅化的任务主要是 <code>决定每个渲染图元中的哪些像素应该被绘制在屏幕上</code> 。它需要对上一个阶段得到的逐顶点数据（例如纹理坐标、顶点颜色等）进行插值，然后再进行逐像素处理。和上一个阶段类似，光栅化阶段也 <code>可以分成更小的流水线阶段</code> 。</p>\n<h2 id=\"cpu与gpu通信\"><a class=\"markdownIt-Anchor\" href=\"#cpu与gpu通信\">#</a> CPU 与 GPU 通信</h2>\n<blockquote>\n<p>真实的流水线🔨</p>\n</blockquote>\n<p>渲染流水线的起点是 CPU，即应用阶段。应用阶段大致可分为下面 3 个阶段：</p>\n<pre>Error: Evaluation failed: TypeError: Cannot read property 'initialize' of undefined\n    at __puppeteer_evaluation_script__:3:32</pre><h3 id=\"把数据加载到显存中\"><a class=\"markdownIt-Anchor\" href=\"#把数据加载到显存中\">#</a> 把数据加载到显存中</h3>\n<p>数据需要从硬盘到内存再到显存，显存读取速度快！加载之后就会丢弃，为了运算，某些数据不应该被丢弃，</p>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20210911221304.png\" alt=\"image-20210911221304571\"></p>\n<p>因为从硬盘加载到 RAM 的过程是十分耗时的，故我们要编写程序指导 CPU ，不要丢弃。</p>\n<blockquote>\n<p>9.14 继续更新啦😃</p>\n</blockquote>\n<h3 id=\"设置渲染状态\"><a class=\"markdownIt-Anchor\" href=\"#设置渲染状态\">#</a> 设置渲染状态</h3>\n<blockquote>\n<p>这些状态定义了场景中的网格是怎样被渲染的</p>\n</blockquote>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20210914131155.png\" alt=\"image-20210914131148894\"></p>\n<center>在同一状态下渲染3个网格。由于没有更改渲染状态，因此3个网格的外观看起来像是同一种材质的物体</center>\n<h3 id=\"调用draw-call\"><a class=\"markdownIt-Anchor\" href=\"#调用draw-call\">#</a> 调用 Draw Call</h3>\n<p>在设置好渲染状态后，就开始绘制了。 <code>由CPU发起，GPU接收</code> 。</p>\n<blockquote>\n<p>11.30 继续更新 😺</p>\n</blockquote>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20211130192907.png\" alt=\"image-20211130192900305\"></p>\n<h2 id=\"gpu流水线\"><a class=\"markdownIt-Anchor\" href=\"#gpu流水线\">#</a> GPU 流水线</h2>\n<blockquote>\n<p>当 GPU 收到渲染命令后，进行一系列流水线操作，将图元渲染到屏幕上</p>\n</blockquote>\n<p>GPU 主要实现 几何阶段和光栅化阶段。</p>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20211130193451.png\" alt=\"image-20211130193451213\"></p>\n<p>其中说明如下：</p>\n<ul>\n<li>完全可编程控制： 顶点着色器、曲面细分着色器、几何着色器、片元着色器</li>\n<li>可配置不可编程：逐片元、裁剪、</li>\n<li>不可控制：屏幕映射、三角形设置、三角形遍历</li>\n<li><code>实现为必须由开发者实现，虚线为可选</code></li>\n</ul>\n<h3 id=\"顶点着色器\"><a class=\"markdownIt-Anchor\" href=\"#顶点着色器\">#</a> 顶点着色器</h3>\n<p>完全可编程</p>\n<blockquote>\n<p>用于实现顶点的空间变换、顶点着色</p>\n</blockquote>\n<ol>\n<li>输入来自于 CPU</li>\n<li>处理单位为顶点</li>\n<li>不可以创建或销毁顶点、无法得到顶点之间的关系</li>\n<li>处理速度很快</li>\n<li>进行坐标变换和顶点光照</li>\n<li>还可以输出后续所需要的一些数据</li>\n</ol>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20211130214131.png\" alt=\"image-20211130214131052\"></p>\n<p>核心任务：** 顶点坐标从 <code>模型空间</code> 转换到 <code>齐次裁剪空间</code></p>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20211130214642.png\" alt=\"image-20211130214642514\"></p>\n<p>转换到齐次裁减空间后，硬件通过做透视触发得到 <code>NDC（设备坐标）</code> 下的坐标。</p>\n<blockquote>\n<p>NDC OpenGL (Unity) 范围在【-1,1】</p>\n</blockquote>\n<h3 id=\"曲面细分着色器\"><a class=\"markdownIt-Anchor\" href=\"#曲面细分着色器\">#</a> 曲面细分着色器</h3>\n<p>是一个可选的着色器，它用于细分图元</p>\n<h3 id=\"几何着色器\"><a class=\"markdownIt-Anchor\" href=\"#几何着色器\">#</a> 几何着色器</h3>\n<p>是一个可选的着色器，它可以被用于执行逐图元（Per-Primitive）的着色操作，或者被用于产生更多的图元</p>\n<h3 id=\"裁剪\"><a class=\"markdownIt-Anchor\" href=\"#裁剪\">#</a> 裁剪</h3>\n<p><strong>可配置但不可编程。</strong></p>\n<blockquote>\n<p>这一阶段的目的是将那些不在摄像机视野内的顶点裁剪掉，并剔除某些三角图元的面片</p>\n</blockquote>\n<p><code>用于完成裁剪掉只有部分在摄像机范围内出现的物体。</code></p>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20211130215204.png\" alt=\"image-20211130215204031\"></p>\n<p>经过裁剪，会在相交处生成新的点，同时原先的旧的点（在范围外）将被删除掉。</p>\n<h3 id=\"屏幕映射\"><a class=\"markdownIt-Anchor\" href=\"#屏幕映射\">#</a> 屏幕映射</h3>\n<p>输入三维坐标，二维屏幕坐标</p>\n<blockquote>\n<p>任务：把每个图元的 X 和 y 坐标转换到屏幕坐标系</p>\n</blockquote>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20211130215609.png\" alt=\"image-20211130215609144\"></p>\n<p>在 OpenGL 中，原点位于左下角，在 DirectX 中，原点在左上角</p>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20211130215806.png\" alt=\"image-20211130215806421\"></p>\n<h3 id=\"三角形遍历\"><a class=\"markdownIt-Anchor\" href=\"#三角形遍历\">#</a> 三角形遍历</h3>\n<blockquote>\n<p>检查每个像素是否被一个三角网格所覆盖。如果被覆盖就生成一个 ` 片元，输出片元序列。</p>\n</blockquote>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20211130220052.png\" alt=\"image-20211130220052140\"></p>\n<h3 id=\"片元着色器\"><a class=\"markdownIt-Anchor\" href=\"#片元着色器\">#</a> 片元着色器</h3>\n<p>计算出颜色</p>\n<blockquote>\n<p>经过前面的三角形步骤，获得了一系列的数据信息，用来表述一个三角形网格式怎样覆盖到每个像素的。</p>\n<p>输入为：顶点插值数据</p>\n<p>输出为：一个或多个颜色</p>\n</blockquote>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20211130220450.png\" alt=\"image-20211130220450027\"></p>\n<h3 id=\"逐片元\"><a class=\"markdownIt-Anchor\" href=\"#逐片元\">#</a> 逐片元</h3>\n<p>渲染流水线的最后一步❤️</p>\n<blockquote>\n<p>逐片元操作（Per-FragmentOperations）阶段负责执行很多重要的操作，例如 <code>修改颜色</code> 、 <code>深度缓冲</code> 、 <code>进行混合等</code></p>\n<p>用于合并数据。</p>\n</blockquote>\n<p>这一个阶段有如下任务：</p>\n<ol>\n<li>决定每个片元的可见性。这涉及了很多测试工作，例如深度测试、模板测试等。</li>\n<li>如果一个片元通过了所有的测试，就需要把这个片元的颜色值和已经存储在颜色缓冲区中的颜色进行合并，或者说是混合。</li>\n</ol>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20211130220813.png\" alt=\"image-20211130220813558\"></p>\n<p>需要通过所有的测试，才能和颜色缓冲区混合，最后写入颜色缓冲区</p>\n<blockquote>\n<p>这些测试用于筛选掉一些无用片元</p>\n</blockquote>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20211130221004.png\" alt=\"image-20211130221004246\"></p>\n<p>当片元通过了所有测试，就会进入混合阶段</p>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20211130221310.png\" alt=\"image-20211130221310360\"></p>\n<p>对于透明效果需要开启混合，对于不透明物体可以选择关闭混合效果</p>\n<blockquote>\n<p>出于性能考虑，很多 GPU 会先进行测试在进行片元着色器 —— Early-Z 技术</p>\n</blockquote>\n<p>为了避免我们看到正在光栅化的图元，GPU 使用 <code>双重缓冲</code> ，我们看到的是前置渲染结构，同时后置渲染也在工作，但后置渲染完成就会交换前后渲染的内容。</p>\n<h1 id=\"什么是shader\"><a class=\"markdownIt-Anchor\" href=\"#什么是shader\">#</a> 什么是 Shader?</h1>\n<ul>\n<li>GPU 流水线上一些可高度编程的阶段，而由着色器编译出来的最终代码是会在 GPU 上运行的（对于固定管线的渲染来说，着色器有时等同于一些特定的渲染设置）</li>\n<li>有一些特定类型的着色器，如顶点着色器、片元着色器等；</li>\n</ul>\n<blockquote>\n<p>第二章完！</p>\n</blockquote>\n",
            "tags": [
                "Shader",
                "读书笔记"
            ]
        },
        {
            "id": "https://www.fasty97.top/2021/09/10/Shader%E5%85%A5%E9%97%A8%E7%B2%BE%E8%A6%81%EF%BC%88%E4%B8%80%EF%BC%89/",
            "url": "https://www.fasty97.top/2021/09/10/Shader%E5%85%A5%E9%97%A8%E7%B2%BE%E8%A6%81%EF%BC%88%E4%B8%80%EF%BC%89/",
            "title": "Shader入门精要（一）",
            "date_published": "2021-09-10T06:57:37.000Z",
            "content_html": "<h2 id=\"致自己\"><a class=\"markdownIt-Anchor\" href=\"#致自己\">#</a> 致自己</h2>\n<blockquote>\n<p>之前我学习过一段时间的 Shader 入门精要（大概是学到第六章吧），但后面的章节都没有学习，加上时间久远很多内容都忘记了，故打算重新学一遍。</p>\n<p>为了勉励自己坚持下去，也为了记录一些学习过程，此系列就出现啦！</p>\n<p>❤️ ❤️</p>\n<p>(希望自己能够坚持学完，在渲染方面有所收获，可以制作出满意的效果)</p>\n<p>📑 此系列每周一更</p>\n</blockquote>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20210910151044.png\" alt=\"image-20210910151043222\"></p>\n<h1 id=\"第一篇-欢迎来到shader的世界\"><a class=\"markdownIt-Anchor\" href=\"#第一篇-欢迎来到shader的世界\">#</a> 第一篇 欢迎来到 Shader 的世界</h1>\n<h2 id=\"语录\"><a class=\"markdownIt-Anchor\" href=\"#语录\">#</a> 语录</h2>\n<ul>\n<li>\n<p>程序员的三大浪漫是编译原理、操作系统和图形学（是的，我已经听到很多人在反驳这句话了，不要当真啦）</p>\n</li>\n<li>\n<p>我们是程序员中的 “外貌协会”，期待着用代码编写出一个绚丽多姿的世界。这就是我们的浪漫。</p>\n</li>\n<li>\n<p>我们之所以要学习 Shader，是想要学习如何把物体按照自己的意愿渲染到屏幕上，但是，Shader 只是整个渲染流程中的一个子部分。</p>\n</li>\n<li>\n<p>和 C++ 这样的高级语言不同，尽管 Shader 的编写语言已经达到了我们可以理解的程度，但 Shader 更多地是面向 GPU 的工作方式，所以它的一些语法对我们来说并不那么直观。</p>\n</li>\n</ul>\n<h2 id=\"基础篇大纲1-4章\"><a class=\"markdownIt-Anchor\" href=\"#基础篇大纲1-4章\">#</a> 基础篇大纲 1-4 章</h2>\n<ol>\n<li><code>第2章 渲染流水线</code>  这一章讲解了现代 GPU 是如何实现整个渲染流水线的，这些内容对于理解 Shader 的工作原理有着非常重要的作用。</li>\n<li><code>第3章Unity Shader基础</code>  Unity 在原有的渲染流程上进行了封装，并提供给开发者新的图像编程接口 ——Unity Shader。这一章将讲解 Unity Shader 的实现原理和基本语法</li>\n<li><code>第4章 学习Shader所需的数学基础</code>  数学向来是初学者面对的一大学习障碍。然而，在初级阶段的渲染学习中，我们需要掌握的数学理论实际并不复杂。本章将为读者讲解渲染过程中常见的数学知识，如矢量、矩阵运算、坐标空间等。</li>\n</ol>\n<h2 id=\"自我理解\"><a class=\"markdownIt-Anchor\" href=\"#自我理解\">#</a> 自我理解</h2>\n<p>本章主要讲述了本书的结构的内容大纲，引出了 shader 学习的问题。</p>\n<p>尽管是第二次读，依然觉得有趣～</p>\n",
            "tags": [
                "Shader",
                "读书笔记"
            ]
        },
        {
            "id": "https://www.fasty97.top/2021/02/22/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/",
            "url": "https://www.fasty97.top/2021/02/22/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/",
            "title": "原型模式",
            "date_published": "2021-02-22T04:47:13.000Z",
            "content_html": "<blockquote>\n<p>原型模式：使用特定原型实例来创建特定种类的对象，并且通过拷贝原型来创建新的对象。</p>\n</blockquote>\n<h3 id=\"写在前面\"><a class=\"markdownIt-Anchor\" href=\"#写在前面\">#</a> 写在前面</h3>\n<p>假如在游戏中我们需要生成各种各样的怪物，我们需要一个孵化器，我们想到为每个怪物类型确定一个孵化器，如下图所示：</p>\n<pre>Error: Evaluation failed: TypeError: Cannot read property 'initialize' of undefined\n    at __puppeteer_evaluation_script__:3:32</pre><p>✔️ 不难想到，我们可以抽象出怪物的基类对上面的结构进行优化。</p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">/// 怪物基类</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Monster</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> Hp <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">float</span></span> Speed <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token return-type class-name\">Monster</span> <span class=\"token function\">Clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"Hp:</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token expression language-csharp\">Hp</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> Speed:</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token expression language-csharp\">Speed</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> \t<span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">/// 幽灵类</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Ghost</span><span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Monster</span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">Monster</span> <span class=\"token function\">Clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Ghost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>Hp<span class=\"token operator\">=</span><span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span>Hp<span class=\"token punctuation\">,</span>Speed <span class=\"token operator\">=</span> <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span>Speed<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">/// 孵化器</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Spawner</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\">Monster</span> _monster<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token function\">Spawner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Monster</span> monster<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            _monster <span class=\"token operator\">=</span> monster<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Monster</span> <span class=\"token function\">SpawnerMonster</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token keyword\">return</span> _monster<span class=\"token punctuation\">.</span><span class=\"token function\">Clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"><span>调用</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> gh <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Ghost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>Hp <span class=\"token operator\">=</span> <span class=\"token number\">45</span><span class=\"token punctuation\">,</span> Speed <span class=\"token operator\">=</span> <span class=\"token number\">3.3f</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> spa <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Spawner</span><span class=\"token punctuation\">(</span>gh<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> en<span class=\"token operator\">=</span> spa<span class=\"token punctuation\">.</span><span class=\"token function\">SpawnerMonster</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>en<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"结论\"><a class=\"markdownIt-Anchor\" href=\"#结论\">#</a> 结论</h3>\n<blockquote>\n<p>关于这个模式，有一点比较优雅的是，它不仅克隆原型类，而且它也克隆了对象的状态。</p>\n</blockquote>\n<p>基于这样的 <code>模板(原型)</code> ，我们可以创建出类似的一系列对象。</p>\n<p>📘 Ps: 有兴趣的话可以去看看 <code>Self语言</code> 相信你会对原型，oop 有新的认识 —— 类并不是实现 oop 的唯一方法。</p>\n<p>📖OOP 的特征是它将状态和行为结合得更紧密。</p>\n<h3 id=\"扩展\"><a class=\"markdownIt-Anchor\" href=\"#扩展\">#</a> 扩展</h3>\n<p>正是 self 基于原型的设计理念，诞生了现在大受欢迎的 <code>javascript</code> ；</p>\n<p>正是 self 不断强化编译技术，虚拟机效率，现在的动态语言才能高效执行。</p>\n",
            "tags": [
                "读书笔记",
                "设计模式"
            ]
        },
        {
            "id": "https://www.fasty97.top/2021/02/22/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/",
            "url": "https://www.fasty97.top/2021/02/22/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/",
            "title": "观察者模式",
            "date_published": "2021-02-22T01:35:56.000Z",
            "content_html": "<blockquote>\n<p>观察者模式（Observer）：在对象间定义一种 <code>一对多</code> 的依赖关系，以便当某对象的状态改变时，与它存在依赖关系的所有对象都能收到通知并自动进行更新。</p>\n</blockquote>\n<ul>\n<li>MVC 模式的底层可以说就是利用了观察者模式</li>\n</ul>\n<h2 id=\"基础设计\"><a class=\"markdownIt-Anchor\" href=\"#基础设计\">#</a> 基础设计</h2>\n<blockquote>\n<p>我们可以使用如下的方式设计一个简单的观察者模式，在被观察者中需要存储一个观察者组，提供一个发送消息的方法对观察组进行消息推送。</p>\n<p>在观察者中提供一个消息响应的方法，响应消息。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"><span>事件</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">/// 事件</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Event</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        捡到金币<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        通关</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"><span>接口</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">/// 观察者接口</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IObserver</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">/// 接收通知</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">/// &lt;param name=\"subject\">&lt;/param></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">/// &lt;param name=\"eventMsg\">&lt;/param></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnNotify</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Subject</span> subject<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Event</span> eventMsg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">/// 被观察者接口</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ISubject</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token return-type class-name\">List<span class=\"token punctuation\">&lt;</span>IObserver<span class=\"token punctuation\">></span></span> <span class=\"token function\">Observers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">AddObserver</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IObserver</span> observer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">RemoveObserver</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IObserver</span> observer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"><span>实体对象</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">/// 观察者</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Observer</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IObserver</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnNotify</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Subject</span> subject<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Event</span> eventMsg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>eventMsg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token keyword\">case</span> Event<span class=\"token punctuation\">.</span>捡到金币<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                    subject<span class=\"token punctuation\">.</span>Score <span class=\"token operator\">+=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token keyword\">case</span> Event<span class=\"token punctuation\">.</span>通关<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                    subject<span class=\"token punctuation\">.</span>Score <span class=\"token operator\">+=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">/// 被观察者</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Subject</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ISubject</span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> Score<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span>IObserver<span class=\"token punctuation\">></span></span> _observers<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">/// 发送消息</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">/// &lt;param name=\"eventMsg\">&lt;/param></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Notify</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Event</span> eventMsg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            _observers<span class=\"token punctuation\">.</span><span class=\"token function\">ForEach</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">=></span>x<span class=\"token punctuation\">.</span><span class=\"token function\">OnNotify</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>eventMsg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token function\">Subject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            _observers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>IObserver<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">List<span class=\"token punctuation\">&lt;</span>IObserver<span class=\"token punctuation\">></span></span> <span class=\"token function\">Observers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token keyword\">return</span> _observers<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">AddObserver</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IObserver</span> observer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            _observers<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>observer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">RemoveObserver</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IObserver</span> observer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            _observers<span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span>observer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"使用委托和事件\"><a class=\"markdownIt-Anchor\" href=\"#使用委托和事件\">#</a> 使用委托和事件</h2>\n<p>在 Csharp 中内置了委托和事件来处理这种一对多的响应方式。</p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"><span>c#内置了委托和事件</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">ObserverPattern</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/// 观察者模式</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">internal</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>Name <span class=\"token operator\">=</span> <span class=\"token string\">\"小白\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> m <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Mouse</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>Name <span class=\"token operator\">=</span> <span class=\"token string\">\"小鼠\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            c<span class=\"token punctuation\">.</span><span class=\"token function\">OnCatCom</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Name <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">event</span> <span class=\"token class-name\">Action</span> catCom<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">virtual</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnCatCom</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&#123;0&#125;来了\"</span><span class=\"token punctuation\">,</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            catCom<span class=\"token punctuation\">?.</span><span class=\"token function\">Invoke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Mouse</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Name <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token function\">Mouse</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Cat</span> cat<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token comment\">// 将事件绑定到方法</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            cat<span class=\"token punctuation\">.</span>catCom <span class=\"token operator\">+=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>MouseRun<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">MouseRun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&#123;0&#125;快跑!!\"</span><span class=\"token punctuation\">,</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>        </pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"思考\"><a class=\"markdownIt-Anchor\" href=\"#思考\">#</a> 思考</h2>\n<p>其实观察者模式就是对象的一种 <code>间接同步调用</code> ，使用这种方法是为了解除耦合，达到统一分配管理的作用。</p>\n<p>从上文提到的可以知道，这种模式是同步的，也就是说当存在一组观察者时，那么可能会导致 <code>阻塞</code> ，但在实际中可能没这么严重，但在使用中我们还需注意。</p>\n<blockquote>\n<p>如果你在每次响应后给出一个状态，表示通知的响应情况，那么这就接近  <code>责任链模式</code> 了。</p>\n</blockquote>\n<h2 id=\"销毁对象\"><a class=\"markdownIt-Anchor\" href=\"#销毁对象\">#</a> 销毁对象？</h2>\n<p>在书中提到一个问题很有趣，在观察者模式中销毁对象该怎么办呢？</p>\n<p>在销毁对象前，需要解除监听，确保对象被正确销毁。</p>\n<h2 id=\"现状\"><a class=\"markdownIt-Anchor\" href=\"#现状\">#</a> 现状</h2>\n<blockquote>\n<p>观察者模式出现于 1994 年（比我还大😄), 因此基本都是基于类来实现的，但现在更流行 <code>函数式编程</code> ，可能不太符合现在的编程美学。例如 C# 的 event 就是现代化的观察者模式。</p>\n</blockquote>\n",
            "tags": [
                "读书笔记",
                "设计模式"
            ]
        },
        {
            "id": "https://www.fasty97.top/2020/12/29/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/",
            "url": "https://www.fasty97.top/2020/12/29/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/",
            "title": "享元模式",
            "date_published": "2020-12-29T09:17:22.000Z",
            "content_html": "<blockquote>\n<p>享元模式 (FlyweightPattern)：使用共享以高效地支持大量的细粒度对象。</p>\n</blockquote>\n<p>FlyweightPattern 的目的是  <code>提高效率，节省内存空间</code> 。</p>\n",
            "tags": [
                "读书笔记",
                "设计模式"
            ]
        },
        {
            "id": "https://www.fasty97.top/2020/07/04/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/",
            "url": "https://www.fasty97.top/2020/07/04/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/",
            "title": "命令模式",
            "date_published": "2020-07-04T08:36:31.000Z",
            "content_html": "<blockquote>\n<p>游戏编程模式算是一本比较著名的书了，全书针对游戏编程中的问题介绍了多种设计模式。学习设计模式可以加强我们的程序架构能力，写出更加强大和优雅的程序。</p>\n</blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly90cnkuZG90Lm5ldC8=\">在线 C#</span></p>\n<h3 id=\"写在前面\"><a class=\"markdownIt-Anchor\" href=\"#写在前面\">#</a> 写在前面</h3>\n<p>其实针对 <code>设计模式</code> ，之前我就学习过《大话设计模式》自己也随书将二十多种设计模式实现了一遍；但我在学习游戏开发的过程中发现，标准的设计模式并非对游戏编程支持良好，故而有了专门看一看游戏设计模式的打算，加上寒假学习 cpp，让我有了拿起这本书的想法。<br>\n此文仅为学习记录，欢迎指正。</p>\n<p><code>设计模式并不是刻意为之的东西，是前辈经验的总结，也许你在不知不觉中就已经使用了某种设计模式。</code></p>\n<h3 id=\"命令模式\"><a class=\"markdownIt-Anchor\" href=\"#命令模式\">#</a> 命令模式</h3>\n<blockquote>\n<p>将一个请求封装成一个对象，从而允许你使用不同的请求、队列和日志将将客户端参数化，支持请求的撤销与恢复。</p>\n</blockquote>\n<p>从上述的描述中我们可以找到几个关键点： <code>请求队列</code> ， <code>日志</code> ， <code>撤销与恢复</code> 。<br>\n如果你需要这些特性，此事不妨试试命令模式吧。</p>\n<h4 id=\"适用场景\"><a class=\"markdownIt-Anchor\" href=\"#适用场景\">#</a> 适用场景</h4>\n<ol>\n<li>试想一下，我们在游戏中需要监听用户的输入，以让我们控制的角色响应玩家发布的 <code>命令</code> ，这个命令可能是移动，攻击，也可能是打开菜单，退出游戏。在需要复杂的输入检测时，你可能需要将玩家输入进行组合，如在恰当的时机按下某几个键位就可以使用特殊技能。</li>\n<li>在网络游戏中，我们操控我们的角色需要在所有连接的客户端中同步，其中有一种同步方式称为 <code>状态同步</code> ，及玩家操作角色时，客户端会向所有服务器执行相同的命令，以同步角色的状态信息。这样的情况，多少也使用了命令模式在里面。</li>\n<li>如果你需要撤销和重做，如一款回合制策略游戏，你可能需要撤销之前的动作，让玩家更专注于策略本身。</li>\n</ol>\n<h3 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\">#</a> 代码</h3>\n<p>根据上述描述，我们可以建立一个最基础的命令模式模板。</p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Linq</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> pl<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Player</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>pl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> moveC<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">MoveCommand</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>pl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    moveC<span class=\"token punctuation\">.</span><span class=\"token function\">Excute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>pl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    moveC<span class=\"token punctuation\">.</span><span class=\"token function\">Undo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>pl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Player</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token function\">Player</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> x<span class=\"token punctuation\">,</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x<span class=\"token operator\">=</span>x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y<span class=\"token operator\">=</span>y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"玩家pos:[</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token expression language-csharp\">x</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">,</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token expression language-csharp\">y</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">]\"</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Command</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Excute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Undo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MoveCommand</span><span class=\"token punctuation\">:</span><span class=\"token type-list\"><span class=\"token class-name\">Command</span></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Player</span> player<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token function\">MoveCommand</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> x<span class=\"token punctuation\">,</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> y<span class=\"token punctuation\">,</span><span class=\"token class-name\">Player</span> pl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x<span class=\"token operator\">=</span>x<span class=\"token punctuation\">;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y<span class=\"token operator\">=</span>y<span class=\"token punctuation\">;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>player<span class=\"token operator\">=</span>pl<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Excute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Move Excute!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Move To &#123;0&#125;,&#123;1&#125;\"</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    player<span class=\"token punctuation\">.</span>x<span class=\"token operator\">+=</span>x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    player<span class=\"token punctuation\">.</span>y<span class=\"token operator\">+=</span>y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Undo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Move Undo!!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    player<span class=\"token punctuation\">.</span>x<span class=\"token operator\">-=</span>x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    player<span class=\"token punctuation\">.</span>y<span class=\"token operator\">-=</span>y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如上所示就是一个命令模式的基本使用，在某些情况下我们应该将所有操作用命令管理，尽管这样比较麻烦，但一旦建立起一个统一的管理模式后，你会发现一切都是值得的。</p>\n<h3 id=\"存在的问题\"><a class=\"markdownIt-Anchor\" href=\"#存在的问题\">#</a> 存在的问题</h3>\n<p>仔细观察你会发现，我们每次我们使用一个命令都会创建一个命令对象，如果我们频繁的使用命令我们就会不断的创建对象，而这些对象其实我们只使用了一次。怎么解决这个问题呢？下一章的 <code>享元模式</code> 让我们一起来解决吧。</p>\n",
            "tags": [
                "读书笔记",
                "设计模式"
            ]
        },
        {
            "id": "https://www.fasty97.top/2020/01/17/%E3%80%8AUnity3D%E7%BD%91%E7%BB%9C%E6%B8%B8%E6%88%8F%E5%AE%9E%E6%88%98%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%EF%BC%88%E5%9B%9B%EF%BC%89Poll&Select/",
            "url": "https://www.fasty97.top/2020/01/17/%E3%80%8AUnity3D%E7%BD%91%E7%BB%9C%E6%B8%B8%E6%88%8F%E5%AE%9E%E6%88%98%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%EF%BC%88%E5%9B%9B%EF%BC%89Poll&Select/",
            "title": "《Unity3D网络游戏实战》学习记录（四）Poll&Select",
            "date_published": "2020-01-17T06:09:32.000Z",
            "content_html": "<blockquote>\n  试想一下，有没有一种方法可以将<font color=red>异步</font>的程序改为<font color=blue>同步</font>，而又持有异步的效果呢？\n</blockquote>\n<h3>Poll</h3>\n<p><font color=4e72b8>意义：使用同步的方式解决异步问题。</font><br>\n我们分析一下之前的程序逻辑，会发现我们使用 beginxxx 来开启新线程处理新的 socket，但是我们的客户端并不是实时的于服务器进行交互的（只在进行交互时，整个线程才是有效的，平时都处于阻塞等待状态。）<br>\n有这么一种方式：<br>\n<code>if (socket 有可读数据) socket.Receive ()</code><br>\n<code>if (socket 缓冲区可写) socket.Send ()</code><br>\n<code>if (socket 错误) 处理错误</code><br>\n只要在阻塞方法前，加上一层判断，有数据可读才读，有数据可写才写，这样不就解决了程序卡住的问题吗？<br>\nMs 提供了 Poll 方法：</p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> Poll</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> microSeconds；<span class=\"token comment\">// 回应时间（ms） -1 一直等待  0 非阻塞</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    SelectMode mode；<span class=\"token comment\">//SelectRead 是否可读 SelectWrite 是否可写 SelectError 是否发生错误</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4>使用Poll改进客户端和服务器</h4>\n<ul>\n<li><font size=5px color=red>客户端</font>\n对于客户端只需要在update中加一个<code>if(socket.Poll(0,SelectMode.SelectRead)) 执行读取</code>就可以了。</li>\n<li><font size=5px color=green>服务器</font>\n对于服务器，需要在主循环中对所有已连接的客户端进行状态监测，在其客户端可读时（即有数据发送给服务器时）进行读取操作。</li>\n</ul>\n<h3>Select</h3>\n<p><font color=4e72b8>意义：解决 Poll 下 Cpu 占用过高的问题</font></p>\n在前面没有提到cpu占用的事情，这里说一下，使用poll时，我们会在update中持续监听，程序在同一线程中非阻塞式的处理请求，会导致cpu占用过高的问题。\n<h4>Select的解决思路</h4>\n<ol>\n<li>同时检测多个socket的状态</li>\n<li>将需操作的socket放入一个集合中</li>\n<li>如果没有可读写的socket就阻塞挂起</li>\n</ol>\n<p><strong>select 原型</strong></p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Select</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">IList</span> checkRead<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 返回可读 Socket List</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">IList</span> checkWrite<span class=\"token punctuation\">,</span>   <span class=\"token comment\">// 可写</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">IList</span> checkError<span class=\"token punctuation\">,</span>   <span class=\"token comment\">// 错误</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> microSeconds    <span class=\"token comment\">// 超时时间</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><font color=blue>【2020 年 1 月 17 日 18:40:19 下午】</font><br>\n<strong>继续更新</strong></p>\n<p>使用 Select 时，我们需要定义几个列表，如上面原型所示这些列表应当实现了<font size=4px color=red> IList </font>接口。</p>\n<ol>\n<li>创建可读列表CheckRead</li>\n<li>将所有连接Socket放入CheckRead中</li>\n<li>使用Socket.Select()对checkRead中的可读socket进行筛选</li>\n<li>对筛选后的可读对象进行读取</li>\n</ol>\n<p>通过以上步骤，我们就使用 Select 完成了筛选，非常简单吧！</p>\n<p>从下一章开始按书的进度，我们就使用学习到的 Socket 知识写一个多人大乱斗游戏试试吧 ✌️ ~</p>\n",
            "tags": [
                "读书笔记"
            ]
        },
        {
            "id": "https://www.fasty97.top/2020/01/07/%E3%80%8AUnity3D%E7%BD%91%E7%BB%9C%E6%B8%B8%E6%88%8F%E5%AE%9E%E6%88%98%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%EF%BC%88%E4%BA%8C%EF%BC%89%E5%A4%9A%E7%BA%BF%E7%A8%8B/",
            "url": "https://www.fasty97.top/2020/01/07/%E3%80%8AUnity3D%E7%BD%91%E7%BB%9C%E6%B8%B8%E6%88%8F%E5%AE%9E%E6%88%98%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%EF%BC%88%E4%BA%8C%EF%BC%89%E5%A4%9A%E7%BA%BF%E7%A8%8B/",
            "title": "《Unity3D网络游戏实战》学习记录（二）多线程",
            "date_published": "2020-01-07T06:00:35.000Z",
            "content_html": "<p><font color=green>[begin] 在 [/begin]</font>第一章的学习内容中我们已经完成了基本的 Socket 通信，但是在第一章中我们只能处理一个客户端的消息。<br>\n在实际游戏中，我们服务器需要对多个客户端进行监听和处理。</p>\n<h3>Begin XXX</h3>\n<p>每一个同步 API 对应着两个异步 API，分别是在原名称前面加上 Begin 和 End（如 BeginConnect 和 EndConnect）。使用异步程序可以防止程序卡住  。</p>\n<h4>例如：BenginConnect</h4>\n<table>\n<thead>\n<tr>\n  <th>参数</th>\n  <th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td>host</td>\n  <td>远程主机ip地址</td>\n</tr>\n<tr>\n  <td>port</td>\n  <td>端口号</td>\n</tr>\n<tr>\n  <td>requestCallback</td>\n  <td>异步回调函数，其函数必须包含一个实现 <font color=red><strong>IAsynResult</strong></font>的对象</td>\n</tr>\n<tr>\n  <td>state</td>\n  <td>一个自定义对象，<strong>此对象会被传递给回调函数</strong></td>\n</tr>\n</tbody>\n</table>\n<p><strong>EndConnect</strong></p>\n<table>\n<thead>\n<tr>\n  <th>参数</th>\n  <th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td>asyncResult</td>\n  <td>接收一个异步结果对象</td>\n</tr>\n</tbody>\n</table>\n<p><font color=red>其他的都大致相同</font><br>\n[toc]</p>\n<h3>客户端</h3>\n<p>客户端使用 begin 和 end，修改为：</p>\n<pre><code class=\"language-csharp line-numbers\">using System;\nusing System.Net.Sockets;\nusing System.Text;\nusing System.Threading;\nusing UnityEngine;\nusing UnityEngine.UI;\npublic class Echo : MonoBehaviour\n&#123;\n    public Button linkBtn;\n    public Button sendBtn;\n    public InputField inputField;\n    public Text infoText;\n    //套接字\n    private Socket _socket;\n    //接收缓冲区\n    private byte[] _readBuff=new byte[1024];\n    private string _recvStr=string.Empty;\n\n\n\n    private void Start()\n    &#123;\n        linkBtn.onClick.AddListener(Connection);\n        sendBtn.onClick.AddListener(SendMessage);\n        //Timer线程计时器\n        var timer = new Timer((state) => &#123; print(\"时间到\"); &#125;,null,5000,0);\n    &#125;\n    \n    private void Update()\n    &#123;\n        infoText.text = \"接收到来自服务器的数据：\"+_recvStr;\n    &#125;\n    \n    /// <summary>\n    /// 连接\n    /// </summary>\n    void Connection()\n    &#123;\n        _socket=new Socket(SocketType.Stream,ProtocolType.Tcp);\n        //异步进行连接\n        _socket.BeginConnect(\"127.0.0.1\", 8888, ConnectCallback, _socket);\n        Debug.Log(\"开始连接...\");\n        // _socket.Connect(\"127.0.0.1\",8888);\n    &#125;\n    /// <summary>\n    /// 连接回调\n    /// </summary>\n    /// <param name=\"ar\"></param>\n    void ConnectCallback(IAsyncResult ar)\n    &#123;\n        try\n        &#123;\n            var socket = ar.AsyncState as Socket;\n            socket?.EndConnect(ar);    //连接完毕\n            Debug.Log(\"连接成功！\");\n            //开始监听服务器端回复\n            socket?.BeginReceive(_readBuff, 0, _readBuff.Length, 0, ReceiveCallback, socket);\n        &#125;\n        catch (SocketException e)\n        &#123;\n            Debug.Log(\"Socket连接错误:\"+e);\n            throw;\n        &#125;\n    &#125;\n\n\n    /// <summary>\n    /// 接收回调\n    /// </summary>\n    /// <param name=\"ar\"></param>\n    void ReceiveCallback(IAsyncResult ar)\n    &#123;\n        //ps：作者在这里提到，假如在send缓冲区的数据量太多，并且删除服务端receive相关的内容，使这些数据不能得到及时的释放，这时候客户端就会卡住。\n        //所以我们也需要对send进行异步处理，防止堵塞。\n        try\n        &#123;\n            var socket = ar.AsyncState as Socket;\n            var count = socket.EndReceive(ar);\n            //注意在unity中，UI对象只能在主线程中更新，由于异步回调是由其他线程更新的，所以我只在这儿对_recvStr进行记录\n            //并在主线程update中对UI对象进行更新。\n            _recvStr = Encoding.UTF8.GetString(_readBuff, 0, count);\n    \n            socket.BeginReceive(_readBuff, 0, _readBuff.Length, 0, ReceiveCallback, socket);\n        &#125;\n        catch (SocketException e)\n        &#123;\n            Debug.Log(\"Socket错误：\"+e);\n        &#125;\n    &#125;\n    \n    /// <summary>\n    /// 发送消息\n    /// </summary>\n    void SendMessage()\n    &#123;\n        var sendStr = inputField.text;\n        var sendBytes = System.Text.Encoding.UTF8.GetBytes(sendStr);\n        // _socket.Send(sendBytes);\n        /*\n         * 值得注意的是，send方法的过程只是将数据写入到缓冲区，由操作系统进行重传和确认。\n         * send成功只表示，数据成功吸入缓冲区，并不代表对方已经收到数据。\n         */\n        _socket.BeginSend(sendBytes, 0, sendBytes.Length, 0, SendCallback, _socket);\n    \n    &#125;\n    \n    /// <summary>\n    /// Send回调\n    /// </summary>\n    /// <param name=\"ar\"></param>\n    void SendCallback(IAsyncResult ar)\n    &#123;\n        try\n        &#123;\n            var socket = ar.AsyncState as Socket;\n            var count = socket?.EndSend(ar);\n            /*\n             * 在这里作者提到，一般来说收发的数据长度应当保持一致，但是当我们的数据大小超过缓冲区的大小时，我们需要再次调用相关的send或reivce方法\n             * 发送或接收剩余的数据。（在后面的章节再介绍）\n             */\n            Debug.Log(\"socket 发送成功 发送字节数：\"+count);\n        &#125;\n        catch (SocketException e)\n        &#123;\n           Debug.Log(\"Socket Send 错误：\"+e);\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<h3>服务器</h3>\n<p>在上一章中，我们的服务器使用单线程的阻塞，也就是说每次只能处理一个客户端的请求，现在我们也将服务器改为多线程模式，让他可以同时处理多个线程。（多个客户端请求）<br>\n其代码实现如下：</p>\n<h4>创建一个clientState类存储客户端状态</h4>\n<pre><code class=\"language-csharp line-numbers\">using System.Net.Sockets;\n\nnamespace netWork_Server\n&#123;\n    /// <summary>\n    /// 连接状态\n    /// </summary>\n    public class ClientState\n    &#123;\n        public Socket Socket &#123; get; set; &#125;\n        public byte[] ReadBuff &#123; get; set; &#125;\n\n        public ClientState()\n        &#123;\n            ReadBuff=new byte[1024];\n        &#125;\n    &#125;\n&#125;\n\n</code></pre>\n<h4>主代码</h4>\n<pre><code class=\"language-csharp line-numbers\">using System;\nusing System.Collections.Generic;\nusing System.Net;\nusing System.Net.Sockets;\nusing System.Text;\n\nnamespace netWork_Server\n&#123;\n\n\n    internal class Program\n    &#123;\n        private static Socket socket;\n        static  Dictionary<Socket,ClientState> _clientStates=new Dictionary<Socket, ClientState>();\n    \n        public static void Main(string[] args)\n        &#123;\n\n\n            Console.WriteLine(\"Hi\");\n    \n            socket=new Socket(AddressFamily.InterNetwork,SocketType.Stream,ProtocolType.Tcp);\n            IPAddress ipAddress = IPAddress.Parse(\"127.0.0.1\");\n            IPEndPoint ipEndPoint=new IPEndPoint(ipAddress,8888);\n            socket.Bind(ipEndPoint);\n            //listen\n            socket.Listen(0);\n            Console.WriteLine(\"[服务器] 启动成功\");\n            //Accept\n            //当客户端连接上服务器时，调用AcceptCallback\n            socket.BeginAccept(AcceptCallback,socket);\n            Console.ReadLine();\n        &#125;\n    \n        /// <summary>\n        /// Accept回调\n        /// </summary>\n        /// <param name=\"ar\"></param>\n        private static void AcceptCallback(IAsyncResult ar)\n        &#123;\n            try\n            &#123;\n                Console.WriteLine(\"[服务器] 连接到新客户端\");\n                Socket listenfd=ar.AsyncState as Socket;\n                Socket clientfd = listenfd.EndAccept(ar);\n                ClientState state=new ClientState();\n                state.Socket = clientfd;\n                _clientStates.Add(clientfd,state);\n                //进行Receive\n                clientfd.BeginReceive(state.ReadBuff, 0, 1024, 0,ReceiveCallback, state);\n                //继续Accept\n                listenfd.BeginAccept(AcceptCallback, listenfd);\n            &#125;\n            catch (SocketException e)\n            &#123;\n                Console.WriteLine(\"Socket Accept错误：\"+e);\n                throw;\n            &#125;\n    \n        &#125;\n    \n        /// <summary>\n        /// Receive回调\n        /// </summary>\n        /// <param name=\"ar\"></param>\n        static void ReceiveCallback(IAsyncResult ar)\n        &#123;\n            try\n            &#123;\n                var state = ar.AsyncState as ClientState;\n                var clientfd = state.Socket;\n                int count = clientfd.EndReceive(ar);\n                //关闭客户端\n                if (count==0)\n                &#123;\n                    clientfd.Close();\n                    _clientStates.Remove(clientfd);\n                    Console.WriteLine(\"Socket Close!\");\n                    return;\n                &#125;\n    \n                string recvStr = Encoding.UTF8.GetString(state.ReadBuff,0,count);\n                Console.WriteLine(\"[客户端]\"+recvStr);\n                byte[] sendBytes = Encoding.UTF8.GetBytes(\"echo\" + recvStr);\n    \n                clientfd.Send(sendBytes);\n                //继续获取数据\n                clientfd.BeginReceive(state.ReadBuff, 0, 1024, 0, ReceiveCallback, state);\n    \n            &#125;\n            catch (SocketException e)\n            &#123;\n                Console.WriteLine(\"Socket Receive 错误：\"+e);\n            &#125;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<h3>进行会话</h3>\n<p>我们将客户端生成一份，让生成的客户端和编辑器客户端同时与服务器连接并进行会话操作。<br>\n其效果如图所示：<br>\n!{服务器端}(<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjAvMDEvMTQva1ZyUUlXcGVqWEJSbWFuLnBuZw==\">https://i.loli.net/2020/01/14/kVrQIWpejXBRman.png</span>)<br>\n!{客户端}(<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjAvMDEvMTQvSmRiYVJMcHQ1azFob2dzLnBuZw==\">https://i.loli.net/2020/01/14/JdbaRLpt5k1hogs.png</span>)</p>\n<h3>结语</h3>\n<p>这是这一章的前半部分，完成了在 socket 下的多线程模式，其中在字符编码部分，原书使用了 Default，这导致可能没法解析中文字符，所以我将其改为了固定的 UTF8 做解析。<br>\n感谢您读完这篇文章，在本章的下半部分将实现一个聊天室。</p>\n",
            "tags": [
                "读书笔记"
            ]
        },
        {
            "id": "https://www.fasty97.top/2020/01/06/%E3%80%8AUnity3D%E7%BD%91%E7%BB%9C%E6%B8%B8%E6%88%8F%E5%AE%9E%E6%88%98%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%80%EF%BC%89Echo/",
            "url": "https://www.fasty97.top/2020/01/06/%E3%80%8AUnity3D%E7%BD%91%E7%BB%9C%E6%B8%B8%E6%88%8F%E5%AE%9E%E6%88%98%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%80%EF%BC%89Echo/",
            "title": "《Unity3D网络游戏实战》学习记录（一）Echo",
            "date_published": "2020-01-06T14:51:34.000Z",
            "content_html": "<h3>序</h3>\n<p>这本书买了蛮久的，趁着寒假的时间拿出来学习一下，争取这个假期把这本书看完，把里面的实例代码都自己敲一遍，加深理解。<br>\n这是一个长期更新的系列：全书共<font color=red>十二章</font>就算是每个章节写一篇文章也至少要写十二篇文章，希望自己可以坚持着书看完，把博客写完。</p>\n<h3>Socket连接步骤</h3>\n<p><strong>示例图</strong></p>\n<pre><code>type=&quot;text/javascript&quot;&gt;document.write(&quot;graph TD;\\n    Client--&gt;|连接服务器|Connect;\\n    Connect--&gt;|发送消息|Send;\\n    Connect--&gt;|三次握手|Accept;\\n    Send--&gt;|接收服务器消息|Receive;\\n    Send--&gt;|向服务器发送数据|ServerReceive;\\n    Receive--&gt;|断开连接|Close;\\n    Close--&gt;|四次挥手|ServerClose;\\n    Server--&gt;|绑定Ip和端口|Bind;\\n    Bind--&gt;|开启监听|Listen;\\n    Listen--&gt;|接收客户端连接请求|Accept;\\n    Accept--&gt;|接收客户端数据|ServerReceive;\\n    ServerReceive--&gt;|给客户端发送数据|ServerSend;\\n    ServerSend--&gt;|发送数据给客户端|Receive;\\n    ServerSend--&gt;|断开连接|ServerClose;\\n&quot;);\n</code></pre>\n<h3>Echo</h3>\n<p>第一章主要讲解了网络的连接方式，在例子中初步实现了一个使用 Socket 的 TCP 通信的客户端和服务端案例。<br>\n客户端代码如下：</p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Net<span class=\"token punctuation\">.</span>Sockets</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine<span class=\"token punctuation\">.</span>UI</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Echo</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Button</span> linkBtn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Button</span> sendBtn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">InputField</span> inputField<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Text</span> infoText<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Socket</span> _socket<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        linkBtn<span class=\"token punctuation\">.</span>onClick<span class=\"token punctuation\">.</span><span class=\"token function\">AddListener</span><span class=\"token punctuation\">(</span>Connection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        sendBtn<span class=\"token punctuation\">.</span>onClick<span class=\"token punctuation\">.</span><span class=\"token function\">AddListener</span><span class=\"token punctuation\">(</span>SendMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">/// 连接</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Connection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        _socket<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Socket</span><span class=\"token punctuation\">(</span>SocketType<span class=\"token punctuation\">.</span>Stream<span class=\"token punctuation\">,</span>ProtocolType<span class=\"token punctuation\">.</span>Tcp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        _socket<span class=\"token punctuation\">.</span><span class=\"token function\">Connect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">8888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">/// 发送消息</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">SendMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> sendStr <span class=\"token operator\">=</span> inputField<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> sendBytes <span class=\"token operator\">=</span> System<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">.</span>Encoding<span class=\"token punctuation\">.</span>Default<span class=\"token punctuation\">.</span><span class=\"token function\">GetBytes</span><span class=\"token punctuation\">(</span>sendStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        _socket<span class=\"token punctuation\">.</span><span class=\"token function\">Send</span><span class=\"token punctuation\">(</span>sendBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token comment\">// 接收</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> readBuff <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">byte</span></span><span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">//Receive 方法接收一个 byte [] 存储接收到的数据，并返回数据的大小，会阻塞线程</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> count <span class=\"token operator\">=</span> _socket<span class=\"token punctuation\">.</span><span class=\"token function\">Receive</span><span class=\"token punctuation\">(</span>readBuff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> recvStr <span class=\"token operator\">=</span> System<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">.</span>Encoding<span class=\"token punctuation\">.</span>Default<span class=\"token punctuation\">.</span><span class=\"token function\">GetString</span><span class=\"token punctuation\">(</span>readBuff<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        infoText<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token string\">\"提示信息：\"</span> <span class=\"token operator\">+</span> recvStr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        _socket<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>服务器端代码如下：</p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Net</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Net<span class=\"token punctuation\">.</span>Sockets</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Text</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">netWork_Server</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">internal</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token class-name\">Socket</span> socket<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Socket</span><span class=\"token punctuation\">(</span>AddressFamily<span class=\"token punctuation\">.</span>InterNetwork<span class=\"token punctuation\">,</span>SocketType<span class=\"token punctuation\">.</span>Stream<span class=\"token punctuation\">,</span>ProtocolType<span class=\"token punctuation\">.</span>Tcp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token class-name\">IPAddress</span> ipAddress <span class=\"token operator\">=</span> IPAddress<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token class-name\">IPEndPoint</span> ipEndPoint<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">IPEndPoint</span><span class=\"token punctuation\">(</span>ipAddress<span class=\"token punctuation\">,</span><span class=\"token number\">8888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            socket<span class=\"token punctuation\">.</span><span class=\"token function\">Bind</span><span class=\"token punctuation\">(</span>ipEndPoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token comment\">//listen</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            socket<span class=\"token punctuation\">.</span><span class=\"token function\">Listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[服务器] 启动成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token comment\">//Accept</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token class-name\">Socket</span> connfd <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span><span class=\"token function\">Accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[服务器] Accept\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token comment\">//Receive</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token class-name\"><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> readBuff<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">byte</span></span><span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> count <span class=\"token operator\">=</span> connfd<span class=\"token punctuation\">.</span><span class=\"token function\">Receive</span><span class=\"token punctuation\">(</span>readBuff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> readStr <span class=\"token operator\">=</span> System<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">.</span>Encoding<span class=\"token punctuation\">.</span>Default<span class=\"token punctuation\">.</span><span class=\"token function\">GetString</span><span class=\"token punctuation\">(</span>readBuff<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[服务器接收] \"</span><span class=\"token operator\">+</span>readStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token comment\">//send</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> reStr <span class=\"token operator\">=</span> DateTime<span class=\"token punctuation\">.</span>Now<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token class-name\"><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> sendBytes <span class=\"token operator\">=</span> Encoding<span class=\"token punctuation\">.</span>Default<span class=\"token punctuation\">.</span><span class=\"token function\">GetBytes</span><span class=\"token punctuation\">(</span>reStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                connfd<span class=\"token punctuation\">.</span><span class=\"token function\">Send</span><span class=\"token punctuation\">(</span>sendBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这样我们就可以在客户端和服务器之间构建 Socket 连接咯，至此第一章的内容就结束了，第一章并没有讲太多东西，只是简单的介绍了以下 Socket 通信的基本原理和一些 Socket 相关的方法 API，东西虽然不多但是此时此刻我们已经不是一个人了。我们的游戏<font color=blue>联网了</font>！</p>\n",
            "tags": [
                "读书笔记"
            ]
        }
    ]
}