{
    "version": "https://jsonfeed.org/version/1",
    "title": "指尖小屋 • All posts by \"di\" tag",
    "description": "学习的过程大概就是学了忘,忘了学，抽空多停下来总结，不要冲的太前。",
    "home_page_url": "https://www.fasty97.top",
    "items": [
        {
            "id": "https://www.fasty97.top/2022/10/01/VContainer%20%E5%88%9D%E4%BD%93%E9%AA%8C/",
            "url": "https://www.fasty97.top/2022/10/01/VContainer%20%E5%88%9D%E4%BD%93%E9%AA%8C/",
            "title": "VContainer 初体验",
            "date_published": "2022-10-01T13:51:00.000Z",
            "content_html": "<h2 id=\"ioc-控制反转\"><a class=\"markdownIt-Anchor\" href=\"#ioc-控制反转\">#</a> IOC 控制反转</h2>\n<blockquote>\n<p>IOC 提供一个对象生成容器，在我们需要取得某个对象时，不再使用 <code>New</code>  关键字进行对象生成操作，而是通过 IOC 容器内部控制来获得对象。</p>\n</blockquote>\n<p>使用这种思想方式，可以让我们无需关心对象的生成方式，只需要告诉容器我需要 xxx 对象即可，而高旭容器我需要 xxx 对象的方式就叫做 DI 依赖注入。</p>\n<h2 id=\"di依赖注入\"><a class=\"markdownIt-Anchor\" href=\"#di依赖注入\">#</a> DI 依赖注入</h2>\n<p>这种思想，<span class=\"exturl\" data-url=\"aHR0cDovL3huLS12anF3N3Nkc2RidGl1cGYubmV0\">我是在学习.net</span> core 时发现的，一般采用 <code>特性注入</code> 或者使用 <code>构造函数注入</code> 。</p>\n<p>经过标记的字段会在该类构造时在 IOC 容器中执行构造获取对应的对象示例。</p>\n<h2 id=\"vcontainer\"><a class=\"markdownIt-Anchor\" href=\"#vcontainer\">#</a> VContainer</h2>\n<p>VContainer 是在 Unity 端使用的一种轻量级的 DI 框架，通过 GameLifeScope 划分作用域，和普通的 web 后端的 Di 框架不同的是，针对 Unity 的 Mono 特殊性，提出了 GameLifeScope 的方式，通过在 Game Object 上挂载 Scope，可以在代码中动态切换使用的实例和 Scope。并且提供了一种父子继承 Scope 方式供用户使用。</p>\n<h2 id=\"scope-作用域\"><a class=\"markdownIt-Anchor\" href=\"#scope-作用域\">#</a> Scope 作用域</h2>\n<blockquote>\n<p>作用域指函数、变量的作用范围，在 Di 中一般可以注册 singleton 单例，Trans 复例等</p>\n</blockquote>\n<p>在 netcore 中有类似下面这样的形式：</p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> serviceCollection <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ServiceCollection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddTransient</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>ILoginService<span class=\"token punctuation\">,</span> EFLoginService<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddSingleton</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>ILoginService<span class=\"token punctuation\">,</span> EFLoginService<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddScoped</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>ILoginService<span class=\"token punctuation\">,</span> EFLoginService<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>其中添加的 <code>Addxxxx</code>  就是为其添加一项注入并指定注入作用域，同时在这里进行的是一个接口的注入操作，在使用这个接口依赖时会生成一个对应的接口实现实例。</p>\n<p>在 VContainer 中的注入和以上的方式很像。</p>\n<h3 id=\"单例\"><a class=\"markdownIt-Anchor\" href=\"#单例\">#</a> 单例？</h3>\n<p>一般来说，在 Unity 中我们会继承自一个泛型单例类。</p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">/// 基础单例（线程锁）</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">/// &lt;typeparam name=\"T\">&lt;/typeparam></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span> <span class=\"token keyword\">where</span> <span class=\"token class-name\">T</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">T</span> _instance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">T</span> Instance</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">get</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_instance <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> _instance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    _instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">T</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token expression language-csharp\"><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">T</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">Color</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Color</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.2f</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.6f</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.8f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"|单例OK\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    Monitor<span class=\"token punctuation\">.</span><span class=\"token function\">Enter</span><span class=\"token punctuation\">(</span>_instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token keyword\">finally</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                    Monitor<span class=\"token punctuation\">.</span><span class=\"token function\">Exit</span><span class=\"token punctuation\">(</span>_instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token keyword\">return</span> _instance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>例如继承自这个泛型单例来实现单例效果，在 Di 中我们的实例无需在外部控制单例，直接由 IOC 容器管理。</p>\n<h3 id=\"gamelifescope\"><a class=\"markdownIt-Anchor\" href=\"#gamelifescope\">#</a> GameLifeScope</h3>\n<blockquote>\n<p>为其 GameObject 添加一个继承自 <code>LifetimeScope</code>  的脚本即添加了一个 Scope。</p>\n<p>++ 游戏中至少需要有一个 Scope ++</p>\n</blockquote>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20221006110921.png\" alt=\"GameLifeScope\"></p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BaseLifeScope</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">LifetimeScope</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Configure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IContainerBuilder</span> builder<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            builder<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Register</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>MusicManager<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>Lifetime<span class=\"token punctuation\">.</span>Singleton<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            builder<span class=\"token punctuation\">.</span><span class=\"token function\">RegisterInstance</span><span class=\"token punctuation\">(</span>GameSettingAssetMgr<span class=\"token punctuation\">.</span>Instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            builder<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Register</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>UIManager<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>Lifetime<span class=\"token punctuation\">.</span>Singleton<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            builder<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">RegisterEntryPoint</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>GameLauncher<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            builder<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">RegisterEntryPoint</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>GameLoop<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>同时我们可以继承父级 LifeScope 来灵活选择我们的 Scope 实现。</p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GameLiftScope</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">BaseLifeScope</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Character</span> gamePanel<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Configure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IContainerBuilder</span> builder<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">Configure</span><span class=\"token punctuation\">(</span>builder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            builder<span class=\"token punctuation\">.</span><span class=\"token function\">RegisterComponentInNewPrefab</span><span class=\"token punctuation\">(</span>gamePanel<span class=\"token punctuation\">,</span> Lifetime<span class=\"token punctuation\">.</span>Scoped<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"可注入对象\"><a class=\"markdownIt-Anchor\" href=\"#可注入对象\">#</a> 可注入对象</h2>\n<blockquote>\n<p>在上面我们描述了 Scope，使用 <code> builder.Register&lt;T&gt;</code>  进行注册。</p>\n</blockquote>\n<h3 id=\"mono\"><a class=\"markdownIt-Anchor\" href=\"#mono\">#</a> Mono</h3>\n<p>可注入 Mono 的对象，例如游戏中的 UI 等与 Mono 关系密切的对象。</p>\n<p>可将场景中的 GameObject 直接注入到容器中来使用。</p>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20221006113633.png\" alt=\"image-20221006113633790\"></p>\n<h3 id=\"instance\"><a class=\"markdownIt-Anchor\" href=\"#instance\">#</a> Instance</h3>\n<p>可注入具体的对象实例，例如单例我们可以直接注入对象的单例，也可以在 Scope 中选择单例。</p>\n<h3 id=\"enterpoint\"><a class=\"markdownIt-Anchor\" href=\"#enterpoint\">#</a> EnterPoint</h3>\n<blockquote>\n<p><code>EnterPoint</code>  可以说是 <code>VContainer</code>  设计十分精妙的部分 —— 将 Mono 转移到普通的 C# 类中。</p>\n</blockquote>\n<p>通过 <code>builder.RegisterEntryPoint&lt;T&gt;();</code>  注入一个入口点。这些入口点能够代替 Unity 的 Start、Update、FixedUpdate 等函数。</p>\n<p>通过实现不同的 &gt; Ixxx 接口重写方法来编写原生 Unity 事件，如下例子：</p>\n<hr>\n<blockquote>\n<p>这是一个类似 Start 的实现，继承自 <code>IStartable</code>  即可，同时这里我注入了 <code>GameSettingAssetMgr</code>  和 <code>MusicManager</code>  两个对象。</p>\n<p>在游戏开始运行时，执行了打印当前游戏语言和播放 Bgm 的指令。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GameLauncher</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IStartable</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Inject</span></span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">GameSettingAssetMgr</span> _gameSettingAssetMgr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Inject</span></span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">MusicManager</span> _musicManager<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token function\">GameLauncher</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MusicManager</span> musicManager<span class=\"token punctuation\">,</span> <span class=\"token class-name\">GameSettingAssetMgr</span> gameSettingAssetMgr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            _musicManager <span class=\"token operator\">=</span> musicManager<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            _gameSettingAssetMgr <span class=\"token operator\">=</span> gameSettingAssetMgr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span>_gameSettingAssetMgr<span class=\"token punctuation\">.</span>lan<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            _musicManager<span class=\"token punctuation\">.</span><span class=\"token function\">PlayBgm</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"12345SEX\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>可以看到，在我运行游戏时，根据依赖自动生成了对象并执行了相关操作。</p>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20221006112341.png\" alt=\"image-20221006112341489\"></p>\n<blockquote>\n<p>同理我们可以，实现更多的接口来实现更多的 Unity 原生事件，将原本 Mono 脚本才能执行的内容转移到普通 Class 中。</p>\n</blockquote>\n<p>现在让我们为 GameLauncher 类实现 Update 实现。</p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>实现ITickable接口</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Tick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Input<span class=\"token punctuation\">.</span><span class=\"token function\">GetKeyDown</span><span class=\"token punctuation\">(</span>KeyCode<span class=\"token punctuation\">.</span>Q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        _uiManager<span class=\"token punctuation\">.</span><span class=\"token function\">ShowPanel</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GamePanel\"</span><span class=\"token punctuation\">,</span> UILayer<span class=\"token punctuation\">.</span>Mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"显示面板\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Input<span class=\"token punctuation\">.</span><span class=\"token function\">GetKeyDown</span><span class=\"token punctuation\">(</span>KeyCode<span class=\"token punctuation\">.</span>W<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        _uiManager<span class=\"token punctuation\">.</span><span class=\"token function\">SwitchShowState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GamePanel\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"切换面板显示\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://pic.fasty97.top/NotePad/20221006113216.gif\" alt=\"\"></p>\n<h2 id=\"在mono中使用\"><a class=\"markdownIt-Anchor\" href=\"#在mono中使用\">#</a> 在 Mono 中使用</h2>\n<blockquote>\n<p>因为 Mono 不支持构造函数，所以在 Mono 中使用时必须使用注入特性或注入方法的方式。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>builder<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">RegisterComponentInHierarchy</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Character<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"注入特性\"><a class=\"markdownIt-Anchor\" href=\"#注入特性\">#</a> 注入特性</h3>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Inject</span></span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">private</span> <span class=\"token class-name\">MusicManager</span> _musicManager<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Inject</span></span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">private</span> <span class=\"token class-name\">GameSettingAssetMgr</span> _gameSettingAssetMgr<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"注入方法\"><a class=\"markdownIt-Anchor\" href=\"#注入方法\">#</a> 注入方法</h3>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">MusicManager</span> _musicManager<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\">GameSettingAssetMgr</span> _gameSettingAssetMgr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Inject</span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Inject</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GameSettingAssetMgr</span> gameSettingAssetMgr<span class=\"token punctuation\">,</span> <span class=\"token class-name\">MusicManager</span> musicManager<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            _gameSettingAssetMgr <span class=\"token operator\">=</span> gameSettingAssetMgr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            _musicManager <span class=\"token operator\">=</span> musicManager<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"相关链接\"><a class=\"markdownIt-Anchor\" href=\"#相关链接\">#</a> 相关链接</h2>\n<ol>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly92Y29udGFpbmVyLmhhZGFzaGlraWNrLmpwLw==\">关于 | 虚拟容器 (hadashikick.jp)</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hhZGFzaGlBL1ZDb250YWluZXI=\">hadashiA/VContainer: The extra fast, minimum code size, GC-free DI (Dependency Injection) library running on Unity Game Engine. (github.com)</span></li>\n</ol>\n",
            "tags": [
                "DI",
                "IOC"
            ]
        }
    ]
}