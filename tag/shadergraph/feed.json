{
    "version": "https://jsonfeed.org/version/1",
    "title": "指尖小屋 • All posts by \"shadergraph\" tag",
    "description": "学习的过程大概就是学了忘,忘了学，抽空多停下来总结，不要冲的太前。",
    "home_page_url": "https://www.fasty97.top",
    "items": [
        {
            "id": "https://www.fasty97.top/2020/03/21/LWRP%E4%B8%8BShaderGraph%E7%9A%84%E4%BD%BF%E7%94%A8/",
            "url": "https://www.fasty97.top/2020/03/21/LWRP%E4%B8%8BShaderGraph%E7%9A%84%E4%BD%BF%E7%94%A8/",
            "title": "LWRP下ShaderGraph的使用",
            "date_published": "2020-03-21T09:03:57.000Z",
            "content_html": "<p><strong>丢失了好多文章，故更新一波，开一个新坑 CG</strong></p>\n<blockquote>\n<p>不论是 LWRP 还是 ShaderGraph 都已经不是什么新技术了</p>\n</blockquote>\n<h3 id=\"cg杂谈\"><a class=\"markdownIt-Anchor\" href=\"#cg杂谈\">#</a> CG 杂谈</h3>\n<p>计算机图形学（ComputGraph）简称 <code>CG</code> ，是一门研究计算机图形图像处理的学科，将符号或电子信号可视化是一门比较晦涩难懂的东西，比如 <code>傅里叶变换</code> 用于研究声音和波的关系，让波得以表示。众所周知，建模时我们总是使用三角面来构成一个模型，以三角面的数量来衡量一个模型的精细程度。从三维物体坐标系到二维的屏幕坐标系，深度如何表示？遮挡关系如何计算？这就是 CG 所研究的东西，计算机图形学也被称为程序员的浪漫，这就是这个系列要说的东西。</p>\n<h3 id=\"lwrp\"><a class=\"markdownIt-Anchor\" href=\"#lwrp\">#</a> LWRP</h3>\n<p><code>LWRP</code>  (轻度渲染管线) 是 unity 推出的可自定义的渲染管线，其初衷是为了移动平台和轻度主机平台。在轻度渲染管线下，我们可以对渲染管线做更多的设置和处理，并且可以使用 shaderGraph 可视化的 shader 编辑器像连连看一样完成 shader 的编写。<br>\n通过 shader 我们可以实现许多视觉效果，如飘动的红旗，水面的倒影，卡通人物渲染等；有些可以使用模型来解决但使用 shader 不仅高效还能处理许多模型无法解决的东西。</p>\n<p><em>不知道你是否看过游戏的模型，或者说取解包过游戏，很多游戏，模型可能并没有游戏中那么<strong>漂亮</strong>！</em><br>\n但是通过 shader，光照，后处理等，玩家看到的就是非常赞的效果了！（就好像是美颜滤镜一样）</p>\n<h3 id=\"hdrp\"><a class=\"markdownIt-Anchor\" href=\"#hdrp\">#</a> HDRP</h3>\n<p><code>HDRP</code>  (高清渲染管线) 如名字所言，是专门在对画面质量要求较高的主机或 PC 端开发游戏所使用的。（但 unity 开发大型游戏真的够呛，目前在我看来 ue4 可能更适合）<br>\n使用 HDRP 我们可以更高程度的自定义我们的渲染系统，要知道在游戏引擎中，渲染占据了很大的一块。</p>\n<h3 id=\"shader的基础认知\"><a class=\"markdownIt-Anchor\" href=\"#shader的基础认知\">#</a> Shader 的基础认知？</h3>\n<p>关于 shader 的基础认知，我在之前曾写过一篇文章（虽然没写完），我会抽空把那篇文章写完的。<br>\n如果有兴趣不妨去看看：<a href=\"http://www.fasty97.top/unity%e5%9b%be%e5%bd%a2%e5%ad%a6-%e6%b8%b2%e6%9f%93%e6%b5%81%e7%a8%8b/\" title=\"[传送门]unity图形学 渲染流程\">[传送门] unity 图形学 渲染流程</a></p>\n<h3 id=\"lwrp下shadergraph的搭建\"><a class=\"markdownIt-Anchor\" href=\"#lwrp下shadergraph的搭建\">#</a> LWRP 下 Shadergraph 的搭建</h3>\n<p><code>Unity版本 2019.3.0f6</code> <br>\n 听了这么多，也许你还是比较懵吧，没事。让我们来揭开 shader 的神秘面纱吧</p>\n<ol>\n<li>\n<p>首先安装如下依赖包：<br>\n<img data-src=\"http://pic.fasty97.top/blog/20200321/IHRSz6lfegXD.png\" alt=\"\"><br>\n<img data-src=\"http://pic.fasty97.top/blog/20200321/BLWb4IR9U5wt.png\" alt=\"\"></p>\n</li>\n<li>\n<p>创建渲染管线资源并设置：<br>\n值得一提的是，在 unity2019.3 中已经将 LWRP 更名为 UWRP 了，unity 想在之后让 LWRP 变成通用的渲染管线取代原先的 Stand 渲染管线；所以我们需要创建一个 UWRP 的资源。<br>\n<img data-src=\"http://pic.fasty97.top/blog/20200321/TR1o545kQ1Nz.png\" alt=\"\"></p>\n</li>\n<li>\n<p>使用 UWRP<br>\n 首先我们创建一个 Cube，一个材质，一个 PBRGraph（基于物理的 shader）。</p>\n</li>\n</ol>\n<h4 id=\"pbrgraph\"><a class=\"markdownIt-Anchor\" href=\"#pbrgraph\">#</a> PBRGraph?</h4>\n<p>这里补充一点小知识，所谓 PBR 就是基于物理的渲染，什么叫做基于物理的渲染呢？简单的说就是原先的模型在绘制贴图时，贴图师就会直接在贴图上绘制好高光，粗糙度，磨损等，这是基于经验的固定化的处理。而基于物理的渲染则是通过复杂的计算和光照模型的影响，动态的计算出模型的细节，让模型处于不同的环境中能够有不同的表现，是基于环境影响的。</p>\n<p>打开 PBRGraph：<br>\n创建如下结点并连接<br>\n<img data-src=\"http://pic.fasty97.top/blog/20200321/KC6HrUGWV9pC.png\" alt=\"PBRGraph\"><br>\n 然后将 shader 指定到对应材质，将材质指定到我们的 Cube，尝试调整数值吧。<br>\n<img data-src=\"http://pic.fasty97.top/blog/20200321/PkIawTx0mOAc.gif\" alt=\"\"><br>\n到这里我们已经知道如何基本的使用 shaderGraph 了呢，但你可能会说，这不是自带 shader 就拥有的功能吗？</p>\n<h3 id=\"做一个边缘发光效果\"><a class=\"markdownIt-Anchor\" href=\"#做一个边缘发光效果\">#</a> 做一个边缘发光效果</h3>\n<p>下面我们使用菲涅尔效应做一个简单的边缘自发光，其 shadergraph 如图所示，通过菲涅尔结点指定一个发光颜色和强度来实现。（非常简单吧）<br>\n<img data-src=\"http://pic.fasty97.top/blog/20200321/pmNHEXl7Y02o.png\" alt=\"\"><br>\n<strong>效果图：</strong><br>\n<img data-src=\"http://pic.fasty97.top/blog/20200321/dQdztRRmd7pH.gif\" alt=\"边缘发光效果\"></p>\n<h3 id=\"做一个顶点动画\"><a class=\"markdownIt-Anchor\" href=\"#做一个顶点动画\">#</a> 做一个顶点动画</h3>\n<p>通过顶点偏移我们可以实现一个波浪或是，旗帜飘动的效果：<br>\n主要是使用顶点偏移通过 sin 正弦方式。<br>\n<img data-src=\"http://pic.fasty97.top/blog/20200321/oKWCf4A3lDxM.png\" alt=\"\"></p>\n<p>效果如图：<br>\n<img data-src=\"http://pic.fasty97.top/blog/20200321/5yqXJieqbu2x.gif\" alt=\"\"></p>\n",
            "tags": [
                "shaderGraph"
            ]
        }
    ]
}