{
    "version": "https://jsonfeed.org/version/1",
    "title": "指尖小屋 • All posts by \"fsm\" tag",
    "description": "学习的过程大概就是学了忘,忘了学，抽空多停下来总结，不要冲的太前。",
    "home_page_url": "https://www.fasty97.top",
    "items": [
        {
            "id": "https://www.fasty97.top/2021/09/08/NodeCanvas%E4%B9%8BFSM%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA/",
            "url": "https://www.fasty97.top/2021/09/08/NodeCanvas%E4%B9%8BFSM%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA/",
            "title": "NodeCanvas之FSM有限状态机",
            "date_published": "2021-09-08T14:27:11.000Z",
            "content_html": "<blockquote>\n<p>FSM 有限状态机是一种设计方式，用于处理不同状态的切换</p>\n<p>其主要包含以下几个部分：</p>\n<ol>\n<li>状态（进入、更新、离开）</li>\n<li>过渡条件 【 <code>用于控制状态的切换</code> 】</li>\n<li>状态机控制器【 <code>用于控制状态机</code> 】</li>\n</ol>\n</blockquote>\n<p>本文主要介绍 <code>NodeCanvas</code>  的 FSM 使用，具体基础 FSM 概念不做解释。</p>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20210908225324.png\" alt=\"image-20210908225324425\"></p>\n<center>FSM示例图</center>\n<h2 id=\"开始\"><a class=\"markdownIt-Anchor\" href=\"#开始\">#</a> 开始</h2>\n<p>为游戏对象添加如下脚本：</p>\n<p><img data-src=\"https://pic.fasty97.top/NotePad/20210909125307.png\" alt=\"image-20210909125300176\"></p>\n<h2 id=\"结点类型\"><a class=\"markdownIt-Anchor\" href=\"#结点类型\">#</a> 结点类型</h2>\n<p>NodeCanvas 中结点分为几个类型：</p>\n<ol>\n<li>Action State（动作状态，只处理进入状态）</li>\n<li>Super Action State （超级动作状态，能处理进入、更新、离开状态）</li>\n<li>Pass（过渡态，不做任何处理）</li>\n<li>Parallel（并行。 在状态机处于任意状态时，并行执行）</li>\n<li>Any State（能够从任意状态进行状态切换，在状态机过程中，时刻监听）</li>\n</ol>\n<h2 id=\"结语\"><a class=\"markdownIt-Anchor\" href=\"#结语\">#</a> 结语</h2>\n<p>在 FSM 中，也没什么太多可以讲的，其条件和行为结点为 <code>NodeCanvas</code>  行为树、状态机、对话树所共用。</p>\n<blockquote>\n<p>个人感觉，NodeCanvas 设计最棒的一点就是，他三种系统用的同一个底层，而且可以互相嵌套兼容。</p>\n</blockquote>\n",
            "tags": [
                "Unity Tool",
                "FSM",
                "状态机",
                "有限状态机"
            ]
        }
    ]
}