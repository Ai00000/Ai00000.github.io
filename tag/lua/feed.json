{
    "version": "https://jsonfeed.org/version/1",
    "title": "指尖小屋 • All posts by \"lua\" tag",
    "description": "学习的过程大概就是学了忘,忘了学，抽空多停下来总结，不要冲的太前。",
    "home_page_url": "https://www.fasty97.top",
    "items": [
        {
            "id": "https://www.fasty97.top/2020/02/07/Lua-%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B9%9D%EF%BC%89%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/",
            "url": "https://www.fasty97.top/2020/02/07/Lua-%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B9%9D%EF%BC%89%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/",
            "title": "Lua-基础（九）面向对象",
            "date_published": "2020-02-07T08:20:13.000Z",
            "content_html": "<blockquote>\n  lua虽然没有面向对象的概念，但我们实现面向对象并不困难\n</blockquote>\n<p>一下内容我参考了多处 lua 教程，很多教程讲解模糊晦涩，我整理了以下以简明的说明方式完成 lua 面向对象这部分的内容，希望大家喜欢。</p>\n<h3>面向对象OOP</h3>\n<p>学习过 Java，C#，Ruby 等的同学可能不会对面向对象陌生，如果你是第一次接触面向对象？<br>\n那么我总结一下就是:<code>将事物抽象成类，将特征抽象为字段和属性。</code><br>\n在 Lua 中，最强大的就是 table 这种数据结构了，来看下面这个例子：</p>\n<pre><code class=\"line-numbers\">Cat=&#123;name=\"defalut\",color=\"白色\"&#125;\nfunction Cat.say()\n    print(Cat.name..'  '..Cat.color..':','喵喵喵~')\nend\nCat.name='小白'\nCat.say()\n</code></pre>\n<p>运行结果为:<code>小白  白色：喵喵喵～</code></p>\n<p>在例子中，我们创建了一张表，并在表中提供 2 个字段和一个函数，并通过表名。字段名调用字段和方法，这像不像 一个<code>静态类</code>呢？<br>\n以下是 Csharp 的一个类似的静态类：</p>\n<pre><code class=\"language-csharp line-numbers\">class Program\n&#123;\n    static void Main(string[] args)\n    &#123;\n        Cat.name = \"小白\";\n        Cat.color = \"白色\";\n        Cat.Show();\n    &#125;\n&#125;\n\nstatic class Cat\n&#123;\n    public static string name;\n    public static string color;\n\n    public static void Show()\n    &#123;\n        System.Console.WriteLine(\"&#123;0&#125;  &#123;1&#125;   喵喵喵~\", name, color);\n    &#125;\n&#125;\n</code></pre>\n<p>分析一下：之所以是静态类是因为我们只在创建表的时候创建了一个对象，后面无论我们进行操作我们都没有创建一个新对象！</p>\n<h3>创建对象</h3>\n<pre><code class=\"line-numbers\">function Cat:new()\n    local o=&#123;&#125;\n    setmetatable(o,self)\n    self.__index=self\n    return o\nend\n\nfunction Cat:say()\n    print(self.name..'  '..self.color..':','喵喵喵~')\nend\n\nlocal ca=Cat:new()\nca:say()\n</code></pre>\n<p>在上面的例子中，我们首先添加了一个 Cat：new 的函数，这类似于我们 Csharp 中的构造函数，<br>\n在构造函数中，我们主要做以下几件事：</p>\n<ul>\n<li>创建空表对象</li>\n<li>设置空表的元表</li>\n<li>设置_index</li>\n<li>返回空表对象</li>\n</ul>\n<p>在每次创建对象时，我们都通过:new 函数来创建。<br>\n在这里我们使用到了：<code>setmetatable(o,self)</code>这句话的意思是设置 o 的元表为自己（也就是 Cat 对象），<code>self.__index=self</code>是设置元方法索引为 Cat 对象，这 2 句话总体就是让对象 o 具有 Cat 对象的属性和函数。<br>\n当然元表，元方法的作用还有很多，也远比这要复杂，感兴趣可以自己去了解～</p>\n<h3>继承和多态</h3>\n<p>让我们来看这个例子：</p>\n<pre><code class=\"line-numbers\">-- 基础类\nHuman=&#123;name='defaultName',age=0&#125;\nfunction Human:new()\n    local o=&#123;&#125;\n    self.__index=self\n    setmetatable(o,self)\n    return o\nend\n\nfunction Human:show()\n    print('Base:','Name:',self.name,'Age:',self.age)\nend\n\nlocal myhum=Human:new()\nmyhum.name=\"小蓝\"\nmyhum.age=20\nmyhum:show()\n\n-- 派生类\nChinese=Human:new()\nfunction Chinese:new()\n    local o=&#123;&#125;\n    setmetatable(o,self)\n    self.__index=self\n    return o\nend\nfunction Chinese:show()\n    print('Chinese:','Name:',self.name,'Age:',self.age)\nend\n\nlocal ch=Chinese:new()\nch.name=\"小红\"\nch.age=15\nch:show()\n\nmyhum:show()\n\nch:show()\n\nlocal ch2=Chinese:new()\n\nch2:show()\n\n\nEnglish=Human:new()\n\nfunction English:show()\n    print('English:','Name:',self.name,'Age:',self.age)\nend\n\nlocal eg=English:new()\neg.name=\"Fasty\";eg.age=22\neg:show()\n</code></pre>\n<p>!{运行结果}(<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjAvMDIvMDcvMk5FUE9TQ0RYdHVaWUx5LnBuZw==\">https://i.loli.net/2020/02/07/2NEPOSCDXtuZYLy.png</span>)</p>\n<p>在 lua 中基于弱类型的优势，对于函数重写，只需要重新定义一遍函数即可。</p>\n<p>至此面向对象的封装，继承，多态都实现咯～</p>\n<p>[toc]</p>\n",
            "tags": [
                "Lua"
            ]
        },
        {
            "id": "https://www.fasty97.top/2020/02/06/Lua-%E5%9F%BA%E7%A1%80%EF%BC%88%E5%85%AB%EF%BC%89%E4%B8%87%E7%94%A8table%E6%9E%84%E5%BB%BA%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/",
            "url": "https://www.fasty97.top/2020/02/06/Lua-%E5%9F%BA%E7%A1%80%EF%BC%88%E5%85%AB%EF%BC%89%E4%B8%87%E7%94%A8table%E6%9E%84%E5%BB%BA%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/",
            "title": "Lua-基础（八）万用table构建数据结构",
            "date_published": "2020-02-06T11:55:55.000Z",
            "content_html": "<p>平时我们在其他语言中，经常会用到如数组，矩阵，队列和栈等一些数据结构，而 lua 似乎并没有这些数据类型，lua 只提供了 table 类型，但是通过 table 类型我们几乎可以实现所有常用的数据类型。</p>\n<h3>数组</h3>\n<p>数组的实现非常简单，table 的数据类型类似与 C# 中的字典，存储 kv 对，我们只取 value 即可。</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">local</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> key<span class=\"token punctuation\">,</span> value <span class=\"token keyword\">in</span> <span class=\"token function\">pairs</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><h3>矩阵</h3>\n<p>矩阵也被称为多维数组，我们只需要嵌套一个 table 即可。</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">local</span> mt<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span> <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    mt<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span> <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        mt<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><h3>链表</h3>\n<p>对于像链表这样的数据结构，我们可以方便的通过一个指针域实现。</p>\n<pre><code class=\"language-lua line-numbers\">-- 链表\nlocal l=nil\nlocal l2=&#123;next=nil,value=10&#125;\nl=&#123;next=l2,value=200&#125;\n\nwhile l do\n    print(l.value)\n    l=l.next\nend\n</code></pre>\n<h3>队列和栈</h3>\n<p>下面以队列为例，栈也是类似的构造：</p>\n<pre><code class=\"language-lua line-numbers\">-- 队列和栈\nQueue=&#123;&#125;\nfunction Queue.new()\n    return&#123;first=0,last=-1&#125;\nend\nfunction Queue.push(queue,value)\n    local first=queue.first-1\n    queue.first=first\n    queue[first]=value\nend\n\nfunction Queue.pop(queue)\n    local last=queue.last\n    if queue.last>last then\n        error(\"queue 为空\")\n    end\n    local value=queue[last]\n    queue[last]=nil\n    queue.last=last-1\n    return value\nend\n\nlocal qq=Queue.new()\nQueue.push(qq,5)\nQueue.push(qq,8)\n</code></pre>\n",
            "tags": [
                "Lua"
            ]
        },
        {
            "id": "https://www.fasty97.top/2020/02/05/Lua-%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%83%EF%BC%89%E7%A8%8B%E5%BA%8F%E5%8D%8F%E5%90%8C/",
            "url": "https://www.fasty97.top/2020/02/05/Lua-%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%83%EF%BC%89%E7%A8%8B%E5%BA%8F%E5%8D%8F%E5%90%8C/",
            "title": "Lua-基础（七）程序协同",
            "date_published": "2020-02-05T12:06:51.000Z",
            "content_html": "<blockquote>\n  使用协同程序可以更加高效的处理数据或执行任务\n</blockquote>\n<h3>协同的基础</h3>\n<h4>创建协同程序</h4>\n<img data-src=\"https://i.loli.net/2020/02/05/QFZCUHvoqLlxs8W.png\" alt=\"image.png\" />\n<pre><code class=\"language-lua line-numbers\">local co=coroutine.create(function ()\n    print('Hi')\nend)\n</code></pre>\n<h4>协程的状态</h4>\n<img data-src=\"https://i.loli.net/2020/02/05/jgQadC17IR5UKzs.png\" alt=\"image.png\" />\n协同有三个状态：<code>挂起态</code>、<code>运行态</code>、<code>停止态</code>。当我们创建一个协同程序时他开始的状态为挂起态，也就是说我们创建协同程序的时候不会自动运行，可以使用 status 函数检查协同的状态：\n<pre><code class=\"language-lua line-numbers\">print(coroutine.status(co))\n</code></pre>\n<h4>启动协程</h4>\n<p>使用<code>coroutine.resume()</code>可以启动协程<br>\n<img data-src=\"https://i.loli.net/2020/02/05/hfGsy8jZpeYXJK7.png\" alt=\"image.png\" /><br>\n例如：<br>\n<code>coroutine.resume(co)</code><br>\n启动协程后，会立即执行协程方法中的内容。</p>\n<h4>挂起协程</h4>\n<p>如有需要<code>coroutine.yield()</code>可以挂起协程。<br>\n让我们来看下面这个例子，创建一个协程，在协程函数中构建一个循环，并在打印后挂起当前协程，我们不断的去调用协程。</p>\n<pre><code class=\"line-numbers\">local th=coroutine.create(function ()\n    for i = 1, 3 do\n        print(\"th=\",i)\n        coroutine.yield()\n    end\nend)\ncoroutine.resume(th)\ncoroutine.resume(th)\ncoroutine.resume(th)\ncoroutine.resume(th)\nprint(coroutine.resume(th)) -- 程序结束返回false\n</code></pre>\n<p>其运行结果如下图所示:<br>\n<img data-src=\"https://i.loli.net/2020/02/05/nbsoW7vOMuGApD4.png\" alt=\"image.png\" /><br>\n我们发现，<strong>在协程死亡时，coroutine.resume 就返回 false，并返回错误消息</strong>。</p>\n<p><strong>Ps</strong>:resume 运行在保护模式下，因此如果协同内部存在错误 Lua 并不会抛出错误而是将错误返回给 resume 函数.</p>\n<h4>在resume和yield间交换数据</h4>\n<p>有没有办法在协程挂起时，返回一些数据呢？或在每次启动协程时，发送一些数据？<br>\n在 lua 中我们可以在 resume 和 yield 间交换数据。</p>\n<p>传递参数：</p>\n<pre><code class=\"line-numbers\">-- 传递参数\nlocal th2=coroutine.create(function (a,b,c)\n    print(\"th2\",a,b,c)\nend)\n\ncoroutine.resume(th2,1,2,3)\n</code></pre>\n<p>当然我们也可以传递协程结果：</p>\n<pre><code class=\"line-numbers\">local th3=coroutine.create(function ()\n    return 6,7\nend)\nprint(coroutine.resume(th3))\n</code></pre>\n<p><strong>Ps</strong>:<br>\nLua 提供的这种协同我们称为不对称的协同，就是说挂起一个正在执行的协同的函数与使一个被挂起的协同再次执行的函数是不同的，有些语言提供对称的协同，这种情况下，由执行到挂起之间状态转换的函数是相同的。</p>\n<h3>管道和过滤器</h3>\n<p>这个课题有点难，啃书中。。。<br>\n待更新</p>\n",
            "tags": [
                "Lua"
            ]
        },
        {
            "id": "https://www.fasty97.top/2020/02/04/Lua-%E5%9F%BA%E7%A1%80%EF%BC%88%E5%85%AD%EF%BC%89%E5%8A%A0%E8%BD%BD%E4%BD%BF%E7%94%A8%E5%85%B6%E4%BB%96Lua%E7%9A%84%E5%87%BD%E6%95%B0/",
            "url": "https://www.fasty97.top/2020/02/04/Lua-%E5%9F%BA%E7%A1%80%EF%BC%88%E5%85%AD%EF%BC%89%E5%8A%A0%E8%BD%BD%E4%BD%BF%E7%94%A8%E5%85%B6%E4%BB%96Lua%E7%9A%84%E5%87%BD%E6%95%B0/",
            "title": "Lua-基础（六）加载使用其他Lua的函数",
            "date_published": "2020-02-04T13:08:52.000Z",
            "content_html": "<blockquote>\n  lua的特点之一就是方便的调用chunk（代码块）\n</blockquote>\n<p>通过这种特性，我们可以在 a.lua 中调用 b.lua 的内容，甚至可以从字符串文本中调用 lua 当做函数执行～</p>\n<h3>load</h3>\n<p>让我们先来看一下 load 函数的定义：<br>\n!{load 函数}(<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjAvMDIvMDQvRFlHVjJDU1dvUGNMNDl2LnBuZw==\">https://i.loli.net/2020/02/04/DYGV2CSWoPcL49v.png</span>)<br>\n 通过定义我们可以知道 load 函数可以加载文本和二进制类型代码块，来让我们尝试一下：</p>\n<pre><code class=\"line-numbers\">local f=load('I=I+1')\nI=0\nf()\nprint('I='..I)\nf()\nprint('I2='..I)\n</code></pre>\n<p>在这个例子中，我们使用 load 加载了<code>’I=I+1’</code>这一串字符串，并把加载结果存储在 f 中。通过使用<code>f()</code>来调用函数。</p>\n<h3>loadFile</h3>\n<p><img data-src=\"https://i.loli.net/2020/02/04/vNUObGS7D4EczrV.png\" alt=\"loadFile\"><br>\n 和 load 类似的还有 loadfile，但 loadfile 加载的是文件而非字符串。</p>\n<p>我们在 funTest.lua 文件中写一句输出：<code>print(‘Test’)</code><br>\n然后在其他文件中调用：</p>\n<pre><code class=\"line-numbers\">local fun=loadfile('funTest.lua',\"t\")\nfun()\n</code></pre>\n<p>通过这种形式我们就可以吧 funTest.lua 的内容当做一个函数来使用，以上使用后会输出 Test。</p>\n<h3>dofile</h3>\n<p><img data-src=\"https://i.loli.net/2020/02/04/PxjaiqrlKJ6S41e.png\" alt=\"dofile\"><br>\ndofile 与 loadfile 最大的不同就是，loadfile 只是加载函数，需要我们手动去调用，而 dofile 不但加载函数而且直接调用。</p>\n<pre><code class=\"line-numbers\">dofile('funTest.lua')\n</code></pre>\n<h3>require</h3>\n<p>require 是包含的意思，与 load 系列不同的是，require 会检查被加载的文件是否已经被加载过，防止重复加载。<br>\n另外使用 require 加载可以单独调用加载的文件中的函数，而不是把文件内容当做一个函数来使用，所以 require 加载时比较理想的加载形式。</p>\n<h4>使用表加载</h4>\n<p>在 funTest.lua 文件中:</p>\n<pre><code class=\"line-numbers\">local _M = &#123;&#125;\nfunction _M.test()\n    print('hi')\nend\nfunction _M.Hi()\n    print('hi100')\nend\nfunction _M.Say(arg)\n    print('hi:'..tostring(arg))\nend\nreturn _M\n\n</code></pre>\n<p>在其他文件中调用：</p>\n<pre><code class=\"line-numbers\">-- 调用其他文件的函数\nlocal test = require('funTest')\nif not test then\n    print('错误')\n    return\nend\ntest.Hi()\ntest.test()\ntest.Say(51)\n</code></pre>\n<h4>非表加载</h4>\n<p>在 funTest.lua 中：</p>\n<pre><code class=\"line-numbers\">function Ac(j)\n    print('100:'..j)\nend\n</code></pre>\n<p>在其他文件中：</p>\n<pre><code class=\"line-numbers\">require(\"funTest\")\nAc('你好')\n</code></pre>\n<h4>说明</h4>\n<p>使用表加载和非表加载都可以实现效果，使用表加载时，有点面向对象的感觉可能更方便。</p>\n",
            "tags": [
                "Lua"
            ]
        },
        {
            "id": "https://www.fasty97.top/2020/02/04/Lua-%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%94%EF%BC%89.%E5%92%8C%EF%BC%9A%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E8%81%94%E7%B3%BB/",
            "url": "https://www.fasty97.top/2020/02/04/Lua-%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%94%EF%BC%89.%E5%92%8C%EF%BC%9A%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E8%81%94%E7%B3%BB/",
            "title": "Lua-基础（五）.和：的区别和联系",
            "date_published": "2020-02-04T05:23:18.000Z",
            "content_html": "<p>在前面我们学习函数时，我们说过函数其实是值，我们可以将函数放在表中。<br>\n那么我们是不是可以这么做：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">local</span> fasty<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>a<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> fasty<span class=\"token punctuation\">.</span><span class=\"token function\">Say</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Say:'</span><span class=\"token operator\">..</span>arg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">function</span> fasty<span class=\"token punctuation\">:</span><span class=\"token function\">Say2</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Say:\"</span><span class=\"token operator\">..</span>arg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><p>在这里，我们创建了一个表 fasty, 表中默认有 a 一个元素。然后我们给表创建了两个函数 say 和 say2，这 2 个函数的作用都是将给与的参数输出。</p>\n<h3>调用不同</h3>\n<p>在我们调用这 2 个方法时，我们应该明确：</p>\n<ul>\n<li>使用<code>.</code>声明的方法使用<code>.</code>调用，使用<code>:</code>声明的方法使用<code>：</code>调用</li>\n<li>假如我们要使用。调用：声明的方法，那我们需要传递一个 this 指针给函数</li>\n<li>也就是说：其实是自动传递一个 this 指针给函数。</li>\n</ul>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>fasty<span class=\"token punctuation\">.</span><span class=\"token function\">Say</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>fasty<span class=\"token punctuation\">:</span><span class=\"token function\">Say2</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>fasty<span class=\"token punctuation\">.</span><span class=\"token function\">Say2</span><span class=\"token punctuation\">(</span>fasty<span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>​```lua</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">&lt;</span>strong<span class=\"token operator\">></span>Ps<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>strong<span class=\"token operator\">></span>：也就是说一下函数是等效的：</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>​```lua</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">function</span> fasty<span class=\"token punctuation\">.</span><span class=\"token function\">Say3</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>arg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"say:\"</span><span class=\"token operator\">..</span>arg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">function</span> fasty<span class=\"token punctuation\">:</span><span class=\"token function\">Say4</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"say:\"</span><span class=\"token operator\">..</span>arg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><h3>self指针</h3>\n<p>既然，：的形式是自动传递一个 self 指针给函数，那么就意味着我们可以方便的访问表的元素咯～</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> fasty<span class=\"token punctuation\">:</span><span class=\"token function\">Say2</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Say:\"</span><span class=\"token operator\">..</span>arg<span class=\"token operator\">..</span><span class=\"token string\">\"\\ta=\"</span><span class=\"token operator\">..</span>self<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>fasty<span class=\"token punctuation\">:</span><span class=\"token function\">Say2</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://i.loli.net/2020/02/04/7pvlgWErTAbiSDZ.png\" alt=\"\"></p>\n<h3>总结</h3>\n<ul>\n<li>使用：声明函数时，函数会将第一个参数默认传递self指针。</li>\n<li>如果使用.调用：声明的函数时，需要第一个参数传递self。：调用则不需要</li>\n</ul>\n",
            "tags": [
                "Lua"
            ]
        },
        {
            "id": "https://www.fasty97.top/2020/02/03/Lua-%E5%9F%BA%E7%A1%80%EF%BC%88%E5%9B%9B%EF%BC%89%E8%BF%AD%E4%BB%A3%E5%99%A8/",
            "url": "https://www.fasty97.top/2020/02/03/Lua-%E5%9F%BA%E7%A1%80%EF%BC%88%E5%9B%9B%EF%BC%89%E8%BF%AD%E4%BB%A3%E5%99%A8/",
            "title": "Lua-基础（四）迭代器",
            "date_published": "2020-02-03T14:26:11.000Z",
            "content_html": "<blockquote>\n  迭代器是一种支持指针类型的结构，它可以遍历集合的每一个元素。在 Lua 中我们\n  常常使用函数来描述迭代器，每次调用该函数就返回集合的下一个元素。常常使用函数来描述迭代器，每次调用该函数就返回集合的<font color=green>下一个元素</font>。\n</blockquote>\n<h3>闭包和迭代器</h3>\n<ul>\n<li>迭代器需要保留<font color=blue>上一次</font>成功调用的状态</li>\n<li>迭代器需要保留<font color=blue>下一次</font>成功调用的状态</li>\n</ul>\n<p>我们知道闭包可以保留每次调用的状态。并且可以方便的访问局部变量；所以我们也可以使用闭包来构建迭代器。<br>\n还记得我们在做 for 循环遍历表时的 pairs (t) 的迭代器吗？我们尝试自己来写一个迭代器：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 迭代器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">list_iter</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">local</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">local</span> n<span class=\"token operator\">=</span><span class=\"token operator\">#</span>t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        i<span class=\"token operator\">=</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span> i<span class=\"token operator\">&lt;=</span>n <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">local</span> t<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">-- 创建表</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">local</span> iter <span class=\"token operator\">=</span> <span class=\"token function\">list_iter</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 创建迭代器变量实例</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token keyword\">true</span> <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">local</span> element<span class=\"token operator\">=</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 使用迭代器</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">if</span> element<span class=\"token operator\">==</span><span class=\"token keyword\">nil</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'数据为:'</span><span class=\"token operator\">..</span>element<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><p><strong>Ps</strong>：如果要创建一个闭包必须要创建其外部局部变量。所以一个典型的闭包的结构包含两个函数：一个是闭包自己；另一个是工厂（创建闭包的函数）。<br>\n当然我们可以将这个迭代器应用于 for 循环中：</p>\n<pre><code class=\"line-numbers\">for value in list_iter(t) do\n    print(value)\nend\n</code></pre>\n<h4>迭代器小例子-访问文件</h4>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 打开文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">local</span> file <span class=\"token operator\">=</span> io<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hh.txt'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span><span class=\"token comment\">-- 指定文件操作为读取</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token keyword\">nil</span><span class=\"token operator\">==</span>file <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'文件打开失败'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">ReadFile</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">local</span> line<span class=\"token operator\">=</span>file<span class=\"token punctuation\">:</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token string\">'*l'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 以行的形式进行读取</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token keyword\">nil</span><span class=\"token operator\">==</span>line <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">nil</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">return</span> line</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">for</span> data <span class=\"token keyword\">in</span> <span class=\"token function\">ReadFile</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">-- 使用 while 的话</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">local</span> readfile<span class=\"token operator\">=</span><span class=\"token function\">ReadFile</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token keyword\">true</span> <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">local</span> line<span class=\"token operator\">=</span><span class=\"token function\">readfile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">if</span> line<span class=\"token operator\">==</span><span class=\"token keyword\">nil</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><h3>深入了解for循环</h3>\n<p>在上面的闭包迭代器中我们不难发现，如果使用 for 循环则可以免去 while 循环所需的迭代闭包变量，<br>\n这样使用起来就比 while 循环要方便一些。那 for 循环是怎么做到的呢？<br>\n让我们来看看 for 循环的格式：<br>\n<code>for var_1, …, var_n in explist do block end</code><br>\n在 for 循环我们可以使用多个参数，如之前我们使用的系统自带的表迭代器，我们可以获得 k 和 v 的值。<br>\n在<code>in</code>关键字后接需要被迭代的数据源列表（也就是说可以迭代多个列表），然后在<code>do</code>后对遍历项进行处理。<br>\n<strong>Ps</strong>：其实在 lua 中，for 的执行顺序是这样的：</p>\n<ol>\n<li>首先，初始化，计算 in 后面表达式的值，表达式应该返回范性 for 需要的三个值：迭代函数，状态常量和控制变量；与多值赋值一样，如果表达式返回的结果个数不足三个会自动用 nil 补足，多出部分会被忽略。</li>\n<li>第二，将状态常量和控制变量作为参数调用迭代函数（注意：对于 for 结构来说，状态常量没有用处，仅仅在初始化时获取他的值并传递给迭代函数）。</li>\n<li>第三，将迭代函数返回的值赋给变量列表。</li>\n<li>第四，如果返回的第一个值为 nil 循环结束，否则执行循环体。</li>\n<li>第五，回到第二步再次调用迭代函数</li>\n</ol>\n<p><font color=red>从某种意义上来说，for 循环还是依赖于 while 循环做的优化</font>。<br>\n其等价为：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">local</span> _f<span class=\"token punctuation\">,</span> _s<span class=\"token punctuation\">,</span> _var <span class=\"token operator\">=</span> explist</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token keyword\">true</span> <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">local</span> var_1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">...</span> <span class=\"token punctuation\">,</span> var_n <span class=\"token operator\">=</span> <span class=\"token function\">_f</span><span class=\"token punctuation\">(</span>_s<span class=\"token punctuation\">,</span> _var<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>_var <span class=\"token operator\">=</span> var_1</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">if</span> _var <span class=\"token operator\">==</span> <span class=\"token keyword\">nil</span> <span class=\"token keyword\">then</span> <span class=\"token keyword\">break</span> <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>block</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><h3>无状态迭代器</h3>\n<blockquote>\n  上面我们依据闭包的思想实现的迭代器其核心思想就是保留状态，那有没有一种方式<font color=red>无需保留状态</font>构建迭代器呢？\n</blockquote>\n<p>让我们回想一下，系统自带的<code>pairs(t)</code>迭代器有使用到闭包吗？答案是：没有<br>\n所以<code>pairs(t)</code>迭代器就是一种无状态迭代器～<br>\n 我们尝试着实现一个 pairs 的效果，其代码如下：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">iter</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    i<span class=\"token operator\">=</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">local</span> v<span class=\"token operator\">=</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> v <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">,</span>v</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">ipairs</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> iter<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">local</span> tt<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">45</span><span class=\"token punctuation\">,</span><span class=\"token number\">46</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">for</span> key<span class=\"token punctuation\">,</span> value <span class=\"token keyword\">in</span> <span class=\"token function\">ipairs</span><span class=\"token punctuation\">(</span>tt<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><p>我们每次调用 ipairs 时，都自动去调用 iter，并且在调用时保留 iter 迭代函数，a 迭代数据，0 迭代索引。（很神奇吧，这种写法估计只有 lua 的作者才能想到，简直天才～）<br>\n<strong>Ps</strong>：同理，lua 中 ipairs 也是这样调用其他函数的（调用 next 函数）</p>\n<h3>多状态控制器</h3>\n<p>很多情况下，迭代器需要保存多个状态信息而不是简单的状态常量和控制变量，最<br>\n简单的方法是使用闭包，还有一种方法就是将所有的状态信息封装到 table 内，将 table<br>\n 作为迭代器的状态常量，因为这种情况下可以将所有的信息存放在 table 内，所以迭代函<br>\n数通常不需要第二个参数。</p>\n<p>[toc]</p>\n",
            "tags": [
                "Lua"
            ]
        },
        {
            "id": "https://www.fasty97.top/2020/02/01/Lua-%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%89%EF%BC%89%E5%87%BD%E6%95%B0/",
            "url": "https://www.fasty97.top/2020/02/01/Lua-%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%89%EF%BC%89%E5%87%BD%E6%95%B0/",
            "title": "Lua-基础（三）函数",
            "date_published": "2020-02-01T12:49:38.000Z",
            "content_html": "<blockquote>\n  函数可以完成2件事，<code>完成工作</code>或者<code>计算并返回结果</code>。\n</blockquote>\n<h3>函数语法</h3>\n<pre><code class=\"line-numbers\">function func_name (arguments-list)\nstatements-list\nend\n</code></pre>\n<p><strong>Ps</strong>：Lua 使用的函数可以是 Lua 编写也可以是其他语言编写，对于 Lua 程序员来说用什<br>\n么语言实现的函数使用起来都一样。</p>\n<pre><code class=\"line-numbers\">function Show(a)\n    print(a)\nend\nShow(100)\n</code></pre>\n<h4>返回多个值</h4>\n<p>在 lua 中函数可以返回多个值，例如 string.find，其返回匹配串 “开始和结束的下标”<br>\n（如果不存在匹配串返回 nil）。</p>\n<pre><code class=\"line-numbers\">s, e = string.find(\"hello Lua users\", \"Lua\")\nprint(s, e)  --> 7 9\n</code></pre>\n<p>计算最大值和最大值的索引</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">MaxM</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">local</span> maxIndex<span class=\"token operator\">=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">local</span> max<span class=\"token operator\">=</span>arr<span class=\"token punctuation\">[</span>maxIndex<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span> key<span class=\"token punctuation\">,</span> value <span class=\"token keyword\">in</span> <span class=\"token function\">pairs</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span> value<span class=\"token operator\">></span>max <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            maxIndex<span class=\"token operator\">=</span>key</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            max<span class=\"token operator\">=</span>value</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> max<span class=\"token punctuation\">,</span>maxIndex</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">local</span> max<span class=\"token punctuation\">,</span>maxIndex<span class=\"token operator\">=</span><span class=\"token function\">MaxM</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1.5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'最大值和索引为:'</span><span class=\"token operator\">..</span>max<span class=\"token operator\">..</span><span class=\"token string\">'  '</span><span class=\"token operator\">..</span>maxIndex<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4>返回函数</h4>\n<p>如<code>return fac()</code>这样的形式就是返回函数，其意义是执行 fac 函数并返回 fac 的返回值，若没有返回 nil。</p>\n<h4>可变参数</h4>\n<h5>unpack</h5>\n<p><code>unpack</code>，接受一个数组作为输入参数，返回数组的所有元素。</p>\n<pre><code class=\"line-numbers\">f = string.find\na = &#123;\"hello\", \"ll\"&#125;\nprint(f(unpack(a))) --> 3 4\n</code></pre>\n<h5>...可变参数</h5>\n<p>可以使用… 表示不明确数量的可变参数，在使用时在函数中以表的形式获取。</p>\n<pre><code class=\"line-numbers\">function Sum(a,b,c,...)\n    local arg=&#123;...&#125; --将可变参数存储到arg表中\n    for key, value in pairs(arg) do\n        print(value) -- 9 7 4 10\n    end\nend\n\nSum(5,4,8,9,7,4,10)\n</code></pre>\n<h4>使用命名参数</h4>\n<p>由于 lua 使用弱类型的缘故，我们可以像这样使用命名参数，在这种情况下调用函数可以写为<code>函数名 &#123;参数&#125;</code>的形式。</p>\n<pre><code class=\"line-numbers\">function Show(arg)\n    print(arg.name..'  '..arg.title)\nend\n\nShow&#123;name='小屋',title='学习lua'&#125;\n</code></pre>\n<h3>深入理解函数</h3>\n<p>Lua 中的函数是带有词法定界（lexical scoping）的第一类值（first-class values）。<br>\n<font color=blue>第一类值</font>指：在 Lua 中函数和其他值（数值、字符串）一样，函数可以被存放在变量中，也可以存放在表中，可以作为函数的参数，还可以作为函数的返回值。</p>\n<p><font color=blue>词法定界</font>指：被嵌套的函数可以访问他外部函数中的变量。这一特性给 Lua 提供了强大的编程能力。</p>\n<h4>匿名函数</h4>\n<p>得益于上面的第一条规则，其实我们声明函数，本是 <code>fac=function(arg) body end</code>。<br>\n这个语句创建了一个匿名函数，并把这个函数赋值为 fac，我们就可以称这个函数为 fac 了。<br>\n在<strong><code>table.sort()</code></strong>函数中使用匿名函数：</p>\n<p>在函数中接收 2 个参数，第一个参数接收一个表，第二个参数接收一个<strong>比较函数</strong>。</p>\n<pre><code class=\"line-numbers\">arr=&#123;\n    &#123;name='A',age=16&#125;,\n    &#123;name='B',age=20&#125;,\n    &#123;name='C',age=9&#125;,\n&#125;\ntable.sort(arr,function (a,b)\n    return a.age>b.age\nend)\n\nfor key, value in pairs(arr) do\n    for k, v in pairs(value) do\n        print(k,v)\n    end\nend\n</code></pre>\n<p>以其他函数作为参数的函数在 Lua 中被称作高级函数，高级函数在 Lua 中并没有特<br>\n权，只是 Lua 把函数当作第一类函数处理的一个简单的结果。</p>\n<h4>闭包</h4>\n<p>当一个函数内容嵌套另一个函数时，被嵌套的匿名函数还可以访问第一函数中的参数，这就被称为闭包；事实上仅有很少的语言支持这样的特性。<br>\n来看看下面这个例子：</p>\n<pre><code class=\"line-numbers\">function NewCount()\n    local i=0\n    return function ()\n        i=i+1\n        return i\n    end\nend\n</code></pre>\n<p>在匿名函数中，我们依然可以直接正确的访问 i。</p>\n<hr />\n<p>现在，假如我们这样调用这个函数结果是怎样呢？</p>\n<pre><code class=\"line-numbers\">local c1=NewCount()\nlocal c2=NewCount()\nprint(c1())\nprint(c1())\nprint(c2())\nprint(c1())\n</code></pre>\n<p>!{函数闭包}(<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjAvMDIvMDIvcjJmdHBHUGpzVmxtcXlnLnBuZw==\">https://i.loli.net/2020/02/02/r2ftpGPjsVlmqyg.png</span>)<br>\n 可以发现，函数的结果并非我们的预期，在第一函数体中的 i 的值可以被保留下来，而且 c1 和 c2 的保存值并不相同，这就是闭包。<br>\n<strong>Ps</strong>：我们把这个 i 称为<font color=gree>外部的局部变量或者 <strong>upvalue</strong></font>。<br>\n简单的说闭包是一个函数加上它可以正确访问的 upvalues。如果我们再次调用 newCounter，将创建一个新的局部变量 i，因此我们得到了一个作用在新的变量 i 上的新闭包。</p>\n<p><strong>分析</strong>：c1 和 c2 是作用同一个局部变量上的不同实例上的两个闭包。</p>\n<h4>使用闭包重写函数</h4>\n<p>闭包在完全不同的上下文中也是很有用途的。因为函数被存储在普通的变量内我们<br>\n可以很方便的重定义或者预定义函数。通常当你需要原始函数有一个新的实现时可以重<br>\n定义函数。例如你可以重定义 sin 使其接受一个度数而不是弧度作为参数：</p>\n<pre><code class=\"line-numbers\">local oldSin=math.sin\nmath.sin=function (x)\n    return oldSin(x*math.pi/180)\nend\n</code></pre>\n<p>通过这个特性我们可以对原函数进行修改，在某些时刻可以构建运行危险代码的沙盘。</p>\n<h4>局部函数</h4>\n<p>Lua 中函数既可以作为全局变量也可以作为局部变量，函数作为 table 的域。<br>\n<strong>使用表声明函数</strong>：</p>\n<pre><code class=\"line-numbers\">Lib=&#123;&#125;\nLib.foo=function (x,y)\n    return x+y\nend\nLib.goo=function (x,y)\n    return x-y\nend\n\nLib=&#123;\n    foo=function (x,y)\n        return x+y\n    end,\n    goo=function (x,y)\n        return x-y\n    end\n&#125;\n\nLib=&#123;&#125;\nfunction Lib.foo(x,y)\n    return x+y\nend\nfunction Lib.goo(x,y)\n    return x-y\nend\n\n</code></pre>\n<p><strong>Ps</strong>：在使用递归函数时，要注意要先声明函数在调用。</p>\n<h4>尾调用</h4>\n<p>尾调用是一种类似在函数结尾的 goto 调用，当函数最后一个动作是调用另外一个函<br>\n数时，我们称这种调用尾调用。<br>\n<strong>Ps</strong>:Lua 中尾调用不消耗栈空间，由于尾调用不需要使用栈空间，那么尾调用递归的层次可以无限制的</p>\n",
            "tags": [
                "Lua"
            ]
        },
        {
            "id": "https://www.fasty97.top/2020/02/01/Lua-%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89%E8%A1%A8&%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/",
            "url": "https://www.fasty97.top/2020/02/01/Lua-%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89%E8%A1%A8&%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/",
            "title": "Lua-基础（二）表&流程控制",
            "date_published": "2020-02-01T11:31:38.000Z",
            "content_html": "<h3>构建表</h3>\n<p>构造器是创建和初始化表的表达式。表是 Lua 特有的功能强大的东西。最简单的构<br>\n造函数是 {}，用来创建一个空表。可以直接初始化数组:<br>\n<strong><font color=red>表的序号从 1 开始，并非 0</font>。</strong><br>\n<strong>Ps</strong>：假如空引用，lua 也不会报错，会输出 nil。</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">local</span> numbers<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"numbers数据:\"</span><span class=\"token operator\">..</span><span class=\"token function\">tostring</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">-- 输出 1</span></pre></td></tr></table></figure><h4>构建自定义对象</h4>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">local</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>arr<span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span><span class=\"token string\">'xiao'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>arr<span class=\"token punctuation\">.</span>age<span class=\"token operator\">=</span><span class=\"token number\">16</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'arr的数据：'</span><span class=\"token operator\">..</span><span class=\"token string\">'  name:'</span><span class=\"token operator\">..</span>arr<span class=\"token punctuation\">.</span>name<span class=\"token operator\">..</span><span class=\"token string\">'   age: '</span><span class=\"token operator\">..</span>arr<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4>表的组成</h4>\n<p>表，可以包含任何类型的元素，也可以嵌套</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>arr<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>x<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>tip<span class=\"token operator\">=</span><span class=\"token string\">'text'</span><span class=\"token punctuation\">,</span>func<span class=\"token operator\">=</span>print<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4>构造注意事项</h4>\n<p>如果真的需要索引从 0 开始：<br>\n<strong>Ps</strong>：极力<font color=red>不推荐</font>这么做，这么做将不能使用很多标准库。</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>arr<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"Sunday\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Monday\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Tuesday\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在构造表时既可以使用<code>,</code>分隔元素也可以使用<code>；</code>分隔元素。</p>\n<h3>流程控制</h3>\n<p>我们来看看 lua 中的流程控制语法～</p>\n<h4>分支</h4>\n<p>在 lua 中，每一个代码块的结束都要以<strong>end</strong>结尾（有点 c++ 的味道）</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token number\">3</span><span class=\"token operator\">></span><span class=\"token number\">0</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token keyword\">false</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AAA\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"BBB\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">local</span> a<span class=\"token operator\">=</span><span class=\"token number\">8</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">if</span> a<span class=\"token operator\">></span><span class=\"token number\">8</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a>8'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">elseif</span> a<span class=\"token operator\">></span><span class=\"token number\">5</span>  <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a>5'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">elseif</span> a<span class=\"token operator\">></span><span class=\"token number\">3</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a>3'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'不满足'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><h4>循环</h4>\n<p>使用步长 for 循环（可省略步长，默认为 1）</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- for 循环</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">-- 1 起点 10 终点 2 步长</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'正向数据为:'</span><span class=\"token operator\">..</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'负向数据为：'</span><span class=\"token operator\">..</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><p><strong>Ps</strong>：在循环中不要改变控制变量的值，如果需要跳出循环可以使用<code>break</code>关键字。</p>\n<p>使用 for 循环遍历表：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>arr<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"Sunday\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Monday\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Tuesday\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> key<span class=\"token punctuation\">,</span> value <span class=\"token keyword\">in</span> <span class=\"token function\">pairs</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>key<span class=\"token operator\">..</span><span class=\"token string\">'   '</span><span class=\"token operator\">..</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><p>while 循环</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">local</span> a<span class=\"token operator\">=</span><span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">while</span> a<span class=\"token operator\">></span><span class=\"token number\">0</span> <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    a<span class=\"token operator\">=</span>a<span class=\"token operator\">-</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure>",
            "tags": [
                "Lua"
            ]
        },
        {
            "id": "https://www.fasty97.top/2020/02/01/Lua-%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89Say%20Hi/",
            "url": "https://www.fasty97.top/2020/02/01/Lua-%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89Say%20Hi/",
            "title": "Lua-基础（一）Say Hi",
            "date_published": "2020-02-01T06:01:49.000Z",
            "content_html": "<blockquote>\n  本系列将从零开始学习Lua的基本语法，用于之后使用<font color=gree>xLua</font>进行unity<font color=red>热更新</font>~\n</blockquote>\n<h3>使用Vscode开发Lua</h3>\n<p>至少要下载 Lua 和 LuaDebug 这 2 个扩展～<br>\n<img data-src=\"https://i.loli.net/2020/02/01/raxtmuBAnLNIqQO.png\" alt=\"\"><br>\n 看到 LuaDebug 的作者 actboy168，我有点惊讶，actboy168 是大名鼎鼎的 ydwe 作者之一，在以前自己玩 we 的时候用的编辑器就是 actboy168 大佬的，后面听说支持 lua 来代替 jass 编写游戏逻辑（那时候已经弃坑～）；好的，闲话不多说，我们来编写我们的第一个脚本。</p>\n<ul>\n<li>创建一个空文件夹并用vscode打开</li>\n<li>创建一个test.lua文件</li>\n<li>编写一行代码 <code>print(\"Hi,Lua~\")</code>（也可以使用<font color=red>'' 单引号</font>）</li>\n</ul>\n<p><img data-src=\"https://i.loli.net/2020/02/01/w4ds3ZquOteQX8p.png\" alt=\"\"></p>\n<h3>基本使用</h3>\n<h4>数据类型</h4>\n<p>在 lua 中和 python 类型可以直接声明并使用，无需使用类型名，lua 自动分析数据类型。<br>\nlua 的数据类型为（8 个）：</p>\n<ul>\n<li>nil 空</li>\n<li>boolean 布尔型</li>\n<li>number 数字型</li>\n<li>function 函数型</li>\n<li>string 字符串型</li>\n<li>userdata 用户自定义类型</li>\n<li>thread 线程型</li>\n<li>table 表型</li>\n</ul>\n<p>可以使用<code>type()</code>来查看类型～<br>\nPs: 在 lua 中不强制使用；结尾</p>\n<pre><code class=\"line-numbers\">--lua类型\nprint(type(3.4))\nprint(type(\"JK\"))\nprint(type(print))\nprint(type(3>5))\nprint(type(nil))\n</code></pre>\n<h5>Function类型</h5>\n<p>Function 类型有什么用呢？使用 Function 类型可以实现将函数作为函数的参数传递（类似 c++ 中的句柄，C# 中的委托）；有了这一特性，大大加强了代码的灵活性～</p>\n<h5>Userdata类型</h5>\n<p>userdata 类型可以表述用户自己创建的数据结构，也可以表示调用 c 语言函数库创建的新类型。</p>\n<h4>变量类型</h4>\n<p><font color=blue>全局变量</font>：全局变量是在整个程序中都可以使用的，默认声明的就是全局变量。<br>\n<font color=blue>局部变量</font>: 局部变量在全局变量前添加<code>local</code>关键字声明的。</p>\n<pre><code class=\"line-numbers\">local a=100 --局部变量\nb='Fasty' --全局变量\n</code></pre>\n<h4>运算符</h4>\n<p>其他的数学运算符和其他语言是一致的，在这里看一下逻辑运算符<code>and or not</code>。<br>\n在 lua 中认为 false 和 nil 为假，其他为真。（0 也为真，c 语言中认为 0 为假，非 0 为真）<br>\n值得注意的是使用逻辑运算符并非返回逻辑值：</p>\n<pre><code class=\"line-numbers\">local aa = 4 and 5 -- 若a为false则返回a，否则返回b  返回5\naa=nil and 7  --返回nil\n\nlocal bb= 7 or 8 --若a为true则返回a，否则返回b 返回7\naa=nil or 8 --返回8\n</code></pre>\n<p><font color=gree>小技巧:</font>使用 <code>aa= nil or 5</code> 可以判断 aa 是否为 nil，若为则赋值为 5。</p>\n<p>not 则为取反，一直返回布尔值。</p>\n<p>Ps：连接字符串使用<code>…</code>，如<code>A…B</code>。</p>\n",
            "tags": [
                "Lua"
            ]
        }
    ]
}