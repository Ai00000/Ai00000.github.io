{
    "version": "https://jsonfeed.org/version/1",
    "title": "指尖小屋 • All posts by \"《effective c#》\" category",
    "description": "学习的过程大概就是学了忘,忘了学，抽空多停下来总结，不要冲的太前。",
    "home_page_url": "https://www.fasty97.top",
    "items": [
        {
            "id": "https://www.fasty97.top/2022/06/30/Effective%20C#%20%E7%AC%94%E8%AE%B01/",
            "url": "https://www.fasty97.top/2022/06/30/Effective%20C#%20%E7%AC%94%E8%AE%B01/",
            "title": "Effective C# 笔记1",
            "date_published": "2022-06-29T17:16:30.000Z",
            "content_html": "<blockquote>\n<p>今天我要再开一个新坑，学习一下《Effective C#》, 百闻不如一见，确实有必要好好梳理一下自己的代码方式。</p>\n</blockquote>\n<h2 id=\"第1条优先使用隐式类型的局部变量\"><a class=\"markdownIt-Anchor\" href=\"#第1条优先使用隐式类型的局部变量\">#</a> 第 1 条：优先使用隐式类型的局部变量</h2>\n<p>用 var 来声明变量而不指明其类型，可以令开发者把注意力更多地集中在名称上面，从而更好地了解其含义。</p>\n<h2 id=\"第2条考虑用readonly代替const\"><a class=\"markdownIt-Anchor\" href=\"#第2条考虑用readonly代替const\">#</a> 第 2 条：考虑用 readonly 代替 const</h2>\n<p>C# 有两种常量，一种是编译期（compile-time）的常量，另一种是运行期（runtime）的常量，它们的行为大不相同。常量如果选得不合适，那么程序开发工作可能会受影响。编译期的常量虽然能令程序运行得稍快一点，但却远不如运行期的常量那样灵活。只有当程序性能极端重要且常量取值不会随版本而变化的情况下，才可以考虑选用这种常量。</p>\n<blockquote>\n<p>运行期的常量用 <code>readonly</code>  关键字来声明，编译期的常量用 <code>const</code>  关键字来声明</p>\n</blockquote>\n",
            "tags": []
        }
    ]
}