{
    "version": "https://jsonfeed.org/version/1",
    "title": "指尖小屋 • All posts by \"《unity3d网络游戏实战》\" category",
    "description": "学习的过程大概就是学了忘,忘了学，抽空多停下来总结，不要冲的太前。",
    "home_page_url": "https://www.fasty97.top",
    "items": [
        {
            "id": "https://www.fasty97.top/2020/01/17/%E3%80%8AUnity3D%E7%BD%91%E7%BB%9C%E6%B8%B8%E6%88%8F%E5%AE%9E%E6%88%98%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%EF%BC%88%E5%9B%9B%EF%BC%89Poll&Select/",
            "url": "https://www.fasty97.top/2020/01/17/%E3%80%8AUnity3D%E7%BD%91%E7%BB%9C%E6%B8%B8%E6%88%8F%E5%AE%9E%E6%88%98%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%EF%BC%88%E5%9B%9B%EF%BC%89Poll&Select/",
            "title": "《Unity3D网络游戏实战》学习记录（四）Poll&Select",
            "date_published": "2020-01-17T06:09:32.000Z",
            "content_html": "<blockquote>\n  试想一下，有没有一种方法可以将<font color=red>异步</font>的程序改为<font color=blue>同步</font>，而又持有异步的效果呢？\n</blockquote>\n<h3>Poll</h3>\n<p><font color=4e72b8>意义：使用同步的方式解决异步问题。</font><br>\n我们分析一下之前的程序逻辑，会发现我们使用 beginxxx 来开启新线程处理新的 socket，但是我们的客户端并不是实时的于服务器进行交互的（只在进行交互时，整个线程才是有效的，平时都处于阻塞等待状态。）<br>\n有这么一种方式：<br>\n<code>if (socket 有可读数据) socket.Receive ()</code><br>\n<code>if (socket 缓冲区可写) socket.Send ()</code><br>\n<code>if (socket 错误) 处理错误</code><br>\n只要在阻塞方法前，加上一层判断，有数据可读才读，有数据可写才写，这样不就解决了程序卡住的问题吗？<br>\nMs 提供了 Poll 方法：</p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> Poll</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> microSeconds；<span class=\"token comment\">// 回应时间（ms） -1 一直等待  0 非阻塞</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    SelectMode mode；<span class=\"token comment\">//SelectRead 是否可读 SelectWrite 是否可写 SelectError 是否发生错误</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4>使用Poll改进客户端和服务器</h4>\n<ul>\n<li><font size=5px color=red>客户端</font>\n对于客户端只需要在update中加一个<code>if(socket.Poll(0,SelectMode.SelectRead)) 执行读取</code>就可以了。</li>\n<li><font size=5px color=green>服务器</font>\n对于服务器，需要在主循环中对所有已连接的客户端进行状态监测，在其客户端可读时（即有数据发送给服务器时）进行读取操作。</li>\n</ul>\n<h3>Select</h3>\n<p><font color=4e72b8>意义：解决 Poll 下 Cpu 占用过高的问题</font></p>\n在前面没有提到cpu占用的事情，这里说一下，使用poll时，我们会在update中持续监听，程序在同一线程中非阻塞式的处理请求，会导致cpu占用过高的问题。\n<h4>Select的解决思路</h4>\n<ol>\n<li>同时检测多个socket的状态</li>\n<li>将需操作的socket放入一个集合中</li>\n<li>如果没有可读写的socket就阻塞挂起</li>\n</ol>\n<p><strong>select 原型</strong></p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Select</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">IList</span> checkRead<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 返回可读 Socket List</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">IList</span> checkWrite<span class=\"token punctuation\">,</span>   <span class=\"token comment\">// 可写</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">IList</span> checkError<span class=\"token punctuation\">,</span>   <span class=\"token comment\">// 错误</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> microSeconds    <span class=\"token comment\">// 超时时间</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><font color=blue>【2020 年 1 月 17 日 18:40:19 下午】</font><br>\n<strong>继续更新</strong></p>\n<p>使用 Select 时，我们需要定义几个列表，如上面原型所示这些列表应当实现了<font size=4px color=red> IList </font>接口。</p>\n<ol>\n<li>创建可读列表CheckRead</li>\n<li>将所有连接Socket放入CheckRead中</li>\n<li>使用Socket.Select()对checkRead中的可读socket进行筛选</li>\n<li>对筛选后的可读对象进行读取</li>\n</ol>\n<p>通过以上步骤，我们就使用 Select 完成了筛选，非常简单吧！</p>\n<p>从下一章开始按书的进度，我们就使用学习到的 Socket 知识写一个多人大乱斗游戏试试吧 ✌️ ~</p>\n",
            "tags": [
                "读书笔记"
            ]
        },
        {
            "id": "https://www.fasty97.top/2020/01/16/%E3%80%8AUnity3D%E7%BD%91%E7%BB%9C%E6%B8%B8%E6%88%8F%E5%AE%9E%E6%88%98%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%89%EF%BC%89%E8%81%8A%E5%A4%A9%E5%AE%A4/",
            "url": "https://www.fasty97.top/2020/01/16/%E3%80%8AUnity3D%E7%BD%91%E7%BB%9C%E6%B8%B8%E6%88%8F%E5%AE%9E%E6%88%98%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%89%EF%BC%89%E8%81%8A%E5%A4%A9%E5%AE%A4/",
            "title": "《Unity3D网络游戏实战》学习记录（三）聊天室",
            "date_published": "2020-01-16T06:59:29.000Z",
            "content_html": "<p>在之前的基础上其实我们只需要将客户端发送给服务器的数据在服务器分发给连接的所有客户端即可实现聊天室的功能。<br>\n不过在这里我对服务器端的代码重新优化了一下。</p>\n<h3>客户端连接实例</h3>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">/// 客户端连接实例</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">class</span> <span class=\"token class-name\">ClientEntity</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Socket</span> Socket <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> ReadBuff <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">/// 有效数据长度</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> DataLength <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3>主要代码</h3>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Socket</span> Socket <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">List<span class=\"token punctuation\">&lt;</span>ClientEntity<span class=\"token punctuation\">></span></span> ClientEntities <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 所有连接的客户端实例</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hi，服务器~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            ClientEntities <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>ClientEntity<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">region</span> 绑定ip</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token class-name\">IPAddress</span> ipAddress <span class=\"token operator\">=</span> IPAddress<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token class-name\">IPEndPoint</span> ipEndPoint <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">IPEndPoint</span><span class=\"token punctuation\">(</span>ipAddress<span class=\"token punctuation\">,</span> <span class=\"token number\">2233</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            Socket <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Socket</span><span class=\"token punctuation\">(</span>AddressFamily<span class=\"token punctuation\">.</span>InterNetwork<span class=\"token punctuation\">,</span> SocketType<span class=\"token punctuation\">.</span>Stream<span class=\"token punctuation\">,</span> ProtocolType<span class=\"token punctuation\">.</span>Tcp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            Socket<span class=\"token punctuation\">.</span><span class=\"token function\">Bind</span><span class=\"token punctuation\">(</span>ipEndPoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            Socket<span class=\"token punctuation\">.</span><span class=\"token function\">Listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 最多支持同时监听 10 个客户端</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[服务器]启动成功！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endregion</span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token comment\">// 绑定 Accept</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            Socket<span class=\"token punctuation\">.</span><span class=\"token function\">BeginAccept</span><span class=\"token punctuation\">(</span>AcceptCallBack<span class=\"token punctuation\">,</span> Socket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3>AcceptCallBack</h3>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">AcceptCallBack</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IAsyncResult</span> ar<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[服务器]有新客户端连接\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> severSocket <span class=\"token operator\">=</span> ar<span class=\"token punctuation\">.</span>AsyncState <span class=\"token keyword\">as</span> <span class=\"token class-name\">Socket</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> clientSocket <span class=\"token operator\">=</span> severSocket<span class=\"token punctuation\">.</span><span class=\"token function\">EndAccept</span><span class=\"token punctuation\">(</span>ar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 创建客户端连接</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> clientEntity <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ClientEntity</span> <span class=\"token punctuation\">&#123;</span> Socket <span class=\"token operator\">=</span> clientSocket<span class=\"token punctuation\">,</span> ReadBuff <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">byte</span></span><span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 创建客户端实例</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                ClientEntities<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>clientEntity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token comment\">// 开始 Receive</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                clientEntity<span class=\"token punctuation\">.</span>Socket<span class=\"token punctuation\">.</span><span class=\"token function\">BeginReceive</span><span class=\"token punctuation\">(</span>clientEntity<span class=\"token punctuation\">.</span>ReadBuff<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> clientEntity<span class=\"token punctuation\">.</span>ReadBuff<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">,</span> SocketFlags<span class=\"token punctuation\">.</span>None<span class=\"token punctuation\">,</span> ReceiveCallBack<span class=\"token punctuation\">,</span> clientEntity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token comment\">// 继续 Accept</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                Socket<span class=\"token punctuation\">.</span><span class=\"token function\">BeginAccept</span><span class=\"token punctuation\">(</span>AcceptCallBack<span class=\"token punctuation\">,</span> Socket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SocketException</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[服务器Accept-Error]\"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span>ErrorCode <span class=\"token operator\">+</span> <span class=\"token string\">\"-\"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3>ReceiveCallBack</h3>\n<pre><code class=\"language-csharp line-numbers\">  private static void ReceiveCallBack(IAsyncResult ar)\n        &#123;\n            try\n            &#123;\n                var clientEntity = ar.AsyncState as ClientEntity;   //获取传过来的客户端Socket\n                var count = clientEntity.Socket.EndReceive(ar);\n                if (count == 0)\n                &#123;\n                    //关闭客户端连接\n                    clientEntity.Socket.Close();\n                    ClientEntities.Remove(clientEntity);\n                    Console.WriteLine(\"[服务器]一个客户端已断开连接\");\n\n                    return;\n                &#125;\n                var reciveStr = Encoding.UTF8.GetString(clientEntity.ReadBuff, 0, count); //读取客户端数据\n    \n                Console.WriteLine(\"[服务器]收到来自客户端数据：\" + reciveStr);\n\n\n                var sendBytes = Encoding.UTF8.GetBytes(\"[服务器] 已收到来自客户端的消息：\");\n                clientEntity.DataLength = count;\n                //进行数据分发\n                foreach (var item in ClientEntities)\n                &#123;\n                    item.Socket.BeginSend(sendBytes, 0, count, SocketFlags.None, SendCallBack, clientEntity);\n                &#125;\n    \n                //继续获取数据\n                clientEntity.Socket.BeginReceive(clientEntity.ReadBuff, 0, clientEntity.ReadBuff.Length, SocketFlags.None, ReceiveCallBack, clientEntity);\n            &#125;\n            catch (SocketException e)\n            &#123;\n    \n                Console.WriteLine(\"[服务器Receive-Error]\" + e.ErrorCode + \"-\" + e.Message);\n            &#125;\n        &#125;\n</code></pre>\n<h3>SendCallBack</h3>\n<pre><code class=\"language-csharp line-numbers\"> private static void SendCallBack(IAsyncResult ar)\n        &#123;\n            var clientEntity = ar.AsyncState as ClientEntity;\n            Console.WriteLine(\"[服务器]已向客户端发送数据:\" + Encoding.UTF8.GetString(clientEntity.ReadBuff, 0, clientEntity.DataLength));\n        &#125;\n</code></pre>\n<h3>运行截图：</h3>\n<p>!{运行截图}(<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjAvMDEvMTYvMjQ4RnFOS0dtN2poZ3YxLnBuZw==\">https://i.loli.net/2020/01/16/248FqNKGm7jhgv1.png</span>)</p>\n<p>[toc]</p>\n",
            "tags": []
        },
        {
            "id": "https://www.fasty97.top/2020/01/07/%E3%80%8AUnity3D%E7%BD%91%E7%BB%9C%E6%B8%B8%E6%88%8F%E5%AE%9E%E6%88%98%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%EF%BC%88%E4%BA%8C%EF%BC%89%E5%A4%9A%E7%BA%BF%E7%A8%8B/",
            "url": "https://www.fasty97.top/2020/01/07/%E3%80%8AUnity3D%E7%BD%91%E7%BB%9C%E6%B8%B8%E6%88%8F%E5%AE%9E%E6%88%98%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%EF%BC%88%E4%BA%8C%EF%BC%89%E5%A4%9A%E7%BA%BF%E7%A8%8B/",
            "title": "《Unity3D网络游戏实战》学习记录（二）多线程",
            "date_published": "2020-01-07T06:00:35.000Z",
            "content_html": "<p><font color=green>[begin] 在 [/begin]</font>第一章的学习内容中我们已经完成了基本的 Socket 通信，但是在第一章中我们只能处理一个客户端的消息。<br>\n在实际游戏中，我们服务器需要对多个客户端进行监听和处理。</p>\n<h3>Begin XXX</h3>\n<p>每一个同步 API 对应着两个异步 API，分别是在原名称前面加上 Begin 和 End（如 BeginConnect 和 EndConnect）。使用异步程序可以防止程序卡住  。</p>\n<h4>例如：BenginConnect</h4>\n<table>\n<thead>\n<tr>\n  <th>参数</th>\n  <th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td>host</td>\n  <td>远程主机ip地址</td>\n</tr>\n<tr>\n  <td>port</td>\n  <td>端口号</td>\n</tr>\n<tr>\n  <td>requestCallback</td>\n  <td>异步回调函数，其函数必须包含一个实现 <font color=red><strong>IAsynResult</strong></font>的对象</td>\n</tr>\n<tr>\n  <td>state</td>\n  <td>一个自定义对象，<strong>此对象会被传递给回调函数</strong></td>\n</tr>\n</tbody>\n</table>\n<p><strong>EndConnect</strong></p>\n<table>\n<thead>\n<tr>\n  <th>参数</th>\n  <th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td>asyncResult</td>\n  <td>接收一个异步结果对象</td>\n</tr>\n</tbody>\n</table>\n<p><font color=red>其他的都大致相同</font><br>\n[toc]</p>\n<h3>客户端</h3>\n<p>客户端使用 begin 和 end，修改为：</p>\n<pre><code class=\"language-csharp line-numbers\">using System;\nusing System.Net.Sockets;\nusing System.Text;\nusing System.Threading;\nusing UnityEngine;\nusing UnityEngine.UI;\npublic class Echo : MonoBehaviour\n&#123;\n    public Button linkBtn;\n    public Button sendBtn;\n    public InputField inputField;\n    public Text infoText;\n    //套接字\n    private Socket _socket;\n    //接收缓冲区\n    private byte[] _readBuff=new byte[1024];\n    private string _recvStr=string.Empty;\n\n\n\n    private void Start()\n    &#123;\n        linkBtn.onClick.AddListener(Connection);\n        sendBtn.onClick.AddListener(SendMessage);\n        //Timer线程计时器\n        var timer = new Timer((state) => &#123; print(\"时间到\"); &#125;,null,5000,0);\n    &#125;\n    \n    private void Update()\n    &#123;\n        infoText.text = \"接收到来自服务器的数据：\"+_recvStr;\n    &#125;\n    \n    /// <summary>\n    /// 连接\n    /// </summary>\n    void Connection()\n    &#123;\n        _socket=new Socket(SocketType.Stream,ProtocolType.Tcp);\n        //异步进行连接\n        _socket.BeginConnect(\"127.0.0.1\", 8888, ConnectCallback, _socket);\n        Debug.Log(\"开始连接...\");\n        // _socket.Connect(\"127.0.0.1\",8888);\n    &#125;\n    /// <summary>\n    /// 连接回调\n    /// </summary>\n    /// <param name=\"ar\"></param>\n    void ConnectCallback(IAsyncResult ar)\n    &#123;\n        try\n        &#123;\n            var socket = ar.AsyncState as Socket;\n            socket?.EndConnect(ar);    //连接完毕\n            Debug.Log(\"连接成功！\");\n            //开始监听服务器端回复\n            socket?.BeginReceive(_readBuff, 0, _readBuff.Length, 0, ReceiveCallback, socket);\n        &#125;\n        catch (SocketException e)\n        &#123;\n            Debug.Log(\"Socket连接错误:\"+e);\n            throw;\n        &#125;\n    &#125;\n\n\n    /// <summary>\n    /// 接收回调\n    /// </summary>\n    /// <param name=\"ar\"></param>\n    void ReceiveCallback(IAsyncResult ar)\n    &#123;\n        //ps：作者在这里提到，假如在send缓冲区的数据量太多，并且删除服务端receive相关的内容，使这些数据不能得到及时的释放，这时候客户端就会卡住。\n        //所以我们也需要对send进行异步处理，防止堵塞。\n        try\n        &#123;\n            var socket = ar.AsyncState as Socket;\n            var count = socket.EndReceive(ar);\n            //注意在unity中，UI对象只能在主线程中更新，由于异步回调是由其他线程更新的，所以我只在这儿对_recvStr进行记录\n            //并在主线程update中对UI对象进行更新。\n            _recvStr = Encoding.UTF8.GetString(_readBuff, 0, count);\n    \n            socket.BeginReceive(_readBuff, 0, _readBuff.Length, 0, ReceiveCallback, socket);\n        &#125;\n        catch (SocketException e)\n        &#123;\n            Debug.Log(\"Socket错误：\"+e);\n        &#125;\n    &#125;\n    \n    /// <summary>\n    /// 发送消息\n    /// </summary>\n    void SendMessage()\n    &#123;\n        var sendStr = inputField.text;\n        var sendBytes = System.Text.Encoding.UTF8.GetBytes(sendStr);\n        // _socket.Send(sendBytes);\n        /*\n         * 值得注意的是，send方法的过程只是将数据写入到缓冲区，由操作系统进行重传和确认。\n         * send成功只表示，数据成功吸入缓冲区，并不代表对方已经收到数据。\n         */\n        _socket.BeginSend(sendBytes, 0, sendBytes.Length, 0, SendCallback, _socket);\n    \n    &#125;\n    \n    /// <summary>\n    /// Send回调\n    /// </summary>\n    /// <param name=\"ar\"></param>\n    void SendCallback(IAsyncResult ar)\n    &#123;\n        try\n        &#123;\n            var socket = ar.AsyncState as Socket;\n            var count = socket?.EndSend(ar);\n            /*\n             * 在这里作者提到，一般来说收发的数据长度应当保持一致，但是当我们的数据大小超过缓冲区的大小时，我们需要再次调用相关的send或reivce方法\n             * 发送或接收剩余的数据。（在后面的章节再介绍）\n             */\n            Debug.Log(\"socket 发送成功 发送字节数：\"+count);\n        &#125;\n        catch (SocketException e)\n        &#123;\n           Debug.Log(\"Socket Send 错误：\"+e);\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<h3>服务器</h3>\n<p>在上一章中，我们的服务器使用单线程的阻塞，也就是说每次只能处理一个客户端的请求，现在我们也将服务器改为多线程模式，让他可以同时处理多个线程。（多个客户端请求）<br>\n其代码实现如下：</p>\n<h4>创建一个clientState类存储客户端状态</h4>\n<pre><code class=\"language-csharp line-numbers\">using System.Net.Sockets;\n\nnamespace netWork_Server\n&#123;\n    /// <summary>\n    /// 连接状态\n    /// </summary>\n    public class ClientState\n    &#123;\n        public Socket Socket &#123; get; set; &#125;\n        public byte[] ReadBuff &#123; get; set; &#125;\n\n        public ClientState()\n        &#123;\n            ReadBuff=new byte[1024];\n        &#125;\n    &#125;\n&#125;\n\n</code></pre>\n<h4>主代码</h4>\n<pre><code class=\"language-csharp line-numbers\">using System;\nusing System.Collections.Generic;\nusing System.Net;\nusing System.Net.Sockets;\nusing System.Text;\n\nnamespace netWork_Server\n&#123;\n\n\n    internal class Program\n    &#123;\n        private static Socket socket;\n        static  Dictionary<Socket,ClientState> _clientStates=new Dictionary<Socket, ClientState>();\n    \n        public static void Main(string[] args)\n        &#123;\n\n\n            Console.WriteLine(\"Hi\");\n    \n            socket=new Socket(AddressFamily.InterNetwork,SocketType.Stream,ProtocolType.Tcp);\n            IPAddress ipAddress = IPAddress.Parse(\"127.0.0.1\");\n            IPEndPoint ipEndPoint=new IPEndPoint(ipAddress,8888);\n            socket.Bind(ipEndPoint);\n            //listen\n            socket.Listen(0);\n            Console.WriteLine(\"[服务器] 启动成功\");\n            //Accept\n            //当客户端连接上服务器时，调用AcceptCallback\n            socket.BeginAccept(AcceptCallback,socket);\n            Console.ReadLine();\n        &#125;\n    \n        /// <summary>\n        /// Accept回调\n        /// </summary>\n        /// <param name=\"ar\"></param>\n        private static void AcceptCallback(IAsyncResult ar)\n        &#123;\n            try\n            &#123;\n                Console.WriteLine(\"[服务器] 连接到新客户端\");\n                Socket listenfd=ar.AsyncState as Socket;\n                Socket clientfd = listenfd.EndAccept(ar);\n                ClientState state=new ClientState();\n                state.Socket = clientfd;\n                _clientStates.Add(clientfd,state);\n                //进行Receive\n                clientfd.BeginReceive(state.ReadBuff, 0, 1024, 0,ReceiveCallback, state);\n                //继续Accept\n                listenfd.BeginAccept(AcceptCallback, listenfd);\n            &#125;\n            catch (SocketException e)\n            &#123;\n                Console.WriteLine(\"Socket Accept错误：\"+e);\n                throw;\n            &#125;\n    \n        &#125;\n    \n        /// <summary>\n        /// Receive回调\n        /// </summary>\n        /// <param name=\"ar\"></param>\n        static void ReceiveCallback(IAsyncResult ar)\n        &#123;\n            try\n            &#123;\n                var state = ar.AsyncState as ClientState;\n                var clientfd = state.Socket;\n                int count = clientfd.EndReceive(ar);\n                //关闭客户端\n                if (count==0)\n                &#123;\n                    clientfd.Close();\n                    _clientStates.Remove(clientfd);\n                    Console.WriteLine(\"Socket Close!\");\n                    return;\n                &#125;\n    \n                string recvStr = Encoding.UTF8.GetString(state.ReadBuff,0,count);\n                Console.WriteLine(\"[客户端]\"+recvStr);\n                byte[] sendBytes = Encoding.UTF8.GetBytes(\"echo\" + recvStr);\n    \n                clientfd.Send(sendBytes);\n                //继续获取数据\n                clientfd.BeginReceive(state.ReadBuff, 0, 1024, 0, ReceiveCallback, state);\n    \n            &#125;\n            catch (SocketException e)\n            &#123;\n                Console.WriteLine(\"Socket Receive 错误：\"+e);\n            &#125;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<h3>进行会话</h3>\n<p>我们将客户端生成一份，让生成的客户端和编辑器客户端同时与服务器连接并进行会话操作。<br>\n其效果如图所示：<br>\n!{服务器端}(<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjAvMDEvMTQva1ZyUUlXcGVqWEJSbWFuLnBuZw==\">https://i.loli.net/2020/01/14/kVrQIWpejXBRman.png</span>)<br>\n!{客户端}(<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjAvMDEvMTQvSmRiYVJMcHQ1azFob2dzLnBuZw==\">https://i.loli.net/2020/01/14/JdbaRLpt5k1hogs.png</span>)</p>\n<h3>结语</h3>\n<p>这是这一章的前半部分，完成了在 socket 下的多线程模式，其中在字符编码部分，原书使用了 Default，这导致可能没法解析中文字符，所以我将其改为了固定的 UTF8 做解析。<br>\n感谢您读完这篇文章，在本章的下半部分将实现一个聊天室。</p>\n",
            "tags": [
                "读书笔记"
            ]
        },
        {
            "id": "https://www.fasty97.top/2020/01/06/%E3%80%8AUnity3D%E7%BD%91%E7%BB%9C%E6%B8%B8%E6%88%8F%E5%AE%9E%E6%88%98%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%80%EF%BC%89Echo/",
            "url": "https://www.fasty97.top/2020/01/06/%E3%80%8AUnity3D%E7%BD%91%E7%BB%9C%E6%B8%B8%E6%88%8F%E5%AE%9E%E6%88%98%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%80%EF%BC%89Echo/",
            "title": "《Unity3D网络游戏实战》学习记录（一）Echo",
            "date_published": "2020-01-06T14:51:34.000Z",
            "content_html": "<h3>序</h3>\n<p>这本书买了蛮久的，趁着寒假的时间拿出来学习一下，争取这个假期把这本书看完，把里面的实例代码都自己敲一遍，加深理解。<br>\n这是一个长期更新的系列：全书共<font color=red>十二章</font>就算是每个章节写一篇文章也至少要写十二篇文章，希望自己可以坚持着书看完，把博客写完。</p>\n<h3>Socket连接步骤</h3>\n<p><strong>示例图</strong></p>\n<pre><code>type=&quot;text/javascript&quot;&gt;document.write(&quot;graph TD;\\n    Client--&gt;|连接服务器|Connect;\\n    Connect--&gt;|发送消息|Send;\\n    Connect--&gt;|三次握手|Accept;\\n    Send--&gt;|接收服务器消息|Receive;\\n    Send--&gt;|向服务器发送数据|ServerReceive;\\n    Receive--&gt;|断开连接|Close;\\n    Close--&gt;|四次挥手|ServerClose;\\n    Server--&gt;|绑定Ip和端口|Bind;\\n    Bind--&gt;|开启监听|Listen;\\n    Listen--&gt;|接收客户端连接请求|Accept;\\n    Accept--&gt;|接收客户端数据|ServerReceive;\\n    ServerReceive--&gt;|给客户端发送数据|ServerSend;\\n    ServerSend--&gt;|发送数据给客户端|Receive;\\n    ServerSend--&gt;|断开连接|ServerClose;\\n&quot;);\n</code></pre>\n<h3>Echo</h3>\n<p>第一章主要讲解了网络的连接方式，在例子中初步实现了一个使用 Socket 的 TCP 通信的客户端和服务端案例。<br>\n客户端代码如下：</p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Net<span class=\"token punctuation\">.</span>Sockets</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine<span class=\"token punctuation\">.</span>UI</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Echo</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Button</span> linkBtn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Button</span> sendBtn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">InputField</span> inputField<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Text</span> infoText<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Socket</span> _socket<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        linkBtn<span class=\"token punctuation\">.</span>onClick<span class=\"token punctuation\">.</span><span class=\"token function\">AddListener</span><span class=\"token punctuation\">(</span>Connection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        sendBtn<span class=\"token punctuation\">.</span>onClick<span class=\"token punctuation\">.</span><span class=\"token function\">AddListener</span><span class=\"token punctuation\">(</span>SendMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">/// 连接</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Connection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        _socket<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Socket</span><span class=\"token punctuation\">(</span>SocketType<span class=\"token punctuation\">.</span>Stream<span class=\"token punctuation\">,</span>ProtocolType<span class=\"token punctuation\">.</span>Tcp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        _socket<span class=\"token punctuation\">.</span><span class=\"token function\">Connect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">8888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">/// 发送消息</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">SendMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> sendStr <span class=\"token operator\">=</span> inputField<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> sendBytes <span class=\"token operator\">=</span> System<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">.</span>Encoding<span class=\"token punctuation\">.</span>Default<span class=\"token punctuation\">.</span><span class=\"token function\">GetBytes</span><span class=\"token punctuation\">(</span>sendStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        _socket<span class=\"token punctuation\">.</span><span class=\"token function\">Send</span><span class=\"token punctuation\">(</span>sendBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token comment\">// 接收</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> readBuff <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">byte</span></span><span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">//Receive 方法接收一个 byte [] 存储接收到的数据，并返回数据的大小，会阻塞线程</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> count <span class=\"token operator\">=</span> _socket<span class=\"token punctuation\">.</span><span class=\"token function\">Receive</span><span class=\"token punctuation\">(</span>readBuff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> recvStr <span class=\"token operator\">=</span> System<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">.</span>Encoding<span class=\"token punctuation\">.</span>Default<span class=\"token punctuation\">.</span><span class=\"token function\">GetString</span><span class=\"token punctuation\">(</span>readBuff<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        infoText<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token string\">\"提示信息：\"</span> <span class=\"token operator\">+</span> recvStr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        _socket<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>服务器端代码如下：</p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Net</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Net<span class=\"token punctuation\">.</span>Sockets</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Text</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">netWork_Server</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">internal</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token class-name\">Socket</span> socket<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Socket</span><span class=\"token punctuation\">(</span>AddressFamily<span class=\"token punctuation\">.</span>InterNetwork<span class=\"token punctuation\">,</span>SocketType<span class=\"token punctuation\">.</span>Stream<span class=\"token punctuation\">,</span>ProtocolType<span class=\"token punctuation\">.</span>Tcp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token class-name\">IPAddress</span> ipAddress <span class=\"token operator\">=</span> IPAddress<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token class-name\">IPEndPoint</span> ipEndPoint<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">IPEndPoint</span><span class=\"token punctuation\">(</span>ipAddress<span class=\"token punctuation\">,</span><span class=\"token number\">8888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            socket<span class=\"token punctuation\">.</span><span class=\"token function\">Bind</span><span class=\"token punctuation\">(</span>ipEndPoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token comment\">//listen</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            socket<span class=\"token punctuation\">.</span><span class=\"token function\">Listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[服务器] 启动成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token comment\">//Accept</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token class-name\">Socket</span> connfd <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span><span class=\"token function\">Accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[服务器] Accept\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token comment\">//Receive</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token class-name\"><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> readBuff<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">byte</span></span><span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> count <span class=\"token operator\">=</span> connfd<span class=\"token punctuation\">.</span><span class=\"token function\">Receive</span><span class=\"token punctuation\">(</span>readBuff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> readStr <span class=\"token operator\">=</span> System<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">.</span>Encoding<span class=\"token punctuation\">.</span>Default<span class=\"token punctuation\">.</span><span class=\"token function\">GetString</span><span class=\"token punctuation\">(</span>readBuff<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[服务器接收] \"</span><span class=\"token operator\">+</span>readStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token comment\">//send</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> reStr <span class=\"token operator\">=</span> DateTime<span class=\"token punctuation\">.</span>Now<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token class-name\"><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> sendBytes <span class=\"token operator\">=</span> Encoding<span class=\"token punctuation\">.</span>Default<span class=\"token punctuation\">.</span><span class=\"token function\">GetBytes</span><span class=\"token punctuation\">(</span>reStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                connfd<span class=\"token punctuation\">.</span><span class=\"token function\">Send</span><span class=\"token punctuation\">(</span>sendBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这样我们就可以在客户端和服务器之间构建 Socket 连接咯，至此第一章的内容就结束了，第一章并没有讲太多东西，只是简单的介绍了以下 Socket 通信的基本原理和一些 Socket 相关的方法 API，东西虽然不多但是此时此刻我们已经不是一个人了。我们的游戏<font color=blue>联网了</font>！</p>\n",
            "tags": [
                "读书笔记"
            ]
        }
    ]
}