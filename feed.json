{
    "version": "https://jsonfeed.org/version/1",
    "title": "指尖小屋",
    "description": "实现你的游戏梦",
    "home_page_url": "http://www.fasty97.top",
    "items": [
        {
            "id": "http://www.fasty97.top/2020/12/25/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/",
            "url": "http://www.fasty97.top/2020/12/25/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/",
            "title": "测试文章",
            "date_published": "2020-12-25T06:47:05.000Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "http://www.fasty97.top/2020/12/25/%E6%96%B0%E5%8D%9A%E5%AE%A2%E5%90%AF%E5%8A%A8%E5%95%A6/",
            "url": "http://www.fasty97.top/2020/12/25/%E6%96%B0%E5%8D%9A%E5%AE%A2%E5%90%AF%E5%8A%A8%E5%95%A6/",
            "title": "新博客启动啦",
            "date_published": "2020-12-25T06:35:40.000Z",
            "content_html": "<blockquote>\n<p>​\t新博客启动咯！</p>\n</blockquote>\n<p><span class=\"label success\">✔️success</span> 祝贺自己的新博客搭建完成！</p>\n<div class=\"media-container\"><div class=\"player\" data-type=\"audio\" data-src='[\"https://music.163.com/#/song?id=1423316321\"]'></div></div>\n<hr>\n<h2 id=\"博客历程\"><a class=\"markdownIt-Anchor\" href=\"#博客历程\">#</a> 博客历程</h2>\n<div class=\"tab\" data-id=\"id1\" data-title=\"2019\">\n<ul>\n<li>2019.6 萌生了搭建自己博客的想法</li>\n<li>2019.10 购买了阿里云服务器和域名</li>\n<li>2019.11 通过备案</li>\n<li>2019.11 通过 WordPress 搭建了自己的第一个博客</li>\n<li>2019.12 改用七牛云 CDN 加速和图床</li>\n<li>💝 之后一直使用 WordPress 编写文章</li>\n</ul>\n</div>\n<div class=\"tab\" data-id=\"id1\" data-title=\"2020\">\n<ul>\n<li>📌</li>\n<li>2020.12.25 在圣诞节本博客诞生啦\n<ul>\n<li>从服务器博客转战静态页面博客</li>\n<li>全 MD 文件管理</li>\n<li>挂靠 github</li>\n</ul>\n</li>\n</ul>\n</div>\n",
            "tags": []
        },
        {
            "id": "http://www.fasty97.top/2020/07/04/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/",
            "url": "http://www.fasty97.top/2020/07/04/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/",
            "title": "命令模式",
            "date_published": "2020-07-04T08:36:31.000Z",
            "content_html": "<blockquote>\n<p>游戏编程模式算是一本比较著名的书了，全书针对游戏编程中的问题介绍了多种设计模式。学习设计模式可以加强我们的程序架构能力，写出更加强大和优雅的程序。</p>\n</blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly90cnkuZG90Lm5ldC8=\">在线 C#</span></p>\n<h3 id=\"写在前面\"><a class=\"markdownIt-Anchor\" href=\"#写在前面\">#</a> 写在前面</h3>\n<p>其实针对 <code>设计模式</code> ，之前我就学习过《大话设计模式》自己也随书将二十多种设计模式实现了一遍；但我在学习游戏开发的过程中发现，标准的设计模式并非对游戏编程支持良好，故而有了专门看一看游戏设计模式的打算，加上寒假学习 cpp，让我有了拿起这本书的想法。<br>\n此文仅为学习记录，欢迎指正。</p>\n<p><code>设计模式并不是刻意为之的东西，是前辈经验的总结，也许你在不知不觉中就已经使用了某种设计模式。</code></p>\n<h3 id=\"命令模式\"><a class=\"markdownIt-Anchor\" href=\"#命令模式\">#</a> 命令模式</h3>\n<blockquote>\n<p>将一个请求封装成一个对象，从而允许你使用不同的请求、队列和日志将将客户端参数化，支持请求的撤销与恢复。</p>\n</blockquote>\n<p>从上述的描述中我们可以找到几个关键点： <code>请求队列</code> ， <code>日志</code> ， <code>撤销与恢复</code> 。<br>\n如果你需要这些特性，此事不妨试试命令模式吧。</p>\n<h4 id=\"适用场景\"><a class=\"markdownIt-Anchor\" href=\"#适用场景\">#</a> 适用场景</h4>\n<ol>\n<li>试想一下，我们在游戏中需要监听用户的输入，以让我们控制的角色响应玩家发布的 <code>命令</code> ，这个命令可能是移动，攻击，也可能是打开菜单，退出游戏。在需要复杂的输入检测时，你可能需要将玩家输入进行组合，如在恰当的时机按下某几个键位就可以使用特殊技能。</li>\n<li>在网络游戏中，我们操控我们的角色需要在所有连接的客户端中同步，其中有一种同步方式称为 <code>状态同步</code> ，及玩家操作角色时，客户端会向所有服务器执行相同的命令，以同步角色的状态信息。这样的情况，多少也使用了命令模式在里面。</li>\n<li>如果你需要撤销和重做，如一款回合制策略游戏，你可能需要撤销之前的动作，让玩家更专注于策略本身。</li>\n</ol>\n<h3 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\">#</a> 代码</h3>\n<p>根据上述描述，我们可以建立一个最基础的命令模式模板。</p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Linq</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> pl<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Player</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>pl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> moveC<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">MoveCommand</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>pl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    moveC<span class=\"token punctuation\">.</span><span class=\"token function\">Excute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>pl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    moveC<span class=\"token punctuation\">.</span><span class=\"token function\">Undo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>pl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Player</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token function\">Player</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> x<span class=\"token punctuation\">,</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x<span class=\"token operator\">=</span>x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y<span class=\"token operator\">=</span>y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"玩家pos:[</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token expression language-csharp\">x</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">,</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token expression language-csharp\">y</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">]\"</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Command</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Excute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Undo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MoveCommand</span><span class=\"token punctuation\">:</span><span class=\"token type-list\"><span class=\"token class-name\">Command</span></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Player</span> player<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token function\">MoveCommand</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> x<span class=\"token punctuation\">,</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> y<span class=\"token punctuation\">,</span><span class=\"token class-name\">Player</span> pl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x<span class=\"token operator\">=</span>x<span class=\"token punctuation\">;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y<span class=\"token operator\">=</span>y<span class=\"token punctuation\">;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>player<span class=\"token operator\">=</span>pl<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Excute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Move Excute!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Move To &#123;0&#125;,&#123;1&#125;\"</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    player<span class=\"token punctuation\">.</span>x<span class=\"token operator\">+=</span>x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    player<span class=\"token punctuation\">.</span>y<span class=\"token operator\">+=</span>y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Undo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Move Undo!!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    player<span class=\"token punctuation\">.</span>x<span class=\"token operator\">-=</span>x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    player<span class=\"token punctuation\">.</span>y<span class=\"token operator\">-=</span>y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如上所示就是一个命令模式的基本使用，在某些情况下我们应该将所有操作用命令管理，尽管这样比较麻烦，但一旦建立起一个统一的管理模式后，你会发现一切都是值得的。</p>\n<h3 id=\"存在的问题\"><a class=\"markdownIt-Anchor\" href=\"#存在的问题\">#</a> 存在的问题</h3>\n<p>仔细观察你会发现，我们每次我们使用一个命令都会创建一个命令对象，如果我们频繁的使用命令我们就会不断的创建对象，而这些对象其实我们只使用了一次。怎么解决这个问题呢？下一章的 <code>享元模式</code> 让我们一起来解决吧。</p>\n",
            "tags": [
                "读书笔记",
                "设计模式"
            ]
        },
        {
            "id": "http://www.fasty97.top/2020/07/02/%E4%BD%8D%E8%BF%90%E7%AE%97%E7%9A%84%E7%A7%92%E7%94%A8/",
            "url": "http://www.fasty97.top/2020/07/02/%E4%BD%8D%E8%BF%90%E7%AE%97%E7%9A%84%E7%A7%92%E7%94%A8/",
            "title": "位运算的秒用",
            "date_published": "2020-07-02T11:31:24.000Z",
            "content_html": "<p>位运算符想必大家都听说过，那如何正确使用位运算呢？</p>\n<blockquote>\n<p>今天，让我们来解决这样一个问题，用一个参数传递一组配置？</p>\n</blockquote>\n<p>这并非是一个难题，学习过最基本的编程知识，我相信你会用 n 种方法来解决这个问题。</p>\n<h3 id=\"你可能的做法\"><a class=\"markdownIt-Anchor\" href=\"#你可能的做法\">#</a> 你可能的做法</h3>\n<p><code>配置项枚举类</code></p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/// 配置项枚举</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token class-name\">Config</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    Item1<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    Item2<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    Item3</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/// 显示配置信息</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">/// &lt;param name=\"configs\">&lt;/param></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ShowConfigInfo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Config<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> configs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> item <span class=\"token keyword\">in</span> configs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        System<span class=\"token punctuation\">.</span>Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上面的做法可能是大多数人的做法，通过传递一组数据，进行数据配置的传递。</p>\n<h3 id=\"使用位运算的做法\"><a class=\"markdownIt-Anchor\" href=\"#使用位运算的做法\">#</a> 使用位运算的做法</h3>\n<p>首先我们需要修改枚举类以适应我们的位运算。</p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token class-name\">Config</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    Item1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//1 </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    Item2 <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//2</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    Item3 <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">2</span> <span class=\"token comment\">//4</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>修改 showConfigInfo 方法如下：</p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> ShowConfigInfo <span class=\"token punctuation\">(</span><span class=\"token class-name\">Config</span> configs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>configs <span class=\"token operator\">&amp;</span> Config<span class=\"token punctuation\">.</span>Item1<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        System<span class=\"token punctuation\">.</span>Console<span class=\"token punctuation\">.</span>WriteLine <span class=\"token punctuation\">(</span><span class=\"token string\">\"configs 包含 &#123;0&#125;\"</span><span class=\"token punctuation\">,</span> Config<span class=\"token punctuation\">.</span>Item1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>configs <span class=\"token operator\">&amp;</span> Config<span class=\"token punctuation\">.</span>Item2<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        System<span class=\"token punctuation\">.</span>Console<span class=\"token punctuation\">.</span>WriteLine <span class=\"token punctuation\">(</span><span class=\"token string\">\"configs 包含 &#123;0&#125;\"</span><span class=\"token punctuation\">,</span> Config<span class=\"token punctuation\">.</span>Item2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>configs <span class=\"token operator\">&amp;</span> Config<span class=\"token punctuation\">.</span>Item3<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        System<span class=\"token punctuation\">.</span>Console<span class=\"token punctuation\">.</span>WriteLine <span class=\"token punctuation\">(</span><span class=\"token string\">\"configs 包含 &#123;0&#125;\"</span><span class=\"token punctuation\">,</span> Config<span class=\"token punctuation\">.</span>Item3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>调用时，只需要使用 <code>|</code>  运算符即可传递一组配置</p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ShowConfigInfo <span class=\"token punctuation\">(</span>Config<span class=\"token punctuation\">.</span>Item1 <span class=\"token operator\">|</span> Config<span class=\"token punctuation\">.</span>Item3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>如上输入时输出：<br>\n <code>configs 包含 Item1 configs 包含 Item3</code></p>\n<h3 id=\"分析\"><a class=\"markdownIt-Anchor\" href=\"#分析\">#</a> 分析</h3>\n<p>首先我们先来看一下二进制码</p>\n<table>\n<thead>\n<tr>\n<th>十进制</th>\n<th>二进制</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>001</td>\n</tr>\n<tr>\n<td>2</td>\n<td>010</td>\n</tr>\n<tr>\n<td>3</td>\n<td>011</td>\n</tr>\n<tr>\n<td>4</td>\n<td>100</td>\n</tr>\n</tbody>\n</table>\n<p>观察上表我们可以发现， <code>2的次方代表的数字，在二进制中总是只有一个1</code> 。<br>\n然后我们再来看一下上面用到的几个位运算。</p>\n<h4 id=\"按位或运算\"><a class=\"markdownIt-Anchor\" href=\"#按位或运算\">#</a> 按位或运算 |</h4>\n<p><code>|</code>  运算表示将两个操作数的二进制码进行按位或运算， <code>一真则真</code> 。<br>\n例如：</p>\n<ul>\n<li>我们计算 1|2 就是计算 001|010，结果为：011 也就是十进制 3。</li>\n<li>计算 2|3 就是计算 010|011，结果为：011 也是 3。</li>\n<li>计算 2|4 就是计算 010|100，结果为：110 十进制为 6</li>\n</ul>\n<p><code>通过上面你应该可以发现，当我们将2个2的次方数进行|运算，其实就是将2者特有的标志位1 整合到一起。</code> 这是 2 的次方数所特有的，使用这一特性我们就可以使用二进制位来存储配置。</p>\n<h4 id=\"按位或运算-2\"><a class=\"markdownIt-Anchor\" href=\"#按位或运算-2\">#</a> 按位或运算 &amp;</h4>\n<p><code>&amp;</code>  运算表示将两个操作符的二进制进行按位与运算， <code>同真才为真，一假则假</code> <br>\n例如：</p>\n<ul>\n<li>我们计算 1&amp;2 就是计算 001&amp;010，结果为： 000 也就是 0</li>\n<li>计算 2&amp;3 就是计算 010&amp;011, 结果为： 010 也就是 2</li>\n<li>计算 2&amp;4 就是计算 010&amp;100，结果为：000 也就是 0</li>\n</ul>\n<p><code>我们发现，当我们将2个2的次方数进行&amp;运算，其实就是将2者所特有的标志位1 全部置为0</code> <br>\n 使用这一特性我们就可以判断数据中是否存在某一指定位为 1。</p>\n<h3 id=\"使用组合数据解析数据\"><a class=\"markdownIt-Anchor\" href=\"#使用组合数据解析数据\">#</a> 使用 | 组合数据 &amp; 解析数据</h3>\n<p>通过 | 我们可以将指定位置 1<br>\n 通过 &amp; 我们可以判断是否包含指定位 1</p>\n<h3 id=\"其他的位操作\"><a class=\"markdownIt-Anchor\" href=\"#其他的位操作\">#</a> 其他的位操作</h3>\n<p>除了 | 和 &amp; 还有其他位操作，比如用于加密的异或 ^, 用于补码的～，用于移位的 &lt;&lt;和&gt;&gt; 等。<br>\n使用这些位操作还能实现其他非常有趣的功能。本文重点介绍 | 和 &amp;，其他位运算不做详细说明。</p>\n<h3 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h3>\n<p>使用 | 和 &amp; 能够很好的按位存储和解析数据，运算效率高，能避免重复配置项，非常巧妙也十分有用！</p>\n",
            "tags": []
        },
        {
            "id": "http://www.fasty97.top/2020/05/23/%E8%88%92%E6%9C%8D%E7%9A%842D%E7%9B%B8%E6%9C%BA-Cinemachine/",
            "url": "http://www.fasty97.top/2020/05/23/%E8%88%92%E6%9C%8D%E7%9A%842D%E7%9B%B8%E6%9C%BA-Cinemachine/",
            "title": "舒服的2D相机-Cinemachine",
            "date_published": "2020-05-23T03:13:14.000Z",
            "content_html": "<blockquote>\n<p>上周我利用一周的时间完成了一个解密竞速小游戏，这也是没空更新的一个原因吧</p>\n</blockquote>\n<p>因为时间比较短，就选择了 2D 项目来练练手，在人物角色控制写完了之后，就想着写个摄像机来控制视野，索性就想到了 <code>Cinemachine</code> ，记得之前好像看到 Cinemachine 有一套比较好用的摄像机系统，就拿来试试了。</p>\n<h3 id=\"效果预览\"><a class=\"markdownIt-Anchor\" href=\"#效果预览\">#</a> 效果预览</h3>\n<p><img data-src=\"https://pic.fasty97.top/blog/20200523/qb1Kss4Mw96k.gif\" alt=\"效果预览\"></p>\n<p>可以看到其效果包含以下几个方面</p>\n<ul>\n<li>跟随玩家角色的移动</li>\n<li>在小范围内移动不会触发摄像机位置的改变</li>\n<li>摄像机缓动</li>\n<li>摄像机视野不会超出地图范围</li>\n</ul>\n<p>这几个效果自己手写还是挺麻烦，让我们来看看 <code>Cinemachine</code>  怎么做。</p>\n<h3 id=\"如何使用\"><a class=\"markdownIt-Anchor\" href=\"#如何使用\">#</a> 如何使用</h3>\n<ol>\n<li>创建一个 2D 虚拟相机：</li>\n</ol>\n<p><img data-src=\"https://pic.fasty97.top/blog/20200523/AVXP8rVMR5N9.png\" alt=\"\"><br>\n2. 为虚拟相机指定 Flow<br>\n<img data-src=\"https://pic.fasty97.top/blog/20200523/KJPSbevHst01.png\" alt=\"\"><br>\n3. 设置活死区和插值<br>\n <code>此时已经可以实现摄像机跟随了，但是此时摄像机可能会照到非地图区域</code> <br>\n 4. 设定地图碰撞区域<br>\n创建一个空物体并挂载多边形碰撞器（目前只支持这种类型的碰撞器） <code>记得设置为触发器</code> <br>\n<img data-src=\"https://pic.fasty97.top/blog/20200523/mjeXKALIvuha.png\" alt=\"\"><br>\n为虚拟相机添加如下组件，将碰撞设置进去<br>\n<img data-src=\"https://pic.fasty97.top/blog/20200523/E1mVRf835ude.png\" alt=\"\"><br>\n此时你可以实现上述的所有功能了。</p>\n",
            "tags": [
                "unity"
            ]
        },
        {
            "id": "http://www.fasty97.top/2020/05/10/A%E6%98%9F%E7%AE%97%E6%B3%95%E7%9A%84%E7%A0%94%E7%A9%B6%E5%92%8C%E5%BA%94%E7%94%A8/",
            "url": "http://www.fasty97.top/2020/05/10/A%E6%98%9F%E7%AE%97%E6%B3%95%E7%9A%84%E7%A0%94%E7%A9%B6%E5%92%8C%E5%BA%94%E7%94%A8/",
            "title": "A*算法的研究和应用",
            "date_published": "2020-05-10T13:40:45.000Z",
            "content_html": "<blockquote>\n<p>对 A * 算法早有耳闻，但一直未细致去分析过，最近重新看到这个概念，来尝试分析一波</p>\n</blockquote>\n<h3 id=\"算法定义\"><a class=\"markdownIt-Anchor\" href=\"#算法定义\">#</a> 算法定义</h3>\n<p>A* 算法常被表示为 f (n)=g (n)+h (n)</p>\n<p>**f (n)** 表示从状态 n 到达目标状态的花费的预测值<br>\n **g (n)** 表示从初始状态到达状态 n 的花费<br>\n **h (n)** 表示从状态 n 到达目标状态的花费预测值（最佳路径）</p>\n<p>拖了蛮久了，差点我都忘记了我还有个博客等着我每周一更呢。</p>\n<h3 id=\"效果预览\"><a class=\"markdownIt-Anchor\" href=\"#效果预览\">#</a> 效果预览</h3>\n<p><img data-src=\"https://pic.fasty97.top/blog/20200523/1Ark1TqLH5gG.gif\" alt=\"效果预览\"></p>\n<hr>\n<h3 id=\"a-格子数据\"><a class=\"markdownIt-Anchor\" href=\"#a-格子数据\">#</a> A* 格子数据</h3>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">FastyTools<span class=\"token punctuation\">.</span>Astar</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">/// 格子类型</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">NodeType</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        Walk<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">/// 障碍物</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        Obstacle</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">/// A * 格子</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AstarNode</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">NodeType</span> Type <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">/// 总花费</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">float</span></span> F <span class=\"token operator\">=></span> G <span class=\"token operator\">+</span> H<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">/// 从起点到当前格子的花费</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">float</span></span> G <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span>  <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">/// 从当前格子到终点的花费</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">float</span></span> H <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\">/// 父节点</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">AstarNode</span> Father <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> X <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> Y <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token function\">AstarNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> x<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> y<span class=\"token punctuation\">,</span> <span class=\"token class-name\">NodeType</span> type<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            X <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            Y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            Type <span class=\"token operator\">=</span> type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"a寻路\"><a class=\"markdownIt-Anchor\" href=\"#a寻路\">#</a> A * 寻路</h3>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">FastyTools<span class=\"token punctuation\">.</span>Singleton</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">FastyTools<span class=\"token punctuation\">.</span>Astar</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">SerializeField</span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Vec2</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> X <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> Y <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token function\">Vec2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> x<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            X <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            Y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 运算符重载</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> Vec2 <span class=\"token keyword\">operator</span> <span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Vec2</span> a<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Vec2</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Vec2</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>X <span class=\"token operator\">+</span> b<span class=\"token punctuation\">.</span>X<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span>Y <span class=\"token operator\">+</span> b<span class=\"token punctuation\">.</span>Y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> Vec2 <span class=\"token keyword\">operator</span> <span class=\"token operator\">-</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Vec2</span> a<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Vec2</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Vec2</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>X <span class=\"token operator\">-</span> b<span class=\"token punctuation\">.</span>X<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span>Y <span class=\"token operator\">-</span> b<span class=\"token punctuation\">.</span>Y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">/// A 星寻路管理器</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AstarManager</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Singleton<span class=\"token punctuation\">&lt;</span>AstarManager<span class=\"token punctuation\">></span></span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> mapW<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> mapH<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">AstarNode<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">]</span></span> map<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span>AstarNode<span class=\"token punctuation\">></span></span> openList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>AstarNode<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span>AstarNode<span class=\"token punctuation\">></span></span> closeList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>AstarNode<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token comment\">/// 初始化地图信息</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token comment\">/// &lt;param name=\"w\">&lt;/param></span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token comment\">/// &lt;param name=\"h\">&lt;/param></span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">InitMapInfo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> w<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> h<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            mapW <span class=\"token operator\">=</span> w<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            mapH <span class=\"token operator\">=</span> h<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">AstarNode</span><span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> w<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> h<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                    <span class=\"token comment\">// 随机阻挡</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                    map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">AstarNode</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> Random<span class=\"token punctuation\">.</span><span class=\"token function\">Range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">?</span> NodeType<span class=\"token punctuation\">.</span>Obstacle <span class=\"token punctuation\">:</span> NodeType<span class=\"token punctuation\">.</span>Walk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token comment\">/// 寻路</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token comment\">/// &lt;param name=\"start\">&lt;/param></span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token comment\">/// &lt;param name=\"end\">&lt;/param></span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token comment\">/// &lt;returns>&lt;/returns></span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">List<span class=\"token punctuation\">&lt;</span>AstarNode<span class=\"token punctuation\">></span></span> <span class=\"token function\">FindWay</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Vec2</span> start<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Vec2</span> end<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token comment\">// Debug.Log ($\"开始点 (&#123;start.X&#125;,&#123;start.Y&#125;) 结束点（&#123;end.X&#125;,&#123;end.Y&#125;）\");</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token comment\">//1. 是否在地图范围内</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token function\">IsInMap</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">IsInMap</span><span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                Debug<span class=\"token punctuation\">.</span><span class=\"token function\">LogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A* 寻路 起点或终点不在地图范围内\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            <span class=\"token comment\">//2. 可达</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> s <span class=\"token operator\">=</span> map<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">.</span>X<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">.</span>Y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> e <span class=\"token operator\">=</span> map<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">.</span>X<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">.</span>Y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>Type <span class=\"token operator\">==</span> NodeType<span class=\"token punctuation\">.</span>Obstacle <span class=\"token operator\">||</span> e<span class=\"token punctuation\">.</span>Type <span class=\"token operator\">==</span> NodeType<span class=\"token punctuation\">.</span>Obstacle<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>                Debug<span class=\"token punctuation\">.</span><span class=\"token function\">LogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A* 寻路起点或 终点不可达\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            <span class=\"token comment\">// 清空关闭和开启列表</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            openList<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>            closeList<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> path <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>AstarNode<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>            <span class=\"token comment\">//3. 计算</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>            s<span class=\"token punctuation\">.</span>Father <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>            s<span class=\"token punctuation\">.</span>G <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>            s<span class=\"token punctuation\">.</span>H <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>            closeList<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 开始点放入</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre></pre></td></tr><tr><td data-num=\"101\"></td><td><pre></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">!=</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>                <span class=\"token comment\">// 开始写入</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>                <span class=\"token function\">WriteNear2OpenList</span><span class=\"token punctuation\">(</span>start <span class=\"token operator\">+</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Vec2</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> <span class=\"token number\">1.4f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 左上</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>                <span class=\"token function\">WriteNear2OpenList</span><span class=\"token punctuation\">(</span>start <span class=\"token operator\">+</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Vec2</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 上</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>                <span class=\"token function\">WriteNear2OpenList</span><span class=\"token punctuation\">(</span>start <span class=\"token operator\">+</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Vec2</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> <span class=\"token number\">1.4f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 右上</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>                <span class=\"token function\">WriteNear2OpenList</span><span class=\"token punctuation\">(</span>start <span class=\"token operator\">+</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Vec2</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 左</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>                <span class=\"token function\">WriteNear2OpenList</span><span class=\"token punctuation\">(</span>start <span class=\"token operator\">+</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Vec2</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 右</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>                <span class=\"token function\">WriteNear2OpenList</span><span class=\"token punctuation\">(</span>start <span class=\"token operator\">+</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Vec2</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> <span class=\"token number\">1.4f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 左下</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>                <span class=\"token function\">WriteNear2OpenList</span><span class=\"token punctuation\">(</span>start <span class=\"token operator\">+</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Vec2</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 下</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>                <span class=\"token function\">WriteNear2OpenList</span><span class=\"token punctuation\">(</span>start <span class=\"token operator\">+</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Vec2</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> <span class=\"token number\">1.4f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre></pre></td></tr><tr><td data-num=\"114\"></td><td><pre></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>                <span class=\"token comment\">// 不存在任何路径</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>openList<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>                    Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A* 死路\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>                    <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> cc <span class=\"token keyword\">in</span> closeList<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>                    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>                        Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span>cc<span class=\"token punctuation\">.</span>X <span class=\"token operator\">+</span> <span class=\"token string\">\"-\"</span> <span class=\"token operator\">+</span> cc<span class=\"token punctuation\">.</span>Y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>                    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>                <span class=\"token comment\">// 选择消耗最小的点 (根据 F）</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>                openList<span class=\"token punctuation\">.</span><span class=\"token function\">Sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>                    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>F <span class=\"token operator\">></span> b<span class=\"token punctuation\">.</span>F<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>                        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>                            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>                        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>F <span class=\"token operator\">==</span> b<span class=\"token punctuation\">.</span>F<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>                        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>                            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>                        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>                        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>                            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>                <span class=\"token comment\">// 放入关闭</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>                closeList<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>openList<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>                <span class=\"token comment\">// 设置新起点，继续下一次寻路</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>                s <span class=\"token operator\">=</span> openList<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>                start <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Vec2</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>X<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span>Y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>                openList<span class=\"token punctuation\">.</span><span class=\"token function\">RemoveAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>            <span class=\"token comment\">// 回溯路径</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>            path<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>Father <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>                path<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>Father<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>                e <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>Father<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>            <span class=\"token comment\">// 翻转 path</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>            path<span class=\"token punctuation\">.</span><span class=\"token function\">Reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>            <span class=\"token keyword\">return</span> path<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>        <span class=\"token comment\">/// 是否在地图中</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>        <span class=\"token comment\">/// &lt;param name=\"pos\">&lt;/param></span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>        <span class=\"token comment\">/// &lt;returns>&lt;/returns></span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">IsInMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Vec2</span> pos<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">.</span>X <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> pos<span class=\"token punctuation\">.</span>X <span class=\"token operator\">>=</span> mapW <span class=\"token operator\">||</span> pos<span class=\"token punctuation\">.</span>Y <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> pos<span class=\"token punctuation\">.</span>Y <span class=\"token operator\">>=</span> mapH<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>        <span class=\"token comment\">/// 取得 node</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>        <span class=\"token comment\">/// &lt;param name=\"pos\">&lt;/param></span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>        <span class=\"token comment\">/// &lt;returns>&lt;/returns></span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">AstarNode</span> <span class=\"token function\">GetNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Vec2</span> pos<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">IsInMap</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>                <span class=\"token keyword\">return</span> map<span class=\"token punctuation\">[</span>pos<span class=\"token punctuation\">.</span>X<span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">.</span>Y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>        <span class=\"token comment\">/// 将周围点数据计算并写入 openList</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>        <span class=\"token comment\">/// &lt;param name=\"pos\"> 当前位置 & lt;/param></span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>        <span class=\"token comment\">/// &lt;param name=\"father\"> 父对象 & lt;/param></span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>        <span class=\"token comment\">/// &lt;param name=\"end\"> 终点 & lt;/param></span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre>        <span class=\"token comment\">/// &lt;param name=\"g\"> 离上一个点的距离（移动花费）&lt;/param></span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">WriteNear2OpenList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Vec2</span> pos<span class=\"token punctuation\">,</span> <span class=\"token class-name\">AstarNode</span> father<span class=\"token punctuation\">,</span> <span class=\"token class-name\">AstarNode</span> end<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> g <span class=\"token operator\">=</span> <span class=\"token number\">1f</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"203\"></td><td><pre>            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> node <span class=\"token operator\">=</span> <span class=\"token function\">GetNode</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"204\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> node<span class=\"token punctuation\">.</span>Type <span class=\"token operator\">==</span> NodeType<span class=\"token punctuation\">.</span>Obstacle <span class=\"token operator\">||</span> openList<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> closeList<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"205\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre>                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"207\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"208\"></td><td><pre></pre></td></tr><tr><td data-num=\"209\"></td><td><pre>            node<span class=\"token punctuation\">.</span>Father <span class=\"token operator\">=</span> father<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"210\"></td><td><pre>            node<span class=\"token punctuation\">.</span>H <span class=\"token operator\">=</span> Mathf<span class=\"token punctuation\">.</span><span class=\"token function\">Abs</span><span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">.</span>X <span class=\"token operator\">-</span> node<span class=\"token punctuation\">.</span>X<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> Mathf<span class=\"token punctuation\">.</span><span class=\"token function\">Abs</span><span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">.</span>Y <span class=\"token operator\">-</span> node<span class=\"token punctuation\">.</span>Y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"211\"></td><td><pre>            node<span class=\"token punctuation\">.</span>G <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>G <span class=\"token operator\">+</span> g<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"212\"></td><td><pre>            openList<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"213\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"214\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"215\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"寻路测试\"><a class=\"markdownIt-Anchor\" href=\"#寻路测试\">#</a> 寻路测试</h3>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">FastyTools<span class=\"token punctuation\">.</span>Astar</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">FastyTools<span class=\"token punctuation\">.</span>Test</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AStarTest</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> beginX<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> beginY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Vector2</span> offset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> mapW<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> mapH<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">GameObject</span> prefab<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\">Dictionary<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span>GameObject<span class=\"token punctuation\">></span></span> dictionary<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Dictionary<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> GameObject<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Vector2</span> start <span class=\"token operator\">=</span> Vector2<span class=\"token punctuation\">.</span>right <span class=\"token operator\">*</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Vector2</span> end<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            start <span class=\"token operator\">=</span> Vector2<span class=\"token punctuation\">.</span>right <span class=\"token operator\">*</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            AstarManager<span class=\"token punctuation\">.</span>Instance<span class=\"token punctuation\">.</span><span class=\"token function\">InitMapInfo</span><span class=\"token punctuation\">(</span>mapW<span class=\"token punctuation\">,</span>mapH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> mapW<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> mapH<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> go<span class=\"token operator\">=</span> <span class=\"token function\">Instantiate</span><span class=\"token punctuation\">(</span>prefab<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Vector3</span><span class=\"token punctuation\">(</span>beginX <span class=\"token operator\">+</span> offset<span class=\"token punctuation\">.</span>x <span class=\"token operator\">*</span> i<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>beginY<span class=\"token operator\">+</span>offset<span class=\"token punctuation\">.</span>y <span class=\"token operator\">*</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>Quaternion<span class=\"token punctuation\">.</span>identity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                    go<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span><span class=\"token function\">SetParent</span><span class=\"token punctuation\">(</span>transform<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                    go<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token string\">\"_\"</span> <span class=\"token operator\">+</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>AstarManager<span class=\"token punctuation\">.</span>Instance<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Type<span class=\"token operator\">==</span>NodeType<span class=\"token punctuation\">.</span>Obstacle<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                        go<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>MeshRenderer<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>material<span class=\"token punctuation\">.</span>color<span class=\"token operator\">=</span>Color<span class=\"token punctuation\">.</span>red<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                    dictionary<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>go<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>go<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Input<span class=\"token punctuation\">.</span><span class=\"token function\">GetKeyDown</span><span class=\"token punctuation\">(</span>KeyCode<span class=\"token punctuation\">.</span>K<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> path <span class=\"token operator\">=</span> AstarManager<span class=\"token punctuation\">.</span>Instance<span class=\"token punctuation\">.</span><span class=\"token function\">FindWay</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Vec2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> start<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> start<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                    <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Vec2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> end<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> end<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> c <span class=\"token keyword\">in</span> path<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>X<span class=\"token operator\">+</span><span class=\"token string\">\"  \"</span><span class=\"token operator\">+</span>c<span class=\"token punctuation\">.</span>Y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Input<span class=\"token punctuation\">.</span><span class=\"token function\">GetMouseButtonDown</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> ray<span class=\"token operator\">=</span> Camera<span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">.</span><span class=\"token function\">ScreenPointToRay</span><span class=\"token punctuation\">(</span>Input<span class=\"token punctuation\">.</span>mousePosition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                <span class=\"token class-name\">RaycastHit</span> hit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Physics<span class=\"token punctuation\">.</span><span class=\"token function\">Raycast</span><span class=\"token punctuation\">(</span>ray<span class=\"token punctuation\">,</span><span class=\"token keyword\">out</span> hit<span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> c <span class=\"token operator\">=</span> hit<span class=\"token punctuation\">.</span>collider<span class=\"token punctuation\">.</span>gameObject<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> xy <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">Split</span><span class=\"token punctuation\">(</span><span class=\"token string character\">'_'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                    <span class=\"token comment\">// 开始终点</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>start<span class=\"token operator\">==</span>Vector2<span class=\"token punctuation\">.</span>right<span class=\"token operator\">*</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                        c<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>MeshRenderer<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>material<span class=\"token punctuation\">.</span>color<span class=\"token operator\">=</span>Color<span class=\"token punctuation\">.</span>yellow<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                        start<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Vector2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>xy<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>xy<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>                    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>end<span class=\"token operator\">==</span>Vector2<span class=\"token punctuation\">.</span>zero<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>                    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>                        <span class=\"token comment\">// 终点</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>                        c<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>MeshRenderer<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>material<span class=\"token punctuation\">.</span>color<span class=\"token operator\">=</span>Color<span class=\"token punctuation\">.</span>blue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>                            end<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Vector2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>xy<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>xy<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>                        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"开始寻路\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>                        <span class=\"token comment\">// 寻路</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>                        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> path <span class=\"token operator\">=</span> AstarManager<span class=\"token punctuation\">.</span>Instance<span class=\"token punctuation\">.</span><span class=\"token function\">FindWay</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Vec2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> start<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> start<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>                            <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Vec2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> end<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> end<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>                        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> cc <span class=\"token keyword\">in</span> path<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>                        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>                            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>cc<span class=\"token punctuation\">.</span>X<span class=\"token operator\">+</span><span class=\"token string\">\"  \"</span><span class=\"token operator\">+</span>cc<span class=\"token punctuation\">.</span>Y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>                            dictionary<span class=\"token punctuation\">[</span>cc<span class=\"token punctuation\">.</span>X<span class=\"token operator\">+</span><span class=\"token string\">\"_\"</span><span class=\"token operator\">+</span>cc<span class=\"token punctuation\">.</span>Y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>MeshRenderer<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>material<span class=\"token punctuation\">.</span>color<span class=\"token operator\">=</span>Color<span class=\"token punctuation\">.</span>green<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"相关阅读\"><a class=\"markdownIt-Anchor\" href=\"#相关阅读\">#</a> 相关阅读</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC81NDUxMDQ0NA==\">路径规划之 A* 算法</span><br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0twcm9ncmFtL2FydGljbGUvZGV0YWlscy84MTIyNTE3Ng==\">迪杰斯特拉算法</span><br>\n<span class=\"exturl\" data-url=\"aHR0cDovL3FpYW8uZ2l0aHViLmlvL1BhdGhGaW5kaW5nLmpzL3Zpc3VhbC8=\"> A * 算法在线演示</span></p>\n",
            "tags": []
        },
        {
            "id": "http://www.fasty97.top/2020/04/28/Ink%E5%89%A7%E6%83%85%E7%BC%96%E6%8E%92/",
            "url": "http://www.fasty97.top/2020/04/28/Ink%E5%89%A7%E6%83%85%E7%BC%96%E6%8E%92/",
            "title": "Ink剧情编排",
            "date_published": "2020-04-28T13:54:55.000Z",
            "content_html": "<h3 id=\"快速食用\"><a class=\"markdownIt-Anchor\" href=\"#快速食用\">#</a> 快速食用</h3>\n<ol>\n<li>下载 inky 编辑器</li>\n<li>编写 ink 文件</li>\n<li>下载安装 unity 支持</li>\n<li>找到 ink 示例，将对应的 ink 生成的 json 导入运行游戏即可。</li>\n</ol>\n<h3 id=\"unity使用流程\"><a class=\"markdownIt-Anchor\" href=\"#unity使用流程\">#</a> unity 使用流程</h3>\n<p>在 unity 中，我们需要通过代码来驱动我们的剧情的进行。</p>\n<ol>\n<li>\n<p>首先我们需要 <code>创建至少2种Prefab</code> ，一种表示文字，一种表示按钮。</p>\n</li>\n<li>\n<p>然后我们需要创建一个 story 对象，载入对应的 json 文件<br>\n <code>story = new Story (inkJSONAsset.text);</code></p>\n</li>\n<li>\n<p>判断 story 能否继续，若能继续使用代码创建对应的游戏对象</p>\n</li>\n</ol>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>story<span class=\"token punctuation\">.</span>canContinue<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// Continue gets the next line of the story</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> text <span class=\"token operator\">=</span> story<span class=\"token punctuation\">.</span>Continue <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// This removes any white space from the text.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>text <span class=\"token operator\">=</span> text<span class=\"token punctuation\">.</span><span class=\"token function\">Trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// Display the text on screen!</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">CreateContentView</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// Display all the choices, if there are any!</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>story<span class=\"token punctuation\">.</span>currentChoices<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> story<span class=\"token punctuation\">.</span>currentChoices<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token class-name\">Choice</span> choice <span class=\"token operator\">=</span> story<span class=\"token punctuation\">.</span>currentChoices <span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token class-name\">Button</span> button <span class=\"token operator\">=</span> CreateChoiceView <span class=\"token punctuation\">(</span>choice<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span>Trim <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token comment\">// Tell the button what to do when we press it</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tbutton<span class=\"token punctuation\">.</span>onClick<span class=\"token punctuation\">.</span>AddListener <span class=\"token punctuation\">(</span><span class=\"token keyword\">delegate</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\tOnClickChoiceButton <span class=\"token punctuation\">(</span>choice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// If we've read all the content and there's no choices, the story is finished!</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token class-name\">Button</span> choice <span class=\"token operator\">=</span> <span class=\"token function\">CreateChoiceView</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"End of story.\\nRestart?\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tchoice<span class=\"token punctuation\">.</span>onClick<span class=\"token punctuation\">.</span><span class=\"token function\">AddListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">delegate</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token function\">StartStory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> CreateContentView <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> text<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token class-name\">Text</span> storyText <span class=\"token operator\">=</span> Instantiate <span class=\"token punctuation\">(</span>textPrefab<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tstoryText<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> text<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tstoryText<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>SetParent <span class=\"token punctuation\">(</span>canvas<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// Creates a button showing the choice text</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token return-type class-name\">Button</span> CreateChoiceView <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> text<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">// Creates the button from a prefab</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token class-name\">Button</span> choice <span class=\"token operator\">=</span> Instantiate <span class=\"token punctuation\">(</span>buttonPrefab<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token class-name\">Button</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tchoice<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>SetParent <span class=\"token punctuation\">(</span>canvas<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">// Gets the text from the button prefab</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token class-name\">Text</span> choiceText <span class=\"token operator\">=</span> choice<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetComponentInChildren</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Text<span class=\"token punctuation\">></span></span></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tchoiceText<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> text<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">// Make the button expand to fit the text</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token class-name\">HorizontalLayoutGroup</span> layoutGroup <span class=\"token operator\">=</span> choice<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetComponent</span> <span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>HorizontalLayoutGroup<span class=\"token punctuation\">></span></span></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tlayoutGroup<span class=\"token punctuation\">.</span>childForceExpandHeight <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">return</span> choice<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>要记得每次显示时清除上一次的显示结果</li>\n</ol>\n<h3 id=\"相关链接\"><a class=\"markdownIt-Anchor\" href=\"#相关链接\">#</a> 相关链接</h3>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaW5rbGVzdHVkaW9zLmNvbS9pbmsv\">inkle 官网</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2lua2xlL2lua3kvcmVsZWFzZXMvdGFnLzAuMTEuMA==\">inky 编辑器</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9pbmRpZW5vdmEuY29tL3UvYmxpbmR2b2xmL2Jsb2dyZWFkLzIzMjQ5\">相关教程参考 - 基础</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9pbmRpZW5vdmEuY29tL3UvYmxpbmR2b2xmL2Jsb2dyZWFkLzIzMjU3\">相关教程参考 - 高级</span></li>\n</ul>\n",
            "tags": [
                "好物推荐"
            ]
        },
        {
            "id": "http://www.fasty97.top/2020/04/27/YarnSpinner%E5%89%A7%E6%83%85%E7%BC%96%E8%BE%91/",
            "url": "http://www.fasty97.top/2020/04/27/YarnSpinner%E5%89%A7%E6%83%85%E7%BC%96%E8%BE%91/",
            "title": "YarnSpinner剧情编辑",
            "date_published": "2020-04-27T14:49:45.000Z",
            "content_html": "<p>本来说好的每周一更又鸽了…<br>\n 今天来水一期，介绍一款很棒的剧情编排应用  <code>YarnSpinner</code> 。</p>\n<h3 id=\"介绍\"><a class=\"markdownIt-Anchor\" href=\"#介绍\">#</a> 介绍</h3>\n<p><code>YarnSpinner</code>  是一款开源免费的剧情编排应用（或者说是一种用于剧情编排的标记语言）。<br>\n试想我们在开发游戏时，剧情有分支选择，有各种条件检查，如果我们全在代码中去判断和检查不仅繁杂而且非常麻烦，策划学习成本高，耦合性过强。你可能自己想出一套标记语言来表述剧情流程，但自己的力量毕竟是有限的，难免出现一些 bug 和坑。此时，不妨试试这款免费开源，多人共同维护的应用吧。</p>\n<h3 id=\"快速食用\"><a class=\"markdownIt-Anchor\" href=\"#快速食用\">#</a> 快速食用</h3>\n<h4 id=\"代码式编辑\"><a class=\"markdownIt-Anchor\" href=\"#代码式编辑\">#</a> 代码式编辑</h4>\n<p>这里我使用 vscode 作为编辑器，下载一下插件：<br>\n<img data-src=\"https://pic.fasty97.top/blog/20200427/a07bJtR8tRDh.png\" alt=\"扩展\"></p>\n<p>我们先创建一个 <code>.yarn</code>  格式的文件，并写入以下内容：</p>\n<pre><code>title: cc\ntags:\ncolorID: 0\nposition: 1,-22\n---\nFasty97: Hi\nPC: 你好？！\nFasty97: 我又回来了！\nPC: 是忘了什么东西吗？\n===\n\n</code></pre>\n<p>这是一段剧本最基本的格式（一个 yarn 文件至少包含一段剧本）：</p>\n<pre><code>title: cc\ntags:\ncolorID: 0\nposition: 1,-22\n</code></pre>\n<p>以上被称为一个剧本头，表示一段剧本，这些是一些剧本段的基本信息，其中<font color=\"red\">title 必填，position 必填</font>.position 为剧本段的标识符类似于 ID 一样的东西，不要重复。</p>\n<h4 id=\"在unity中使用\"><a class=\"markdownIt-Anchor\" href=\"#在unity中使用\">#</a> 在 unity 中使用</h4>\n<ol>\n<li>下载相关的 unity 支持包（官网有）</li>\n<li>在场景中放入一个 Dialogue 预制体，预制体包含一个默认的设置示例。<br>\n<img data-src=\"https://pic.fasty97.top/blog/20200427/AgJFSizXO2LE.png\" alt=\"\"></li>\n<li>创建一个脚本</li>\n<li>设定好相关的资源和引用</li>\n<li>运行游戏尝试按下空格键吧</li>\n</ol>\n<h4 id=\"脚本设定\"><a class=\"markdownIt-Anchor\" href=\"#脚本设定\">#</a> 脚本设定</h4>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEditorInternal</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">Yarn<span class=\"token punctuation\">.</span>Unity</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">Yarn</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">YarnTest</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DialogueRunner</span> dr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">YarnProgram</span> scriptToLoad<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 注入对话资源</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        dr<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>scriptToLoad<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Input<span class=\"token punctuation\">.</span><span class=\"token function\">GetKeyDown</span><span class=\"token punctuation\">(</span>KeyCode<span class=\"token punctuation\">.</span>Space<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"开始对话\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token comment\">// 开始一个对话</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            dr<span class=\"token punctuation\">.</span><span class=\"token function\">StartDialogue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://pic.fasty97.top/blog/20200427/XkItpdgndrM8.gif\" alt=\"默认\"></p>\n<h3 id=\"使用自定义方法\"><a class=\"markdownIt-Anchor\" href=\"#使用自定义方法\">#</a> 使用自定义方法</h3>\n<p>我现在希望我第一次与角色交流时输出前 2 句，之后每次与角色交流只输出最后 2 句，这是一个游戏中常用的机制。但现在我们的对话只是按照流程依次执行，我们希望这个流程应该是能够动态控制的。<br>\n我们修改上面的 yarn 为：</p>\n<pre><code>title: cc\ntags: \ncolorID: 0\nposition: 1,-22\n---\n&lt;&lt;if visited(&quot;cc&quot;) is false&gt;&gt;\n    Fasty97: Hi\n    PC: 你好？！\n&lt;&lt;else&gt;&gt;\n    Fasty97: 我又回来了！\n    PC: 是忘了什么东西吗？\n&lt;&lt;endif&gt;&gt;\n===\n</code></pre>\n<p>可以看到这次我们使用 类似 if 语句的东西？ 这是 yarn 中提供的一种语法模式，在这里我们会执行一个自定义的方法 visted 并将 &quot;cc&quot; 传入方法中，如果返回的结果是 false 就执行下面的语句块。</p>\n<h4 id=\"处理自定义事件\"><a class=\"markdownIt-Anchor\" href=\"#处理自定义事件\">#</a> 处理自定义事件</h4>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">HashSet<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span> visitedNodes<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HashSet<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 已使用节点</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 注入对话资源</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    dr<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>scriptToLoad<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 注入处理方法</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    dr<span class=\"token punctuation\">.</span><span class=\"token function\">AddFunction</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"visited\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Value<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> parameters<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> nodeName <span class=\"token operator\">=</span> parameters<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> visitedNodes<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>nodeName<span class=\"token punctuation\">.</span>AsString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 绑定事件</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    dr<span class=\"token punctuation\">.</span>onNodeComplete<span class=\"token punctuation\">.</span><span class=\"token function\">AddListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> visitedNodes<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>创建一个 HashSet 集合用于存放所有已经被使用过的 node，绑定一个 onNodeComplete 事件，这个事件有系统自动调用，在实现中为集合加入元素。<br>\n然后注入一个方法，第一个参数指定方法名（在 yarn 文件下的名称），第二个参数指定参数个数，第三个参数就是写入一个方法了，在方法中我们检查集合是否已经包含该值返回结果，一个自定义不可重复方法就处理好了。</p>\n<p><img data-src=\"https://pic.fasty97.top/blog/20200427/zqkvGNEMJPMw.gif\" alt=\"visited效果\"></p>\n<p>使用相同的方法你还可以创建各种各样的方法在 yarn 中使用。<br>\n值得注意的是：<br>\n通过源代码我们可以知道，yarn 只支持以下几种数据类型。</p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">case</span> Value<span class=\"token punctuation\">.</span>Type<span class=\"token punctuation\">.</span>Number<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">object</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>NumberValue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">case</span> Value<span class=\"token punctuation\">.</span>Type<span class=\"token punctuation\">.</span>String<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">object</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>StringValue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">case</span> Value<span class=\"token punctuation\">.</span>Type<span class=\"token punctuation\">.</span>Bool<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">object</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>BoolValue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">case</span> Value<span class=\"token punctuation\">.</span>Type<span class=\"token punctuation\">.</span>Null<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">object</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"相关链接\"><a class=\"markdownIt-Anchor\" href=\"#相关链接\">#</a> 相关链接</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly95YXJuc3Bpbm5lci5kZXYv\">YarnSpinner 官网</span><br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly95YXJuc3Bpbm5lcnRvb2wuZ2l0aHViLmlvL1lhcm5FZGl0b3Iv\"> YarnSpinner 在线编辑器</span><br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1lhcm5TcGlubmVyVG9vbC9ZYXJuU3Bpbm5lcg==\"> YarnSpinner github</span></p>\n",
            "tags": [
                "好物推荐"
            ]
        },
        {
            "id": "http://www.fasty97.top/2020/04/15/Cinemachine%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/",
            "url": "http://www.fasty97.top/2020/04/15/Cinemachine%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/",
            "title": "Cinemachine的基本使用",
            "date_published": "2020-04-15T10:02:16.000Z",
            "content_html": "<p>Unity 版本：<font color=green>2019.3.6f1</font></p>\n<p><font color=red>长文警告！！！</font></p>\n<blockquote>\n  是否为摄像机脚本困扰？是否为镜头动画烦恼？ Cinemachine 超强插件解决你的问题！\n</blockquote>\n<h3>安装Cinemachine</h3>\n<p>现在 Cinemachine 作者已经投靠 unity 官方了，所以 Cinemachine 也成为了 Unity 的官方插件，我们可以直接在 PackageManager 中下载：<br>\n<img data-src=\"http://pic.fasty97.top/blog/20200210/DBHDdslXchVa.png\" alt=\"\"></p>\n<h3>各类相机简述</h3>\n<p>安装之后我们可以在顶部菜单栏，看到如下的选项：<br>\n<img data-src=\"http://pic.fasty97.top/blog/20200210/gd1H7MDqJgJs.png\" alt=\"\"></p>\n<table>\n<thead>\n<tr>\n  <th>选项</th>\n  <th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td>Virtual Camera</td>\n  <td>虚拟摄像机</td>\n</tr>\n<tr>\n  <td>FreeLook Camera</td>\n  <td>自由相机，可以保证镜头内出现头和身体，及相机的活动范围在目标周围圆柱（曲面的）表面，一般用于第三人称控制器</td>\n</tr>\n<tr>\n  <td>State-driven Camera</td>\n  <td>状态驱动相机。添加虚拟相机列表，可以在不同的相机直接直接实现平滑切换，同时其子相机列表如果没有设置LookAt对象等，会直接使用这个父相机的对象。</td>\n</tr>\n<tr>\n  <td>ClearShot Camera</td>\n  <td>干净镜头相机。类似上一个相机，区别在于这个相机可以通过判断子相机的CinemachineCollider（如果有），看是否相机被场景物体阻碍，切换相机。具体可看其源码注释。</td>\n</tr>\n<tr>\n  <td>Dolly Camera with Track</td>\n  <td>可推拉的轨道相机。通过结合轨道路径，就可以模拟像拍电影般镜头轨道移动。</td>\n</tr>\n<tr>\n  <td>Group Target Camera</td>\n  <td>多目标相机。可以同时设置多个目标。</td>\n</tr>\n</tbody>\n</table>\n<h4>Cinemachine Brain</h4>\n<p>在我们创建任意虚拟相机后，插件会为我们的摄像机添加此组件，此组件是我们虚拟相机的大脑，控制着真实相机的行为。（不可或缺）<br>\n<img data-src=\"http://pic.fasty97.top/blog/20200210/4LQud3dfJPHP.png\" alt=\"\"></p>\n<table>\n<thead>\n<tr>\n  <th>变量名</th>\n  <th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td>Live Camera</td>\n  <td>当前选择的虚拟相机。</td>\n</tr>\n<tr>\n  <td>Live Blend</td>\n  <td>当前的镜头转换名称。</td>\n</tr>\n<tr>\n  <td>Show Debug Text</td>\n  <td>在游戏画面左上角显示调试信息。</td>\n</tr>\n<tr>\n  <td>Show Camera Frustum</td>\n  <td>显示相机的视锥体，相比原来自带的边框，这个会裁切掉不在显示范围内的边线。</td>\n</tr>\n<tr>\n  <td>World Up Override</td>\n  <td>重载世界的向上方向（y轴），虚拟相机是通过这个来判断世界环境。</td>\n</tr>\n<tr>\n  <td>Default Blend</td>\n  <td>默认相机切换模式。</td>\n</tr>\n<tr>\n  <td>Custom Blends</td>\n  <td>自定义相机切换模式。</td>\n</tr>\n<tr>\n  <td>Camera Cut Event</td>\n  <td>相机立即切换时事件。</td>\n</tr>\n<tr>\n  <td>Camera Activated Event</td>\n  <td>相机混合（就是有切换变化，不是Cut时）切换时第一帧事件。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"virtual-camera\"><a class=\"markdownIt-Anchor\" href=\"#virtual-camera\">#</a> Virtual Camera</h3>\n<p>Cinemacine Virtual Camera 是 Cinemachine 最基本的相机，<br>\n<img data-src=\"https://pic.fasty97.top/blog/20200415/oOMGlgOGXRpo.png\" alt=\"Cinemacine Virtual Camera\"></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">变量名</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Status</td>\n<td style=\"text-align:left\">状态，Live 为正在使用，Standby 为准备使用（没在用，但如果上一级停用了，可能会切换到当前虚拟相机），Disable 为不能用。按 Solo 按钮会让相机切换到这个虚拟相机（包括 Disable）。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Game Window Guides</td>\n<td style=\"text-align:left\">是否在 game 窗口显示辅助</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Save During Play</td>\n<td style=\"text-align:left\">保存游戏中的改变</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">priority</td>\n<td style=\"text-align:left\">虚拟相机的优先级，如果同时有多个虚拟相机，使用优先级最高的。如果多个同等级的，应该是按 Hierarchy 顺序找到第一个虚拟相机。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Lens</td>\n<td style=\"text-align:left\">镜头常用配置。视角区域，最近最远裁切平面， 镜头旋转角度。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Body</td>\n<td style=\"text-align:left\">相机本身。四种：Hard constraint，固定距离，相当于第一人称。 Orbital Transposer：轨迹转换器？似乎是模拟第三人称。 Tracked Dolly，轨道推拉，相机只能在轨道上移动（即使设置了 Follow 对象），需要轨道路径 CinemachinePath。 Transposer，普通的镜头转换。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Aim</td>\n<td style=\"text-align:left\">瞄准设置，有三种：Hard constraint，固定距离，没有任何平滑效果。Composer，有平滑效果的瞄准目标。Group Composer，同时瞄准多个目标。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Noise</td>\n<td style=\"text-align:left\">噪音，用于相机抖动，预设有多种效果，也可以自己建立新效果。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Extension</td>\n<td style=\"text-align:left\">扩展，可以添加诸如相机碰撞器，相机变焦器等</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"timeline\"><a class=\"markdownIt-Anchor\" href=\"#timeline\">#</a> TimeLine</h4>\n<p>在 TimeLine 中实现 2 个镜头间的切换非常容易。<br>\n<img data-src=\"https://pic.fasty97.top/blog/20200415/cfRA1u2z5SND.png\" alt=\"\"><br>\n<img data-src=\"https://pic.fasty97.top/blog/20200415/D0m6KY0DjAHH.gif\" alt=\"\"></p>\n<h3 id=\"freelook\"><a class=\"markdownIt-Anchor\" href=\"#freelook\">#</a> FreeLook</h3>\n<p><img data-src=\"https://pic.fasty97.top/blog/20200415/uFWo9v918gKw.png\" alt=\"FreeLook 相机视野\"><br>\n FreeLook 相机是一个自由相机，类似于第三人称游戏中的相机，可以使用鼠标控制相机的朝向多方向的观察角色；其相机视野像是一个圆柱体，如上图所示。（相机始终会在这个圆柱体的轨道上运动。）<br>\n<img data-src=\"https://pic.fasty97.top/blog/20200415/EMNEzmU0LM9r.gif\" alt=\"FreeLook\"><br>\n 大多数参数与 Virtual Camera 相似，值得注意的是：<br>\n<font color=\"red\">在 FreeLook 相机中需要绑定 顶部，中间，底部三个位置，这三个位置将决定相机的最大视野。</font></p>\n<h3 id=\"blendlist\"><a class=\"markdownIt-Anchor\" href=\"#blendlist\">#</a> BlendList</h3>\n<p>如名字一样他管理的是一个 camera 列表，并将列表内的 camera 做混合到达射线机之间更自然的切换效果。<br>\n<strong>我们可以控制摄像机切换的 缓动函数</strong>。<br>\n值得注意的是：当 BlendList 启用时，其下的摄像机会依次使用最后停留在最后一个摄像机里。</p>\n<h3 id=\"cinemachinestatedrivencamera\"><a class=\"markdownIt-Anchor\" href=\"#cinemachinestatedrivencamera\">#</a> CinemachineStateDrivenCamera</h3>\n<p>这是被动画状态所驱动的虚拟相机管理器，能够在觉得切换动画时，快速的切换该动画应该使用的相机。【注意设置层级和绑定动画控制器】<br>\n<img data-src=\"https://pic.fasty97.top/blog/20200415/OnntsqFJoil7.png\" alt=\"CinemachineStateDrivenCamera\"></p>\n<h3 id=\"clearshoot\"><a class=\"markdownIt-Anchor\" href=\"#clearshoot\">#</a> ClearShoot</h3>\n<p>ClearShoot 也是一个管理器，负责管理一组 camera，他的效果是时刻选择最优的摄像机。在复杂的场景中，我们的角色可能被环境所遮挡，我们需要多个摄像机来处理这种情况。<br>\n如下图所示，我设置了 2 个摄像机，一个在顶部，一个在后方，在角色移动到墙壁后面时，后方的摄像机被遮挡，此时会自动启动顶部摄像机。在角色回到墙壁后面时，顶部摄像机被遮挡，只能切换到后面的摄像机。<br>\n<img data-src=\"https://pic.fasty97.top/blog/20200415/lDRTT3hjBhtH.gif\" alt=\"ClearShoot\"></p>\n<h3 id=\"targetgroup\"><a class=\"markdownIt-Anchor\" href=\"#targetgroup\">#</a> TargetGroup</h3>\n<p><img data-src=\"https://pic.fasty97.top/blog/20200415/ws4uSH9Nvs2O.png\" alt=\"TargetGroup\"><br>\n 目标组管理器，可以让位于目标组管理器中的目标 <code>尽可能</code> 的位于屏幕中。<br>\n在使用目标组管理器时，务必为摄像机设置目标组类型：<br>\n<img data-src=\"https://pic.fasty97.top/blog/20200415/rN7xlXVSamTd.png\" alt=\"\"></p>\n<h3 id=\"mixing\"><a class=\"markdownIt-Anchor\" href=\"#mixing\">#</a> Mixing</h3>\n<p>Mixing 摄像机混合管理器，可以将多个摄像机的信息进行混合按照权重，得到最终的显示画面。<br>\n（通过多相机的焦点处建立坐标系按权重分配偏移）<br>\n<img data-src=\"https://pic.fasty97.top/blog/20200415/mJ0BILNkgXu1.png\" alt=\"Mixing\"></p>\n<h3 id=\"活区和死区\"><a class=\"markdownIt-Anchor\" href=\"#活区和死区\">#</a> 活区和死区</h3>\n<p><img data-src=\"https://pic.fasty97.top/blog/20200415/L2dUgC4hSHQs.png\" alt=\"活区和死区\"></p>\n<ul>\n<li>A 区域为死区（Dead Zone），对象在死区内任意移动 <code>不会改变</code> 摄像机的位置。</li>\n<li>B 区域为活区（Soft Zone），对象在活区时会触发摄像机 <code>缓动</code> ，最终将对象固定在死区。</li>\n<li>C 区域为界外区，对象在界外区活动时，摄像机会 <code>立即</code> 改变位置时，使对象位于活区。</li>\n</ul>\n<h3>本文参考</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0NTUyODg2L2FydGljbGUvZGV0YWlscy83OTM4ODUyNw==\">[1] Unity Cinemachine 插件学习笔记</span><br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpcml0b1YvYXJ0aWNsZS9kZXRhaWxzLzk2Nzc5NDk3\">[2] 个人笔记】Unity 插件 “Cinemachine”—— 实现尼尔机械纪元运镜设计</span></p>\n<h3 id=\"dolly轨道\"><a class=\"markdownIt-Anchor\" href=\"#dolly轨道\">#</a> Dolly 轨道</h3>\n<p>我们可以创建一个自定义的轨道，将摄像机限制在该轨道上。<br>\n<img data-src=\"https://pic.fasty97.top/blog/20200415/5JS6PFq2vAWt.png\" alt=\"\"><br>\n如图所示我创建了一个圆形轨道，摄像机只能在轨道上运动。</p>\n<h3 id=\"dolly-with-cart轨道\"><a class=\"markdownIt-Anchor\" href=\"#dolly-with-cart轨道\">#</a> Dolly with Cart 轨道</h3>\n<p>让物体沿着轨道运动<br>\n<img data-src=\"https://pic.fasty97.top/blog/20200415/O7FvKn3fSIff.gif\" alt=\"Dolly with Cart轨道\">（这是一个很强大的功能，其实我们不止能用在摄像机上，可以用在任何游戏对象上，让这个对象，或 ui 只能沿着这个轨道运动，并实时设置要达到哪个点，简言之这是一个曲线编辑器。）<br>\n<img data-src=\"https://pic.fasty97.top/blog/20200415/iGxYjFgflcq3.png\" alt=\"\"></p>\n<h3 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h3>\n<p>Cinemachine 是一款非常棒的智能摄像机插件，非常的方便易用。解决大部分的摄像机问题，甚至无需编写代码。当然我们也可以使用代码来控制摄像机，更灵活的处理摄像机与角色之间的关系。</p>\n",
            "tags": [
                "unity"
            ]
        },
        {
            "id": "http://www.fasty97.top/2020/04/13/unity%E7%9A%84%E5%AF%B9%E8%B1%A1%E6%B1%A0/",
            "url": "http://www.fasty97.top/2020/04/13/unity%E7%9A%84%E5%AF%B9%E8%B1%A1%E6%B1%A0/",
            "title": "unity的对象池",
            "date_published": "2020-04-13T05:23:55.000Z",
            "content_html": "<blockquote>\n<p>对象池：在对象销毁时将对象放入池中，在使用对象时从池中取出对象，避免对象初始化和销毁时的昂贵代价。</p>\n</blockquote>\n<p>在游戏中我们需要很多的对象，这些对象可能是动态变化的，例如射击游戏中的子弹，是不断计数的，游戏中的特效也是随着游戏不断增加的。如果我们每次在使用时创建在消失时销毁，务必会造成很大的开销，使用对象池的概念我们可以初始化一定数量的对象在使用对象时使用池中的对象，在消失时把对象归还给对象池，实现对象的复用。</p>\n<h3 id=\"单例模板\"><a class=\"markdownIt-Anchor\" href=\"#单例模板\">#</a> 单例模板</h3>\n<p>一般来说，对于全局的对象池我们需要一个全局的对象池管理器单例来管理所有的对象池。<br>\n在 unity 中我们会用到 2 种单例，一种是非 mono 单例，一种是 mono 单例。</p>\n<h4 id=\"非mono单例\"><a class=\"markdownIt-Anchor\" href=\"#非mono单例\">#</a> 非 mono 单例</h4>\n<p>纯粹的单例模式，添加了线程锁。</p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Threading</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">ObjectPool</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SingletonManager<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span> <span class=\"token keyword\">where</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">new</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">T</span> _instance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">T</span> Instance</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">get</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_instance <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> _instance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    _instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">T</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    Monitor<span class=\"token punctuation\">.</span><span class=\"token function\">Enter</span><span class=\"token punctuation\">(</span>_instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token keyword\">finally</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                    Monitor<span class=\"token punctuation\">.</span><span class=\"token function\">Exit</span><span class=\"token punctuation\">(</span>_instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token keyword\">return</span> _instance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"mono单例\"><a class=\"markdownIt-Anchor\" href=\"#mono单例\">#</a> mono 单例</h4>\n<p>mono 单例用于挂载在游戏对象上。</p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">ObjectPool</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">/// 通用单例模式</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">/// &lt;typeparam name=\"T\">&lt;/typeparam></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span> <span class=\"token keyword\">where</span> <span class=\"token class-name\">T</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Singleton<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">T</span> Instance <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">virtual</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Awake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Instance<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                Instance <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span> <span class=\"token keyword\">as</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token function\">Destroy</span><span class=\"token punctuation\">(</span>gameObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"对象池单例\"><a class=\"markdownIt-Anchor\" href=\"#对象池单例\">#</a> 对象池单例</h3>\n<p>这里我以 mono 单例为例，其实现代码如下：<br>\n关键在于对象池的容量自动扩充，继承单例模板即可。</p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">ObjectPool</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">/// 对象池</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ObjectPool</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Singleton<span class=\"token punctuation\">&lt;</span>ObjectPool<span class=\"token punctuation\">></span></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span>GameObject<span class=\"token punctuation\">></span></span> freeObjects<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 自由对象</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span>GameObject<span class=\"token punctuation\">></span></span> useObjects<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正在被使用的对象</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">GameObject</span> objectPrefab<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> maxCount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> addCount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Awake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">Awake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token function\">InitPool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">/// 获得对象</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">/// &lt;returns>&lt;/returns></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">GameObject</span> <span class=\"token function\">GetItem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>freeObjects<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> item <span class=\"token operator\">=</span> freeObjects<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                freeObjects<span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                useObjects<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                item<span class=\"token punctuation\">.</span><span class=\"token function\">SetActive</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token keyword\">return</span> item<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token comment\">// 扩充容量</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            maxCount <span class=\"token operator\">+=</span> addCount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> addCount<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                freeObjects<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token function\">InitObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> item2 <span class=\"token operator\">=</span> freeObjects<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            freeObjects<span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span>item2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            useObjects<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>item2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token keyword\">return</span> item2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token comment\">/// 释放对象</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token comment\">/// &lt;param name=\"t\">&lt;/param></span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">FreeItem</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GameObject</span> t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            useObjects<span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            t<span class=\"token punctuation\">.</span><span class=\"token function\">SetActive</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            freeObjects<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">InitPool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> maxCount<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                freeObjects<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token function\">InitObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">GameObject</span> <span class=\"token function\">InitObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> go <span class=\"token operator\">=</span> <span class=\"token function\">Instantiate</span><span class=\"token punctuation\">(</span>objectPrefab<span class=\"token punctuation\">,</span> transform<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            go<span class=\"token punctuation\">.</span><span class=\"token function\">SetActive</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>            <span class=\"token keyword\">return</span> go<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"对象池的使用\"><a class=\"markdownIt-Anchor\" href=\"#对象池的使用\">#</a> 对象池的使用</h3>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">ObjectPool</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ObjectPoolTest</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\">GameObject</span> go<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Input<span class=\"token punctuation\">.</span><span class=\"token function\">GetKeyDown</span><span class=\"token punctuation\">(</span>KeyCode<span class=\"token punctuation\">.</span>A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                go<span class=\"token operator\">=</span> ObjectPool<span class=\"token punctuation\">.</span>Instance<span class=\"token punctuation\">.</span><span class=\"token function\">GetItem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>go<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Input<span class=\"token punctuation\">.</span><span class=\"token function\">GetKeyDown</span><span class=\"token punctuation\">(</span>KeyCode<span class=\"token punctuation\">.</span>S<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                ObjectPool<span class=\"token punctuation\">.</span>Instance<span class=\"token punctuation\">.</span><span class=\"token function\">FreeItem</span><span class=\"token punctuation\">(</span>go<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://pic.fasty97.top/blog/20200413/OKbR5Jr1cYUP.gif\" alt=\"\"></p>\n",
            "tags": [
                "unity"
            ]
        },
        {
            "id": "http://www.fasty97.top/2020/04/12/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%8D%8F%E7%A8%8B/",
            "url": "http://www.fasty97.top/2020/04/12/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%8D%8F%E7%A8%8B/",
            "title": "深入理解协程",
            "date_published": "2020-04-12T02:43:20.000Z",
            "content_html": "<blockquote>\n<p>在很多编程语言中都支持协程，例如在我们之前提到的 lua 中，协程是一个虚拟的线程技术。</p>\n</blockquote>\n<h3 id=\"简述\"><a class=\"markdownIt-Anchor\" href=\"#简述\">#</a> 简述</h3>\n<p>想一想我们平时购买电脑提及的，cpu 是四核八线程，其实 cpu 原先只能处理处理一件事，也就是说 cpu 默认是一个核心对应一条线程的，但是如果我们需要同时处理多个任务，而我们并没有那么多的线程数量。<br>\n然后前人们就提出了虚拟线程的概念，将 cpu 的单个线程，虚拟出多条线程，也就有了我们四核八线程，八核十六线程等的概念；在应用程序这边也有了线程和进程的概念，在把进程再细分，虚拟化软件的线程就得到了协程的概念。</p>\n<blockquote>\n<p>至此你知道，协程就是对线程的再细分，是线程的再虚拟化即可。</p>\n</blockquote>\n<h3 id=\"unity的协程\"><a class=\"markdownIt-Anchor\" href=\"#unity的协程\">#</a> unity 的协程</h3>\n<p>虽然说协程的概念并不新颖，但在现在大趋势的互联网开发领域可能很少涉及到 <code>协程</code> 这个词汇。<br>\n协程就是协力去完成一件事，这很容易想到多线程的概念，例如我们进行一次网络请求我们需要等待 response 之后才能下一步操作，此时我们就会用到 <code>互斥锁</code> 、 <code>线程安全</code> 等概念。<br>\n在 unity 中或者说在游戏引擎中，由于受到游戏主循环线程的制约，所以不能确保多线程的安全性，此时在同一线程下继续使用协程来承担多线程的工作就显得尤为重要。<br>\n（unity 也退出了以性能优先的 ECS 模式，摒弃 Mono 框架，实现了可多线程协助开发的开发模式）<br>\n下面我们就主要以 unity 的协程详细介绍。</p>\n<h3 id=\"unity协程示例\"><a class=\"markdownIt-Anchor\" href=\"#unity协程示例\">#</a> unity 协程示例</h3>\n<p>看这个例子：</p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建协程</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">IEnumerator</span> <span class=\"token function\">Cor1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">yield</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">WaitForSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">2f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2s到了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 启动协程</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">StartCoroutine</span><span class=\"token punctuation\">(</span><span class=\"token function\">Cor1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这是一个简单示例，可以看到协程需要返回一个 <code>IEnumerator</code>  可迭代对象，这本来是 Csharp 中的迭代器模式的实现，在 unity 中 unity 以此为原型实现了协程。</p>\n<h3 id=\"协程的参数\"><a class=\"markdownIt-Anchor\" href=\"#协程的参数\">#</a> 协程的参数</h3>\n<p>在上面我们使用了  <code>new WaitForSeconds()</code> ，这表示等待指定的时间。【注意 WaitForSeconds 与 Time.Scale 相关】<br>\n在上面使用的 WaitForSeconds 之外还有许多的参数，这些参数要么需要花费时间，要么返回 bool，总之就是需要确定一个 moveNext。</p>\n<h3 id=\"协程的使用情况\"><a class=\"markdownIt-Anchor\" href=\"#协程的使用情况\">#</a> 协程的使用情况</h3>\n<ol>\n<li>用于不确定的时长情况（例如：网络请求，读写文件）</li>\n<li>用于延迟执行</li>\n<li>可当做简易计时器使用（例如：生产一批敌人）</li>\n</ol>\n<h3 id=\"协程的嵌套\"><a class=\"markdownIt-Anchor\" href=\"#协程的嵌套\">#</a> 协程的嵌套</h3>\n<p>协程支持嵌套，如下是一个利用协程实现的巡逻的简单实现。<br>\n<strong>注：在 unity 中，协程返回 0 或 null 表示等待下一帧。</strong></p>\n<p><img data-src=\"https://pic.fasty97.top/blog/20200412/c1jAFxkeWJve.gif\" alt=\"\"></p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Coroutines</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 协程测试</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CoroutTest</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Transform<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> wayPoints<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> isLoop<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            isLoop <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token function\">StartCoroutine</span><span class=\"token punctuation\">(</span><span class=\"token function\">StartLoop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">IEnumerator</span> <span class=\"token function\">StartLoop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> point <span class=\"token keyword\">in</span> wayPoints<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                    <span class=\"token keyword\">yield</span> <span class=\"token keyword\">return</span> <span class=\"token function\">StartCoroutine</span><span class=\"token punctuation\">(</span><span class=\"token function\">MoveTarget</span><span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>isLoop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">IEnumerator</span> <span class=\"token function\">MoveTarget</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Vector3</span> target<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>transform<span class=\"token punctuation\">.</span>position<span class=\"token operator\">!=</span>target<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                transform<span class=\"token punctuation\">.</span>position <span class=\"token operator\">=</span> Vector3<span class=\"token punctuation\">.</span><span class=\"token function\">MoveTowards</span><span class=\"token punctuation\">(</span>transform<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token operator\">*</span> Time<span class=\"token punctuation\">.</span>deltaTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token keyword\">yield</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"让协程动起来\"><a class=\"markdownIt-Anchor\" href=\"#让协程动起来\">#</a> 让协程动起来</h3>\n<ul>\n<li>\n<p>StartCoroutine(nameof(StartLoop));<br>\n 以字符串形式启动协程，能够在外部停止协程，无法传递参数。</p>\n</li>\n<li>\n<p>StartCoroutine(StartLoop);<br>\n 以迭代器形式启动协程，能够传递参数，无法在外部使用 stop 停止协程。</p>\n</li>\n</ul>\n<h3 id=\"让协程停下来\"><a class=\"markdownIt-Anchor\" href=\"#让协程停下来\">#</a> 让协程停下来</h3>\n<p>协程本质是一个迭代器，当 moveNext 为 false 时即认为协程中所有的项目都已经执行完毕。<br>\n在 unity 中有以下几种方式停止协程：</p>\n<ol>\n<li>StopCoroutine ()  注意此方式只能停止以字符串形式启动的协程 【在协程外部使用】</li>\n<li>yield break   跳出协程【在协程内部使用】</li>\n<li>通过逻辑来停止 【使其协程执行条件不满足】</li>\n<li>设置物体不激活 【再次激活协程也不会恢复】</li>\n<li>StopAllCoroutine () 终止所有协程</li>\n</ol>\n<p>如上面协程嵌套的例子中，如果我们想要协程停止：</p>\n<ol>\n<li>设置 isLoop=false；让其在执行一次后不满足条件自动停下</li>\n<li>在协程内部 break</li>\n</ol>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>transform<span class=\"token punctuation\">.</span>position<span class=\"token operator\">==</span>wayPoints<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">yield</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>在协程外部 stop</li>\n</ol>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">StopCoroutine</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>StartLoop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"协程的设计思想\"><a class=\"markdownIt-Anchor\" href=\"#协程的设计思想\">#</a> 协程的设计思想</h3>\n<h4 id=\"协程是否取代update\"><a class=\"markdownIt-Anchor\" href=\"#协程是否取代update\">#</a> 协程是否取代 update？</h4>\n<p>通过上面的例子，你大可发现，协程其实是对 update 的另一种实现，我们甚至可以只使用协程而不使用任何 update 和 fixedUpdate 完成程序的编写。<br>\n但我们如果这样做不是本末倒置了吗？协程是 unity 推出的延迟执行的一种范式，其还是基于 update 为原理的上层实现。</p>\n<h4 id=\"使用协程会大大提升程序效率吗\"><a class=\"markdownIt-Anchor\" href=\"#使用协程会大大提升程序效率吗\">#</a> 使用协程会大大提升程序效率吗？</h4>\n<p>不会，协程本质上还是在一条线程上，尽管可以多条协程并行，但这些协程始终还是运行在一条线程上，速度和效率并不会得到很大的提升。反而开辟多条线程并行，线程需要多多协程的状态保持监听，在协程大量结束时会触发大量 GC 回收，可能会降低程序的运行效率。</p>\n<h3 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h3>\n<p>协程是运行在线程上的线程，其运作方式任然基于单线程，并不会因为使用协程提高程序的运行效率，但协程方便的书写方式，强大的功能能够提高我们作为开发者的开发效率。<br>\n从某种意义上来讲，协程更像是一个精美的语法糖</p>\n",
            "tags": [
                "unity"
            ]
        },
        {
            "id": "http://www.fasty97.top/2020/03/27/%E5%8A%A8%E7%94%BB%E8%A1%A5%E9%97%B4DOTween/",
            "url": "http://www.fasty97.top/2020/03/27/%E5%8A%A8%E7%94%BB%E8%A1%A5%E9%97%B4DOTween/",
            "title": "动画补间DOTween",
            "date_published": "2020-03-27T07:52:35.000Z",
            "content_html": "<blockquote>\n<p>在游戏中，我们可能需要这样的效果，将一个物体放大 2 倍，在 2s 之内完成；或者在点击 UI 时将 UI 逐渐消失。这样需要多作用效果进行逐步展示的效果被称之为补间。</p>\n</blockquote>\n<p>为了引出我们今天的主角 <code>DOTween</code> , 我们先来看看用 unity 的 animation 系统制作一个帧动画序列。</p>\n<p><img data-src=\"http://pic.fasty97.top/blog/20200327/QQOrLw0fzaM2.gif\" alt=\"示例效果\"></p>\n<h3 id=\"普通的动画\"><a class=\"markdownIt-Anchor\" href=\"#普通的动画\">#</a> 普通的动画</h3>\n<p>我们需要以下几个步骤：</p>\n<ol>\n<li>创建并录制动画</li>\n<li>在 Animator 中设置</li>\n<li>绑定按钮事件</li>\n</ol>\n<p>代码部分：</p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> Play <span class=\"token operator\">=</span> Animator<span class=\"token punctuation\">.</span><span class=\"token function\">StringToHash</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Play\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">StartAni</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    ui<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Animator<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">SetTrigger</span><span class=\"token punctuation\">(</span>Play<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"播放动画\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>我们需要既需要创建资源，有需要绑定设置，操作过程略微麻烦。</p>\n<h3 id=\"dotween动画\"><a class=\"markdownIt-Anchor\" href=\"#dotween动画\">#</a> DoTween 动画</h3>\n<p>在 DoTween 中我们仅仅需要绑定好按钮事件即可，不要创建动画资源，设置动画播发器等麻烦事。<br>\n这在轻度使用补间动画里是非常不错的。</p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">StartAni</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> rec <span class=\"token operator\">=</span> <span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>RectTransform<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    rec<span class=\"token punctuation\">.</span><span class=\"token function\">DOLocalMoveX</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>RectTransform 组件，这是 ui 所特有的描述 transform 的组件，第二行代码我们使用扩展方法<br>\n让我们来分析一下这 2 行代码，第一行 我们找到 UI 的 RectTransform 组件，这是 ui 所特有的描述 transform 的组件，第二行代码我们使用扩展方法 DOLocalMoveX 对组件位置进行补间，目的地位置为 0（此时也就是锚点的位置，我这里以中心作为锚点），第二个参数是完成动画的时间我选择 2。也就是说在 2s 内让这个 UI 从飞到他 x 轴的锚点位置。</p>\n<h4 id=\"通用方法\"><a class=\"markdownIt-Anchor\" href=\"#通用方法\">#</a> 通用方法</h4>\n<p>上面的扩展方法我们也可以使用如下的通用方法来替代。</p>\n<p><img data-src=\"http://pic.fasty97.top/blog/20200327/pQepanWBOJ70.png\" alt=\"通用方法\"></p>\n<h4 id=\"from动画\"><a class=\"markdownIt-Anchor\" href=\"#from动画\">#</a> From 动画</h4>\n<p><img data-src=\"http://pic.fasty97.top/blog/20200327/DlX2YONOLHtW.gif\" alt=\"From动画\"></p>\n<p>不论是我们使用扩展方法创建的动画还是通用方法创建的动画，我们都可以添加 <code>.Form()</code>  来设定为逆动画。</p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> rec <span class=\"token operator\">=</span> <span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>RectTransform<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>rec<span class=\"token punctuation\">.</span><span class=\"token function\">DOLocalMoveX</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">From</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"知识速记扩展方法\"><a class=\"markdownIt-Anchor\" href=\"#知识速记扩展方法\">#</a> 知识速记（扩展方法）</h3>\n<blockquote>\n<p>扩展方法使您能够向现有类型 “添加” 方法，而无需创建新的派生类型、重新编译或以其他方式修改原始类型</p>\n</blockquote>\n<p>如果之前的代码较多，在考虑重构时，扩展方法可比接口好用哦。</p>\n<h3 id=\"小案例-打字机效果\"><a class=\"markdownIt-Anchor\" href=\"#小案例-打字机效果\">#</a> 小案例 - 打字机效果</h3>\n<p><img data-src=\"http://pic.fasty97.top/blog/20200327/JSYE1SHQEGNg.gif\" alt=\"打字机效果\"></p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Text</span> info<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">ResizableTextArea</span></span><span class=\"token punctuation\">]</span><span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> infoData<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>info<span class=\"token punctuation\">.</span><span class=\"token function\">DOText</span><span class=\"token punctuation\">(</span>infoData<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"dotween的约定\"><a class=\"markdownIt-Anchor\" href=\"#dotween的约定\">#</a> DoTween 的约定</h3>\n<p>在详细讲解 DoTween 之前，我们先来了解一下 dotween 的设计原理和约定。<br>\n0. dotween 使用 tween（补间）来描述一段动画或缓动：<br>\n <code>rec.DOLocalMoveX(0, 2).From()</code>  就是一个 tween。<br>\n使用 Sequence（序列）来表述一组 tween，在下面介绍 Sequence。</p>\n<ol>\n<li>和我们平时使用 unity 一样，动态变化的部分防止在 update 或 fiexedUpdate 中，dotween 也是这样的，在游戏启动时他会将所有的 tween 的放置在一个容器中（使用了 <code>对象池</code> ）。</li>\n<li>不论是 tween 或者是 Sequence 默认都将在执行完成后自动杀死。</li>\n<li>tween 默认使用 timescale（也就是说我们常用的 timescale=0 暂停游戏也将暂停 tween）</li>\n</ol>\n<h3 id=\"on事件监听\"><a class=\"markdownIt-Anchor\" href=\"#on事件监听\">#</a> On 事件监听</h3>\n<p>我们可以对一个序列或者一个补间注册事件监听状态。<br>\n以下是一些事件：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>onComplete</td>\n<td>注册完成委托</td>\n</tr>\n<tr>\n<td>onKill</td>\n<td>注册杀死委托</td>\n</tr>\n<tr>\n<td>onPlaye</td>\n<td>注册开始委托</td>\n</tr>\n<tr>\n<td>onPause</td>\n<td>注册暂停委托</td>\n</tr>\n<tr>\n<td>onUpdate</td>\n<td>注册更新委托</td>\n</tr>\n<tr>\n<td>onRewind</td>\n<td>注册倒带委托</td>\n</tr>\n<tr>\n<td>OnStepComplete</td>\n<td>每次循环完成时</td>\n</tr>\n</tbody>\n</table>\n<p><strong>每个委托都有对应的方法类型可使用。</strong></p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>transform<span class=\"token punctuation\">.</span><span class=\"token function\">DOLocalMoveX</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>onKill <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>transform<span class=\"token punctuation\">.</span><span class=\"token function\">DOLocalMoveX</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"开始了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"set设定\"><a class=\"markdownIt-Anchor\" href=\"#set设定\">#</a> Set 设定</h3>\n<p>我们可以对一个序列或者一个补间设定细节。</p>\n<h4 id=\"setloop设定循环\"><a class=\"markdownIt-Anchor\" href=\"#setloop设定循环\">#</a> setLoop 设定循环</h4>\n<ul>\n<li>参数一： 循环次数（设定为 - 1 为无限循环）</li>\n<li>参数二： 循环类型</li>\n</ul>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>transform<span class=\"token punctuation\">.</span><span class=\"token function\">DOLocalMoveX</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">SetLoops</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> LoopType<span class=\"token punctuation\">.</span>Incremental<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th>循环类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Incremental</td>\n<td>递增，每次播放结束 star 和 end 都会加入到差异值中</td>\n</tr>\n<tr>\n<td>Restart</td>\n<td>重来，播放结束时从起点重新播放</td>\n</tr>\n<tr>\n<td>Yoyo</td>\n<td>摇摆播放</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"setease设定曲线\"><a class=\"markdownIt-Anchor\" href=\"#setease设定曲线\">#</a> SetEase 设定曲线</h4>\n<p><img data-src=\"https://img-blog.csdn.net/20151022164141659\" alt=\"\"></p>\n<h4 id=\"其他常用方法\"><a class=\"markdownIt-Anchor\" href=\"#其他常用方法\">#</a> 其他常用方法</h4>\n<ol>\n<li>setLink(Gameobject) :<br>\n 将 tween 链接到游戏物体，在物体被销毁时自动销毁对象（在序列中无效）</li>\n<li>setId(object):<br>\n 设定 tween 的 id，用于找到 tween，使用数字时效率最高，字符串次之</li>\n<li>SetAutoKill（bool）：<br>\n设定 tween 执行完是否自动杀死，复用 twenn 设为 false</li>\n<li>SetDelay（float）:<br>\n 设定开始播放前的延迟</li>\n<li>SetUpdate(UpdateType):<br>\n 设定更新模式</li>\n<li>SetAs(tween)：<br>\n使用其他 tween 的设定模板</li>\n</ol>\n<h3 id=\"sequence序列\"><a class=\"markdownIt-Anchor\" href=\"#sequence序列\">#</a> Sequence 序列</h3>\n<p>将很多 tween 放在一起称为一个序列 Sequence。</p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> mySeq <span class=\"token operator\">=</span> DOTween<span class=\"token punctuation\">.</span><span class=\"token function\">Sequence</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>            mySeq<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>rec<span class=\"token punctuation\">.</span><span class=\"token function\">DOLocalMoveX</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            mySeq<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">.</span><span class=\"token function\">DOText</span><span class=\"token punctuation\">(</span>infoData<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token comment\">// 在所有补间执行完时回调</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            mySeq<span class=\"token punctuation\">.</span><span class=\"token function\">AppendCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"动画播放完成！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token comment\">// 插入</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token comment\">/* 在给定的时间位置插入给定的补间，从而使您可以重叠补间，而不仅仅是将它们一个接一个地放置。*/</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            mySeq<span class=\"token punctuation\">.</span><span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5f</span><span class=\"token punctuation\">,</span> rec<span class=\"token punctuation\">.</span><span class=\"token function\">DOScaleX</span><span class=\"token punctuation\">(</span><span class=\"token number\">2f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token comment\">// 给定时间插入回调</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            mySeq<span class=\"token punctuation\">.</span><span class=\"token function\">InsertCallback</span><span class=\"token punctuation\">(</span><span class=\"token number\">2f</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"移动动画结束了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token comment\">// 在序列开头插入补间</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            mySeq<span class=\"token punctuation\">.</span><span class=\"token function\">Prepend</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">.</span><span class=\"token function\">DOText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"在开头插入的补间。。。\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            mySeq<span class=\"token punctuation\">.</span><span class=\"token function\">PrependCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"开头插入开始/动画开始播放\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token comment\">// 序列开始延迟</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            mySeq<span class=\"token punctuation\">.</span><span class=\"token function\">PrependInterval</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token comment\">// 暂停序列</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token comment\">// mySeq.Pause();</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token comment\">// 可以写在一起</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>             mySeq<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>rec<span class=\"token punctuation\">.</span><span class=\"token function\">DOLocalMoveX</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                 <span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">.</span><span class=\"token function\">DOText</span><span class=\"token punctuation\">(</span>infoData<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                 <span class=\"token punctuation\">.</span><span class=\"token function\">AppendCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"动画播放完成！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"dotween和协程\"><a class=\"markdownIt-Anchor\" href=\"#dotween和协程\">#</a> DoTween 和协程</h3>\n<p>看个例子：协程在完成动画之后执行</p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token return-type class-name\">IEnumerator</span> <span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> tt <span class=\"token operator\">=</span> transform<span class=\"token punctuation\">.</span><span class=\"token function\">DOMoveX</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">yield</span> <span class=\"token keyword\">return</span> tt<span class=\"token punctuation\">.</span><span class=\"token function\">WaitForCompletion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"动画完成\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>WaitForElapsedLoops（int）</td>\n<td>在循环指定次数或 tween 被杀死后</td>\n</tr>\n<tr>\n<td>WaitForKill</td>\n<td>在 tween 被杀死后</td>\n</tr>\n<tr>\n<td>WaitForPosition</td>\n<td>到达给定位置或被杀死</td>\n</tr>\n<tr>\n<td>WaitForRewind</td>\n<td>被杀死或重新播放</td>\n</tr>\n<tr>\n<td>WaitForStart</td>\n<td>开始播放</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"全局设定\"><a class=\"markdownIt-Anchor\" href=\"#全局设定\">#</a> 全局设定</h3>\n<p>我们可以使用 <code>DoTween</code>  类的静态字段来设置对应的默认行为。<br>\n如设定是否自动播放，是否自动销毁，对象池大小，默认曲线方式，所有的 tween 和 Sequence 序列在没有设定参数时默认取全局设定的值。<br>\n在 Pro 版本我们也可以在可视化面板中设置这些参数。</p>\n<p>在运行游戏后我们可以发现场景中多了一个 twenn 的对象，上面可以在游戏中实时查看 tween 的信息。</p>\n<p><img data-src=\"http://pic.fasty97.top/blog/20200328/3TwHh67DgDOd.png\" alt=\"\"></p>\n",
            "tags": [
                "unity"
            ]
        },
        {
            "id": "http://www.fasty97.top/2020/03/25/unity%20ScriptableObject%E7%9A%84%E4%BD%BF%E7%94%A8/",
            "url": "http://www.fasty97.top/2020/03/25/unity%20ScriptableObject%E7%9A%84%E4%BD%BF%E7%94%A8/",
            "title": "unity ScriptableObject的使用",
            "date_published": "2020-03-25T06:41:22.000Z",
            "content_html": "<h3 id=\"概念\"><a class=\"markdownIt-Anchor\" href=\"#概念\">#</a> 概念</h3>\n<p>ScriptableObject 是 unity 提出的针对数据存储资源的解决方案，能够将数据配置项 <code>可视化</code> 的展示在 unityd 属性面板中，并且极易于 json 进行数据交互。<br>\n个人使用过后觉得，其操作方式和继承非常类似，感觉像是对继承进一步封装使其更符合 unity 开发需要，让数据实体化，具现化的展示，通过拖拽式即可像拆装零件一般自由组合数据。（总而言之是对继承和多态的封装）</p>\n<h3 id=\"使用场景\"><a class=\"markdownIt-Anchor\" href=\"#使用场景\">#</a> 使用场景</h3>\n<p>用于 ScriptableObject 是针对 unity 的，在 unity 使用时比传统的数据格式如 json，xml 更加方便快捷。而且在面对诸如策划，美工等不了解程序的人员来说，上手更加快捷。<br>\n实质上，ScriptableObject 主要还是对数据进行存储和处理，只要是使用数据的地方都可以使用 ScriptableObject 进行配置式管理，这样相比直接继承式的数据传递，耦合性更低。<br>\n更符合 <code>多组合少继承</code> 的设计理念。</p>\n<h3 id=\"基本使用\"><a class=\"markdownIt-Anchor\" href=\"#基本使用\">#</a> 基本使用</h3>\n<p>遵循步骤：</p>\n<ol>\n<li>创建资源脚本，继承自 <code>UnityEngine.ScriptableObject</code></li>\n<li>创建资源对象</li>\n<li>在其他脚本中以组件形式指定资源对象</li>\n</ol>\n<p>我们可以将一些诸如敌人的血量，攻击，防御等数值存储在 ScriptableObject 中。</p>\n<h4 id=\"创建资源脚本\"><a class=\"markdownIt-Anchor\" href=\"#创建资源脚本\">#</a> 创建资源脚本</h4>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">CreateAssetMenu</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>menuName <span class=\"token operator\">=</span> <span class=\"token string\">\"My Assets/Create ItemAssets\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ItemAssets</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">UnityEngine<span class=\"token punctuation\">.</span>ScriptableObject</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 数据</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> title<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> price<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"title:</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token expression language-csharp\">title</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">  price:</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token expression language-csharp\">price</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"指定资源使用\"><a class=\"markdownIt-Anchor\" href=\"#指定资源使用\">#</a> 指定资源使用</h4>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 使用</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">ScriptableObject</span> itemAsset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>itemAsset<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>itemAsset<span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"单例资源脚本\"><a class=\"markdownIt-Anchor\" href=\"#单例资源脚本\">#</a> 单例资源脚本</h3>\n<p>在平时我们一般使用 GameManager 实现单例模式并设置在切换场景时不销毁来达到全局数据的管理。<br>\n在 ScriptableObject 中，我们同样可以达到这个效果，由于 ScriptableObject 是一个资源可直接存储在磁盘，不需要设置不销毁也能存储全局数据，管理同步。</p>\n<h4 id=\"创建单例资源\"><a class=\"markdownIt-Anchor\" href=\"#创建单例资源\">#</a> 创建单例资源</h4>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Linq</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Assets</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">CreateAssetMenu</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>menuName <span class=\"token operator\">=</span> <span class=\"token string\">\"My Assets/Create GameStateAssets\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GameStateAsset</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ScriptableObject</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> level<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> score<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">GameStateAsset</span> _instance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">GameStateAsset</span> Instance <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">get</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_instance<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    _instance<span class=\"token operator\">=</span> Resources<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">FindObjectsOfTypeAll</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>GameStateAsset<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">FirstOrDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_instance<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                   _instance<span class=\"token operator\">=</span> <span class=\"token generic-method\"><span class=\"token function\">CreateInstance</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>GameStateAsset<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                   _instance<span class=\"token punctuation\">.</span>hideFlags <span class=\"token operator\">=</span> HideFlags<span class=\"token punctuation\">.</span>DontSave<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token keyword\">return</span> _instance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"level:</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token expression language-csharp\">level</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">  score:</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token expression language-csharp\">score</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"使用单例资源\"><a class=\"markdownIt-Anchor\" href=\"#使用单例资源\">#</a> 使用单例资源</h4>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>GameStateAsset<span class=\"token punctuation\">.</span>Instance<span class=\"token punctuation\">.</span>level <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>GameStateAsset<span class=\"token punctuation\">.</span>Instance<span class=\"token punctuation\">.</span>score <span class=\"token operator\">=</span> <span class=\"token number\">255</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span>GameStateAsset<span class=\"token punctuation\">.</span>Instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"临时资源\"><a class=\"markdownIt-Anchor\" href=\"#临时资源\">#</a> 临时资源</h3>\n<p>有时我们需要动态的生成一些对象，这些对象的数据可能并不是静态的设置好的，并且只是临时的使用这些数据，我们可以直接创建临时的 ScriptableObject 来处理这种情况。</p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> item <span class=\"token operator\">=</span> ScriptableObject<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">CreateInstance</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>ItemAssets<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>item<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token string\">\"测试物品\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>item<span class=\"token punctuation\">.</span>price <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>ScriptableObject<span class=\"token punctuation\">.</span><span class=\"token function\">Destroy</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"插槽式资源\"><a class=\"markdownIt-Anchor\" href=\"#插槽式资源\">#</a> 插槽式资源</h3>\n<p>有时数据是需要被再加工的，加工的过程不应该影响到数据的使用，对于使用数据的一方，不必知晓数据的具体加工过程，这些过程就好像一个个插槽，就等待着期望的数据进入即可。<br>\n从这里我们也可以看出，在 ScriptableObject 中是可以包含 <code>方法</code> 的。</p>\n<h4 id=\"创建资源\"><a class=\"markdownIt-Anchor\" href=\"#创建资源\">#</a> 创建资源</h4>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PowerUpAsset</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ScriptableObject</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GameObject</span> go<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">CreateAssetMenu</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>menuName <span class=\"token operator\">=</span> <span class=\"token string\">\"My Assets/Create HealthUpAsset\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HealthUpAsset</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">PowerUpAsset</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GameObject</span> go<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        go<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Health<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>currHealth <span class=\"token operator\">+=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"使用资源\"><a class=\"markdownIt-Anchor\" href=\"#使用资源\">#</a> 使用资源</h4>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ItemHpUp</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HealthUpAsset</span> hpAsset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnTriggerEnter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collider</span> other<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span><span class=\"token function\">CompareTag</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Player\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            hpAsset<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span>gameObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"与json交互\"><a class=\"markdownIt-Anchor\" href=\"#与json交互\">#</a> 与 Json 交互</h3>\n<p>ScriptableObject 和 json 有很高的亲和性（ScriptableObject 就是基于类的延伸）<br>\n在某些情况下，我们可能需要将 json 数据存入 ScriptableObject 或将 ScriptableObject 写入 json 来实现一些如游戏存档等的功能。</p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Linq</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine<span class=\"token punctuation\">.</span>Serialization</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Assets<span class=\"token punctuation\">.</span>TalkJson</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">CreateAssetMenu</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>menuName <span class=\"token operator\">=</span> <span class=\"token string\">\"My Assets/Create GameFileAsset\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GameFileAsset</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ScriptableObject</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">System<span class=\"token punctuation\">.</span>Serializable</span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Archive</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> DateTime <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Name <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> Level <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">GameFileAsset</span> _instance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">GameFileAsset</span> Instance</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">get</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_instance<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                    _instance <span class=\"token operator\">=</span> Resources<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">FindObjectsOfTypeAll</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>GameFileAsset<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">FirstOrDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token preprocessor property\">#<span class=\"token directive keyword\">if</span> UNITY_EDITOR</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_instance<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                    <span class=\"token function\">InitializeFromDefault</span><span class=\"token punctuation\">(</span>UnityEditor<span class=\"token punctuation\">.</span>AssetDatabase<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">LoadAssetAtPath</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>GameFileAsset<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Assets/Test game file.asset\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token keyword\">return</span> _instance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span>Archive<span class=\"token punctuation\">></span></span> archives<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Archive</span> currArchive<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">InitializeFromDefault</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GameFileAsset</span> file<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_instance<span class=\"token punctuation\">)</span> <span class=\"token function\">DestroyImmediate</span><span class=\"token punctuation\">(</span>_instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            _instance <span class=\"token operator\">=</span> <span class=\"token function\">Instantiate</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            _instance<span class=\"token punctuation\">.</span>hideFlags <span class=\"token operator\">=</span> HideFlags<span class=\"token punctuation\">.</span>HideAndDontSave<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>       <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">LoadFromJson</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> path<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>       <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>           <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_instance<span class=\"token punctuation\">)</span> <span class=\"token function\">DestroyImmediate</span><span class=\"token punctuation\">(</span>_instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>           _instance <span class=\"token operator\">=</span> ScriptableObject<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">CreateInstance</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>GameFileAsset<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>           JsonUtility<span class=\"token punctuation\">.</span><span class=\"token function\">FromJsonOverwrite</span><span class=\"token punctuation\">(</span>System<span class=\"token punctuation\">.</span>IO<span class=\"token punctuation\">.</span>File<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAllText</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> _instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>           _instance<span class=\"token punctuation\">.</span>hideFlags <span class=\"token operator\">=</span> HideFlags<span class=\"token punctuation\">.</span>HideAndDontSave<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>       <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">SaveToJson</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> path<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>       <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>           Debug<span class=\"token punctuation\">.</span><span class=\"token function\">LogFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Saving game file to &#123;0&#125;\"</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>           System<span class=\"token punctuation\">.</span>IO<span class=\"token punctuation\">.</span>File<span class=\"token punctuation\">.</span><span class=\"token function\">WriteAllText</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> JsonUtility<span class=\"token punctuation\">.</span><span class=\"token function\">ToJson</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"个人理解\"><a class=\"markdownIt-Anchor\" href=\"#个人理解\">#</a> 个人理解</h3>\n<p>ScriptableObject 其实就是对类的特殊处理，在 unity 中将这里的类脚本特异性的识别让其数据可视化，并在内部实现了实例化处理，让其可以直接在脚本中使用而无需实例化对象。</p>\n<p>[toc]</p>\n",
            "tags": [
                "unity"
            ]
        },
        {
            "id": "http://www.fasty97.top/2020/03/20/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E7%9C%8B%E6%BC%AB%E7%94%BB/",
            "url": "http://www.fasty97.top/2020/03/20/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E7%9C%8B%E6%BC%AB%E7%94%BB/",
            "title": "如何优雅的看漫画",
            "date_published": "2020-03-20T05:10:45.000Z",
            "content_html": "<blockquote>\n<p>最近挺迷漫画的，但如何正确优雅的看漫画却是一大难题</p>\n</blockquote>\n<h3 id=\"pc端\"><a class=\"markdownIt-Anchor\" href=\"#pc端\">#</a> PC 端</h3>\n<p>在 Pc 端看漫画还是蛮爽的，屏幕比较大，看的字迹也会清楚一些。</p>\n<h4 id=\"漫画阅读器\"><a class=\"markdownIt-Anchor\" href=\"#漫画阅读器\">#</a> 漫画阅读器</h4>\n<ul>\n<li>\n<p>Cover<br>\ncover 可以直接在 win10 商店下载，免费版可以同时管理 25 本漫画书，并且可以搭载云服务器同步您的漫画库，操作起来非常顺手，缺点是打开页数较多的漫画时，可能加载会较慢。<br>\n<img data-src=\"http://pic.fasty97.top/blog/20200316/6s1teEz5I3JI.png\" alt=\"\"></p>\n</li>\n<li>\n<p>Eriri<br>\nEriri 是 <code>蝉时雨</code> 大佬的开源项目，能够无限制的管理漫画书，操作简洁，加载漫画迅速，但在一些小方面仍需改进，如缺少漫画分类库，缺少日漫的从右至左的阅读方式等。<br>\n<img data-src=\"http://pic.fasty97.top/blog/20200316/YSuhMUmh2t5Q.png\" alt=\"\"><br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2NoYW5zaGl5dWN4L2VyaXJp\">github</span></p>\n</li>\n</ul>\n<h3 id=\"移动端\"><a class=\"markdownIt-Anchor\" href=\"#移动端\">#</a> 移动端</h3>\n<p>在移动端可以方便的随时随地看漫画，当然移动端的软件可不必 PC 端差哦。</p>\n<h4 id=\"tachiyomi\"><a class=\"markdownIt-Anchor\" href=\"#tachiyomi\">#</a> tachiyomi</h4>\n<p>我强烈安利 tachiyomi,tachiyomi 完全开源免费，由全世界的动漫爱好者一同维护和迭代，现在的版本已经非常稳定和方便了，可以通过添加插件的方式，方便的查看和下载国内外的漫画，并且可绑定云存储容器实现漫画库的实时同步，使用原生 android 开发，流畅度极佳！<br>\n<img data-src=\"http://pic.fasty97.top/blog/20200320/9hulbq79NiLw.png\" alt=\"\"></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2lub3JpY2hpL3RhY2hpeW9taQ==\">github</span></p>\n<h4 id=\"exview\"><a class=\"markdownIt-Anchor\" href=\"#exview\">#</a> Exview</h4>\n<p>Exview 不仅仅是一个漫画阅读器，更像是一个二次元圈子，通过各种各样的插件和扩展，不仅能使用 Exview 来看漫画，更可以看小说，看动漫，看 coser 等等；但整体软件非 android 原生开发，且优化极差，导致经常卡死，此软件也有电脑版，但依然存在这些问题。<br>\n<img data-src=\"http://pic.fasty97.top/blog/20200320/cWFnI8KVrldf.png\" alt=\"\"></p>\n<h3 id=\"下载漫画\"><a class=\"markdownIt-Anchor\" href=\"#下载漫画\">#</a> 下载漫画</h3>\n<p>下载漫画我推荐使用 漫画控，买个授权也挺便宜的。<br>\n<img data-src=\"http://pic.fasty97.top/blog/20200316/NCm32ijzDtjY.png\" alt=\"\"></p>\n",
            "tags": []
        },
        {
            "id": "http://www.fasty97.top/2020/02/10/Timeline%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/",
            "url": "http://www.fasty97.top/2020/02/10/Timeline%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/",
            "title": "Timeline的基本使用",
            "date_published": "2020-02-10T05:53:35.000Z",
            "content_html": "<p>Unity 版本号：<font color=green>2019.3.0f6</font></p>\n<hr />\n<p>TimeLine 是 unity2017 推出的新功能，其采用时间线的形式组合场景资源， 可以用于编排游戏剧情，过场动画，斩杀镜头，人物特写等效果。</p>\n<h3>创建TimeLine</h3>\n<p>用于播放 TimeLine 的物体必须有这个组件：<br>\n<img data-src=\"http://pic.fasty97.top/blog/20200210/CUXzMDxo2tsx.png\" alt=\"组件\"></p>\n<table>\n<thead>\n<tr>\n  <th align=\"center\">参数名</th>\n  <th align=\"center\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td align=\"center\">Playable</td>\n  <td align=\"center\">Playable资源（TimeLine资源）</td>\n</tr>\n<tr>\n  <td align=\"center\">Update Method</td>\n  <td align=\"center\">更新模式</td>\n</tr>\n<tr>\n  <td align=\"center\">Play On Awake</td>\n  <td align=\"center\">是否启动时自动播放</td>\n</tr>\n<tr>\n  <td align=\"center\">Wrap Mode</td>\n  <td align=\"center\">结束模式，None播放完回到原先属性，Loop循环播放，Hood播放完维持改变</td>\n</tr>\n<tr>\n  <td align=\"center\">Initial Time</td>\n  <td align=\"center\">延迟时间</td>\n</tr>\n</tbody>\n</table>\n<h3>轨道面板</h3>\n<p><img data-src=\"http://pic.fasty97.top/blog/20200210/0l1DQytDcsA2.png\" alt=\"轨道面板\"><br>\n点击左侧的＋，可以添加轨道，这是一个类似视频剪辑的界面，我们可以方便的对轨道进行移动和剪辑。</p>\n<h4>Activation</h4>\n<p>Activation 用于表示物体的激活状态：<br>\n<img data-src=\"http://pic.fasty97.top/blog/20200210/vIzC588mJlSO.gif\" alt=\"Activation\"></p>\n<h4>Animation</h4>\n<p>Animation 用于播放动画，既可以播放已有的动画，也可以自己录制帧动画来使用。<br>\n<strong>注意：使用此轨道的物体会被创建一个 Animator Controller，这个组件不能被删除。</strong><br>\n<img data-src=\"http://pic.fasty97.top/blog/20200210/gizvroAPPTAo.gif\" alt=\"Animation\"></p>\n<h4>Audio</h4>\n<p>Audio 轨道用于播放音效，如果不指定 AudioSource 就无法细致调节效果。<br>\n<img data-src=\"http://pic.fasty97.top/blog/20200210/zEYKWKgDJrlk.png\" alt=\"Audio\"><br>\n 每个轨道在属性面板都有不同的属性，Audio 面板如下：<br>\n!{Audio 属性}(<span class=\"exturl\" data-url=\"aHR0cDovL3BpYy5mYXN0eTk3LnRvcC9ibG9nLzIwMjAwMjEwL0dvRURiN3FiZFNIUi5wbmc=\">http://pic.fasty97.top/blog/20200210/GoEDb7qbdSHR.png</span>)</p>\n<h4>Control</h4>\n<p>Control 轨道和 Activation 轨道有点相似，但不同的是 Control 轨道可以同时控制多个物体的激活状态。<br>\n<img data-src=\"http://pic.fasty97.top/blog/20200210/y5G5Rhig2kPn.png\" alt=\"Control\"></p>\n<h4>Signal-任意轨道</h4>\n<p>Signal 是非常重要的轨道，在使用 TimeLine 时，你可能会有这样的想法，能不能在时间线上，调用我们自定义的方法呢，在 2019 之前可以通过剪辑间接的完成事件的调用；但现在有了 Signal 轨道的加持，我们可以非常方便的在任意时刻调用方法了。<br>\n创建一个简单的测试脚本，并将脚本挂载在游戏物体上。</p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SignalTest</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Signal!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>右键单击任意轨道：<br>\n<img data-src=\"http://pic.fasty97.top/blog/20200210/SAiR90ho2iVi.gif\" alt=\"\"><br>\n此时在属性面板中，可以看到：<br>\n<img data-src=\"http://pic.fasty97.top/blog/20200210/rkIgMqVhBiI3.png\" alt=\"\"><br>\n为了监听这个事件，unity 提示我们缺少一个监听器，点击 Add 添加一个。<br>\n添加好监听器，我们需要创建一个监听实例，这个实例是可以复用的。<br>\n<img data-src=\"http://pic.fasty97.top/blog/20200210/fbn8zd2A3rD3.png\" alt=\"\"></p>\n<p>完成以上步骤我们发现原先有警告的小白标变成了<font color=red>白色</font>。这说明我们设置正确了，然后我们需要绑定事件给实例：<br>\n<img data-src=\"http://pic.fasty97.top/blog/20200210/YYCEgJkFVtkl.png\" alt=\"\"><br>\n尝试运行（播放游戏）一下发现在时间轴运行到小白标时会自动调用我们绑定的方法。</p>\n<h3>Signal-指定轨道</h3>\n<p>上面实现的 Signal 是针对于任意轨道来说的，如果我们需要很多的 Signal 处理起来可能会发生混乱，所以官方提供了专门的 Signal 轨道。<br>\n先给我们的物体添加：<br>\n<img data-src=\"http://pic.fasty97.top/blog/20200210/07nzVWaY41Yw.png\" alt=\"\"><br>\n在属性面板中我们可以对事件实例绑定多个方法，统一管理：<br>\n<img data-src=\"http://pic.fasty97.top/blog/20200210/IvGBUJotShrO.png\" alt=\"\"></p>\n<h3>小技巧</h3>\n<p>在轨道左侧可以点击三点，然后选择 Mute（静音）对指定轨道进行屏蔽。<br>\n在右侧轨道面板中，可以通过重叠区块实现 2 个区块之间的过渡效果。<br>\n可设置轨道的淡入淡出效果：<br>\n<img data-src=\"http://pic.fasty97.top/blog/20200210/TKt9DScaWgab.png\" alt=\"\"></p>\n<h3>驱动摄像机</h3>\n<p>做了一个超级丑的摄像机变换效果：<br>\n<img data-src=\"http://pic.fasty97.top/blog/20200210/UVEeBVXqcg7D.gif\" alt=\"\"></p>\n<h3>代码驱动TimeLine</h3>\n<p>有时候我们可能需要通过代码动态的启动 TimeLine，这也很容易实现：</p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Signal</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">PlayableDirector</span> playDir<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Fac</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Fac..\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Input<span class=\"token punctuation\">.</span><span class=\"token function\">GetKeyDown</span><span class=\"token punctuation\">(</span>KeyCode<span class=\"token punctuation\">.</span>A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            playDir<span class=\"token punctuation\">.</span><span class=\"token function\">Play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "unity"
            ]
        },
        {
            "id": "http://www.fasty97.top/2020/02/07/Lua-%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B9%9D%EF%BC%89%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/",
            "url": "http://www.fasty97.top/2020/02/07/Lua-%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B9%9D%EF%BC%89%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/",
            "title": "Lua-基础（九）面向对象",
            "date_published": "2020-02-07T08:20:13.000Z",
            "content_html": "<blockquote>\n  lua虽然没有面向对象的概念，但我们实现面向对象并不困难\n</blockquote>\n<p>一下内容我参考了多处 lua 教程，很多教程讲解模糊晦涩，我整理了以下以简明的说明方式完成 lua 面向对象这部分的内容，希望大家喜欢。</p>\n<h3>面向对象OOP</h3>\n<p>学习过 Java，C#，Ruby 等的同学可能不会对面向对象陌生，如果你是第一次接触面向对象？<br>\n那么我总结一下就是:<code>将事物抽象成类，将特征抽象为字段和属性。</code><br>\n在 Lua 中，最强大的就是 table 这种数据结构了，来看下面这个例子：</p>\n<pre><code class=\"line-numbers\">Cat=&#123;name=\"defalut\",color=\"白色\"&#125;\nfunction Cat.say()\n    print(Cat.name..'  '..Cat.color..':','喵喵喵~')\nend\nCat.name='小白'\nCat.say()\n</code></pre>\n<p>运行结果为:<code>小白  白色：喵喵喵～</code></p>\n<p>在例子中，我们创建了一张表，并在表中提供 2 个字段和一个函数，并通过表名。字段名调用字段和方法，这像不像 一个<code>静态类</code>呢？<br>\n以下是 Csharp 的一个类似的静态类：</p>\n<pre><code class=\"language-csharp line-numbers\">class Program\n&#123;\n    static void Main(string[] args)\n    &#123;\n        Cat.name = \"小白\";\n        Cat.color = \"白色\";\n        Cat.Show();\n    &#125;\n&#125;\n\nstatic class Cat\n&#123;\n    public static string name;\n    public static string color;\n\n    public static void Show()\n    &#123;\n        System.Console.WriteLine(\"&#123;0&#125;  &#123;1&#125;   喵喵喵~\", name, color);\n    &#125;\n&#125;\n</code></pre>\n<p>分析一下：之所以是静态类是因为我们只在创建表的时候创建了一个对象，后面无论我们进行操作我们都没有创建一个新对象！</p>\n<h3>创建对象</h3>\n<pre><code class=\"line-numbers\">function Cat:new()\n    local o=&#123;&#125;\n    setmetatable(o,self)\n    self.__index=self\n    return o\nend\n\nfunction Cat:say()\n    print(self.name..'  '..self.color..':','喵喵喵~')\nend\n\nlocal ca=Cat:new()\nca:say()\n</code></pre>\n<p>在上面的例子中，我们首先添加了一个 Cat：new 的函数，这类似于我们 Csharp 中的构造函数，<br>\n在构造函数中，我们主要做以下几件事：</p>\n<ul>\n<li>创建空表对象</li>\n<li>设置空表的元表</li>\n<li>设置_index</li>\n<li>返回空表对象</li>\n</ul>\n<p>在每次创建对象时，我们都通过:new 函数来创建。<br>\n在这里我们使用到了：<code>setmetatable(o,self)</code>这句话的意思是设置 o 的元表为自己（也就是 Cat 对象），<code>self.__index=self</code>是设置元方法索引为 Cat 对象，这 2 句话总体就是让对象 o 具有 Cat 对象的属性和函数。<br>\n当然元表，元方法的作用还有很多，也远比这要复杂，感兴趣可以自己去了解～</p>\n<h3>继承和多态</h3>\n<p>让我们来看这个例子：</p>\n<pre><code class=\"line-numbers\">-- 基础类\nHuman=&#123;name='defaultName',age=0&#125;\nfunction Human:new()\n    local o=&#123;&#125;\n    self.__index=self\n    setmetatable(o,self)\n    return o\nend\n\nfunction Human:show()\n    print('Base:','Name:',self.name,'Age:',self.age)\nend\n\nlocal myhum=Human:new()\nmyhum.name=\"小蓝\"\nmyhum.age=20\nmyhum:show()\n\n-- 派生类\nChinese=Human:new()\nfunction Chinese:new()\n    local o=&#123;&#125;\n    setmetatable(o,self)\n    self.__index=self\n    return o\nend\nfunction Chinese:show()\n    print('Chinese:','Name:',self.name,'Age:',self.age)\nend\n\nlocal ch=Chinese:new()\nch.name=\"小红\"\nch.age=15\nch:show()\n\nmyhum:show()\n\nch:show()\n\nlocal ch2=Chinese:new()\n\nch2:show()\n\n\nEnglish=Human:new()\n\nfunction English:show()\n    print('English:','Name:',self.name,'Age:',self.age)\nend\n\nlocal eg=English:new()\neg.name=\"Fasty\";eg.age=22\neg:show()\n</code></pre>\n<p>!{运行结果}(<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjAvMDIvMDcvMk5FUE9TQ0RYdHVaWUx5LnBuZw==\">https://i.loli.net/2020/02/07/2NEPOSCDXtuZYLy.png</span>)</p>\n<p>在 lua 中基于弱类型的优势，对于函数重写，只需要重新定义一遍函数即可。</p>\n<p>至此面向对象的封装，继承，多态都实现咯～</p>\n<p>[toc]</p>\n",
            "tags": [
                "Lua"
            ]
        },
        {
            "id": "http://www.fasty97.top/2020/02/06/Lua-%E5%9F%BA%E7%A1%80%EF%BC%88%E5%85%AB%EF%BC%89%E4%B8%87%E7%94%A8table%E6%9E%84%E5%BB%BA%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/",
            "url": "http://www.fasty97.top/2020/02/06/Lua-%E5%9F%BA%E7%A1%80%EF%BC%88%E5%85%AB%EF%BC%89%E4%B8%87%E7%94%A8table%E6%9E%84%E5%BB%BA%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/",
            "title": "Lua-基础（八）万用table构建数据结构",
            "date_published": "2020-02-06T11:55:55.000Z",
            "content_html": "<p>平时我们在其他语言中，经常会用到如数组，矩阵，队列和栈等一些数据结构，而 lua 似乎并没有这些数据类型，lua 只提供了 table 类型，但是通过 table 类型我们几乎可以实现所有常用的数据类型。</p>\n<h3>数组</h3>\n<p>数组的实现非常简单，table 的数据类型类似与 C# 中的字典，存储 kv 对，我们只取 value 即可。</p>\n<pre><code class=\"language-lua line-numbers\">local arr=&#123;1,2,3,6,4&#125;\n\nfor key, value in pairs(arr) do\n    print(key,value)\nend\n</code></pre>\n<h3>矩阵</h3>\n<p>矩阵也被称为多维数组，我们只需要嵌套一个 table 即可。</p>\n<pre><code class=\"language-lua line-numbers\">local mt=&#123;&#125;\nfor i = 1, 10 do\n    mt[i]=&#123;&#125;\n    for j = 1, 10 do\n        mt[i][j]=0\n    end\nend\n</code></pre>\n<h3>链表</h3>\n<p>对于像链表这样的数据结构，我们可以方便的通过一个指针域实现。</p>\n<pre><code class=\"language-lua line-numbers\">-- 链表\nlocal l=nil\nlocal l2=&#123;next=nil,value=10&#125;\nl=&#123;next=l2,value=200&#125;\n\nwhile l do\n    print(l.value)\n    l=l.next\nend\n</code></pre>\n<h3>队列和栈</h3>\n<p>下面以队列为例，栈也是类似的构造：</p>\n<pre><code class=\"language-lua line-numbers\">-- 队列和栈\nQueue=&#123;&#125;\nfunction Queue.new()\n    return&#123;first=0,last=-1&#125;\nend\n\nfunction Queue.push(queue,value)\n    local first=queue.first-1\n    queue.first=first\n    queue[first]=value\nend\n\nfunction Queue.pop(queue)\n    local last=queue.last\n    if queue.last>last then\n        error(\"queue 为空\")\n    end\n    local value=queue[last]\n    queue[last]=nil\n    queue.last=last-1\n    return value\nend\n\nlocal qq=Queue.new()\nQueue.push(qq,5)\nQueue.push(qq,8)\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://www.fasty97.top/2020/02/05/Lua-%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%83%EF%BC%89%E7%A8%8B%E5%BA%8F%E5%8D%8F%E5%90%8C/",
            "url": "http://www.fasty97.top/2020/02/05/Lua-%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%83%EF%BC%89%E7%A8%8B%E5%BA%8F%E5%8D%8F%E5%90%8C/",
            "title": "Lua-基础（七）程序协同",
            "date_published": "2020-02-05T12:06:51.000Z",
            "content_html": "<blockquote>\n  使用协同程序可以更加高效的处理数据或执行任务\n</blockquote>\n<h3>协同的基础</h3>\n<h4>创建协同程序</h4>\n<img data-src=\"https://i.loli.net/2020/02/05/QFZCUHvoqLlxs8W.png\" alt=\"image.png\" />\n<pre><code class=\"language-lua line-numbers\">local co=coroutine.create(function ()\n    print('Hi')\nend)\n</code></pre>\n<h4>协程的状态</h4>\n<img data-src=\"https://i.loli.net/2020/02/05/jgQadC17IR5UKzs.png\" alt=\"image.png\" />\n协同有三个状态：<code>挂起态</code>、<code>运行态</code>、<code>停止态</code>。当我们创建一个协同程序时他开始的状态为挂起态，也就是说我们创建协同程序的时候不会自动运行，可以使用 status 函数检查协同的状态：\n<pre><code class=\"language-lua line-numbers\">print(coroutine.status(co))\n</code></pre>\n<h4>启动协程</h4>\n<p>使用<code>coroutine.resume()</code>可以启动协程<br>\n<img data-src=\"https://i.loli.net/2020/02/05/hfGsy8jZpeYXJK7.png\" alt=\"image.png\" /><br>\n例如：<br>\n<code>coroutine.resume(co)</code><br>\n启动协程后，会立即执行协程方法中的内容。</p>\n<h4>挂起协程</h4>\n<p>如有需要<code>coroutine.yield()</code>可以挂起协程。<br>\n让我们来看下面这个例子，创建一个协程，在协程函数中构建一个循环，并在打印后挂起当前协程，我们不断的去调用协程。</p>\n<pre><code class=\"line-numbers\">local th=coroutine.create(function ()\n    for i = 1, 3 do\n        print(\"th=\",i)\n        coroutine.yield()\n    end\nend)\ncoroutine.resume(th)\n\ncoroutine.resume(th)\ncoroutine.resume(th)\ncoroutine.resume(th)\nprint(coroutine.resume(th)) -- 程序结束返回false\n</code></pre>\n<p>其运行结果如下图所示:<br>\n<img data-src=\"https://i.loli.net/2020/02/05/nbsoW7vOMuGApD4.png\" alt=\"image.png\" /><br>\n我们发现，<strong>在协程死亡时，coroutine.resume 就返回 false，并返回错误消息</strong>。</p>\n<p><strong>Ps</strong>:resume 运行在保护模式下，因此如果协同内部存在错误 Lua 并不会抛出错误而是将错误返回给 resume 函数.</p>\n<h4>在resume和yield间交换数据</h4>\n<p>有没有办法在协程挂起时，返回一些数据呢？或在每次启动协程时，发送一些数据？<br>\n在 lua 中我们可以在 resume 和 yield 间交换数据。</p>\n<p>传递参数：</p>\n<pre><code class=\"line-numbers\">-- 传递参数\nlocal th2=coroutine.create(function (a,b,c)\n    print(\"th2\",a,b,c)\nend)\n\ncoroutine.resume(th2,1,2,3)\n</code></pre>\n<p>当然我们也可以传递协程结果：</p>\n<pre><code class=\"line-numbers\">local th3=coroutine.create(function ()\n    return 6,7\nend)\n\nprint(coroutine.resume(th3))\n</code></pre>\n<p><strong>Ps</strong>:<br>\nLua 提供的这种协同我们称为不对称的协同，就是说挂起一个正在执行的协同的函数与使一个被挂起的协同再次执行的函数是不同的，有些语言提供对称的协同，这种情况下，由执行到挂起之间状态转换的函数是相同的。</p>\n<h3>管道和过滤器</h3>\n<p>这个课题有点难，啃书中。。。<br>\n待更新</p>\n",
            "tags": [
                "Lua"
            ]
        },
        {
            "id": "http://www.fasty97.top/2020/02/04/Lua-%E5%9F%BA%E7%A1%80%EF%BC%88%E5%85%AD%EF%BC%89%E5%8A%A0%E8%BD%BD%E4%BD%BF%E7%94%A8%E5%85%B6%E4%BB%96Lua%E7%9A%84%E5%87%BD%E6%95%B0/",
            "url": "http://www.fasty97.top/2020/02/04/Lua-%E5%9F%BA%E7%A1%80%EF%BC%88%E5%85%AD%EF%BC%89%E5%8A%A0%E8%BD%BD%E4%BD%BF%E7%94%A8%E5%85%B6%E4%BB%96Lua%E7%9A%84%E5%87%BD%E6%95%B0/",
            "title": "Lua-基础（六）加载使用其他Lua的函数",
            "date_published": "2020-02-04T13:08:52.000Z",
            "content_html": "<blockquote>\n  lua的特点之一就是方便的调用chunk（代码块）\n</blockquote>\n<p>通过这种特性，我们可以在 a.lua 中调用 b.lua 的内容，甚至可以从字符串文本中调用 lua 当做函数执行～</p>\n<h3>load</h3>\n<p>让我们先来看一下 load 函数的定义：<br>\n!{load 函数}(<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjAvMDIvMDQvRFlHVjJDU1dvUGNMNDl2LnBuZw==\">https://i.loli.net/2020/02/04/DYGV2CSWoPcL49v.png</span>)<br>\n 通过定义我们可以知道 load 函数可以加载文本和二进制类型代码块，来让我们尝试一下：</p>\n<pre><code class=\"line-numbers\">local f=load('I=I+1')\nI=0\nf()\nprint('I='..I)\nf()\nprint('I2='..I)\n</code></pre>\n<p>在这个例子中，我们使用 load 加载了<code>’I=I+1’</code>这一串字符串，并把加载结果存储在 f 中。通过使用<code>f()</code>来调用函数。</p>\n<h3>loadFile</h3>\n<p><img data-src=\"https://i.loli.net/2020/02/04/vNUObGS7D4EczrV.png\" alt=\"loadFile\"><br>\n 和 load 类似的还有 loadfile，但 loadfile 加载的是文件而非字符串。</p>\n<p>我们在 funTest.lua 文件中写一句输出：<code>print(‘Test’)</code><br>\n然后在其他文件中调用：</p>\n<pre><code class=\"line-numbers\">local fun=loadfile('funTest.lua',\"t\")\nfun()\n</code></pre>\n<p>通过这种形式我们就可以吧 funTest.lua 的内容当做一个函数来使用，以上使用后会输出 Test。</p>\n<h3>dofile</h3>\n<p><img data-src=\"https://i.loli.net/2020/02/04/PxjaiqrlKJ6S41e.png\" alt=\"dofile\"><br>\ndofile 与 loadfile 最大的不同就是，loadfile 只是加载函数，需要我们手动去调用，而 dofile 不但加载函数而且直接调用。</p>\n<pre><code class=\"line-numbers\">dofile('funTest.lua')\n</code></pre>\n<h3>require</h3>\n<p>require 是包含的意思，与 load 系列不同的是，require 会检查被加载的文件是否已经被加载过，防止重复加载。<br>\n另外使用 require 加载可以单独调用加载的文件中的函数，而不是把文件内容当做一个函数来使用，所以 require 加载时比较理想的加载形式。</p>\n<h4>使用表加载</h4>\n<p>在 funTest.lua 文件中:</p>\n<pre><code class=\"line-numbers\">local _M = &#123;&#125;\nfunction _M.test()\n    print('hi')\nend\nfunction _M.Hi()\n    print('hi100')\nend\nfunction _M.Say(arg)\n    print('hi:'..tostring(arg))\nend\nreturn _M\n\n</code></pre>\n<p>在其他文件中调用：</p>\n<pre><code class=\"line-numbers\">-- 调用其他文件的函数\nlocal test = require('funTest')\nif not test then\n    print('错误')\n    return\nend\ntest.Hi()\ntest.test()\ntest.Say(51)\n</code></pre>\n<h4>非表加载</h4>\n<p>在 funTest.lua 中：</p>\n<pre><code class=\"line-numbers\">function Ac(j)\n    print('100:'..j)\nend\n</code></pre>\n<p>在其他文件中：</p>\n<pre><code class=\"line-numbers\">require(\"funTest\")\nAc('你好')\n</code></pre>\n<h4>说明</h4>\n<p>使用表加载和非表加载都可以实现效果，使用表加载时，有点面向对象的感觉可能更方便。</p>\n",
            "tags": [
                "Lua"
            ]
        },
        {
            "id": "http://www.fasty97.top/2020/02/04/Lua-%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%94%EF%BC%89.%E5%92%8C%EF%BC%9A%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E8%81%94%E7%B3%BB/",
            "url": "http://www.fasty97.top/2020/02/04/Lua-%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%94%EF%BC%89.%E5%92%8C%EF%BC%9A%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E8%81%94%E7%B3%BB/",
            "title": "Lua-基础（五）.和：的区别和联系",
            "date_published": "2020-02-04T05:23:18.000Z",
            "content_html": "<p>在前面我们学习函数时，我们说过函数其实是值，我们可以将函数放在表中。<br>\n那么我们是不是可以这么做：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">local</span> fasty<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>a<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> fasty<span class=\"token punctuation\">.</span><span class=\"token function\">Say</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Say:'</span><span class=\"token operator\">..</span>arg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">function</span> fasty<span class=\"token punctuation\">:</span><span class=\"token function\">Say2</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Say:\"</span><span class=\"token operator\">..</span>arg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><p>在这里，我们创建了一个表 fasty, 表中默认有 a 一个元素。然后我们给表创建了两个函数 say 和 say2，这 2 个函数的作用都是将给与的参数输出。</p>\n<h3>调用不同</h3>\n<p>在我们调用这 2 个方法时，我们应该明确：</p>\n<ul>\n<li>使用<code>.</code>声明的方法使用<code>.</code>调用，使用<code>:</code>声明的方法使用<code>：</code>调用</li>\n<li>假如我们要使用。调用：声明的方法，那我们需要传递一个 this 指针给函数</li>\n<li>也就是说：其实是自动传递一个 this 指针给函数。</li>\n</ul>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>fasty<span class=\"token punctuation\">.</span><span class=\"token function\">Say</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>fasty<span class=\"token punctuation\">:</span><span class=\"token function\">Say2</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>fasty<span class=\"token punctuation\">.</span><span class=\"token function\">Say2</span><span class=\"token punctuation\">(</span>fasty<span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>```lua</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">&lt;</span>strong<span class=\"token operator\">></span>Ps<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>strong<span class=\"token operator\">></span>：也就是说一下函数是等效的：</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>```lua</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">function</span> fasty<span class=\"token punctuation\">.</span><span class=\"token function\">Say3</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>arg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"say:\"</span><span class=\"token operator\">..</span>arg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">function</span> fasty<span class=\"token punctuation\">:</span><span class=\"token function\">Say4</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"say:\"</span><span class=\"token operator\">..</span>arg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><h3>self指针</h3>\n<p>既然，：的形式是自动传递一个 self 指针给函数，那么就意味着我们可以方便的访问表的元素咯～</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> fasty<span class=\"token punctuation\">:</span><span class=\"token function\">Say2</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Say:\"</span><span class=\"token operator\">..</span>arg<span class=\"token operator\">..</span><span class=\"token string\">\"\\ta=\"</span><span class=\"token operator\">..</span>self<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>fasty<span class=\"token punctuation\">:</span><span class=\"token function\">Say2</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://i.loli.net/2020/02/04/7pvlgWErTAbiSDZ.png\" alt=\"\"></p>\n<h3>总结</h3>\n<ul>\n<li>使用：声明函数时，函数会将第一个参数默认传递self指针。</li>\n<li>如果使用.调用：声明的函数时，需要第一个参数传递self。：调用则不需要</li>\n</ul>\n",
            "tags": [
                "Lua"
            ]
        },
        {
            "id": "http://www.fasty97.top/2020/02/03/Lua-%E5%9F%BA%E7%A1%80%EF%BC%88%E5%9B%9B%EF%BC%89%E8%BF%AD%E4%BB%A3%E5%99%A8/",
            "url": "http://www.fasty97.top/2020/02/03/Lua-%E5%9F%BA%E7%A1%80%EF%BC%88%E5%9B%9B%EF%BC%89%E8%BF%AD%E4%BB%A3%E5%99%A8/",
            "title": "Lua-基础（四）迭代器",
            "date_published": "2020-02-03T14:26:11.000Z",
            "content_html": "<blockquote>\n  迭代器是一种支持指针类型的结构，它可以遍历集合的每一个元素。在 Lua 中我们\n  常常使用函数来描述迭代器，每次调用该函数就返回集合的下一个元素。常常使用函数来描述迭代器，每次调用该函数就返回集合的<font color=green>下一个元素</font>。\n</blockquote>\n<h3>闭包和迭代器</h3>\n<ul>\n<li>迭代器需要保留<font color=blue>上一次</font>成功调用的状态</li>\n<li>迭代器需要保留<font color=blue>下一次</font>成功调用的状态</li>\n</ul>\n<p>我们知道闭包可以保留每次调用的状态。并且可以方便的访问局部变量；所以我们也可以使用闭包来构建迭代器。<br>\n还记得我们在做 for 循环遍历表时的 pairs (t) 的迭代器吗？我们尝试自己来写一个迭代器：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 迭代器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">list_iter</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">local</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">local</span> n<span class=\"token operator\">=</span><span class=\"token operator\">#</span>t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        i<span class=\"token operator\">=</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span> i<span class=\"token operator\">&lt;=</span>n <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">local</span> t<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">-- 创建表</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">local</span> iter <span class=\"token operator\">=</span> <span class=\"token function\">list_iter</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 创建迭代器变量实例</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token keyword\">true</span> <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">local</span> element<span class=\"token operator\">=</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 使用迭代器</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">if</span> element<span class=\"token operator\">==</span><span class=\"token keyword\">nil</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'数据为:'</span><span class=\"token operator\">..</span>element<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><p><strong>Ps</strong>：如果要创建一个闭包必须要创建其外部局部变量。所以一个典型的闭包的结构包含两个函数：一个是闭包自己；另一个是工厂（创建闭包的函数）。<br>\n当然我们可以将这个迭代器应用于 for 循环中：</p>\n<pre><code class=\"line-numbers\">for value in list_iter(t) do\n    print(value)\nend\n</code></pre>\n<h4>迭代器小例子-访问文件</h4>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 打开文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">local</span> file <span class=\"token operator\">=</span> io<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hh.txt'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span><span class=\"token comment\">-- 指定文件操作为读取</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token keyword\">nil</span><span class=\"token operator\">==</span>file <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'文件打开失败'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">ReadFile</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">local</span> line<span class=\"token operator\">=</span>file<span class=\"token punctuation\">:</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token string\">'*l'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 以行的形式进行读取</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token keyword\">nil</span><span class=\"token operator\">==</span>line <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">nil</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">return</span> line</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">for</span> data <span class=\"token keyword\">in</span> <span class=\"token function\">ReadFile</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">-- 使用 while 的话</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">local</span> readfile<span class=\"token operator\">=</span><span class=\"token function\">ReadFile</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token keyword\">true</span> <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">local</span> line<span class=\"token operator\">=</span><span class=\"token function\">readfile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">if</span> line<span class=\"token operator\">==</span><span class=\"token keyword\">nil</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><h3>深入了解for循环</h3>\n<p>在上面的闭包迭代器中我们不难发现，如果使用 for 循环则可以免去 while 循环所需的迭代闭包变量，<br>\n这样使用起来就比 while 循环要方便一些。那 for 循环是怎么做到的呢？<br>\n让我们来看看 for 循环的格式：<br>\n<code>for var_1, …, var_n in explist do block end</code><br>\n在 for 循环我们可以使用多个参数，如之前我们使用的系统自带的表迭代器，我们可以获得 k 和 v 的值。<br>\n在<code>in</code>关键字后接需要被迭代的数据源列表（也就是说可以迭代多个列表），然后在<code>do</code>后对遍历项进行处理。<br>\n<strong>Ps</strong>：其实在 lua 中，for 的执行顺序是这样的：</p>\n<ol>\n<li>首先，初始化，计算 in 后面表达式的值，表达式应该返回范性 for 需要的三个值：迭代函数，状态常量和控制变量；与多值赋值一样，如果表达式返回的结果个数不足三个会自动用 nil 补足，多出部分会被忽略。</li>\n<li>第二，将状态常量和控制变量作为参数调用迭代函数（注意：对于 for 结构来说，状态常量没有用处，仅仅在初始化时获取他的值并传递给迭代函数）。</li>\n<li>第三，将迭代函数返回的值赋给变量列表。</li>\n<li>第四，如果返回的第一个值为 nil 循环结束，否则执行循环体。</li>\n<li>第五，回到第二步再次调用迭代函数</li>\n</ol>\n<p><font color=red>从某种意义上来说，for 循环还是依赖于 while 循环做的优化</font>。<br>\n其等价为：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">local</span> _f<span class=\"token punctuation\">,</span> _s<span class=\"token punctuation\">,</span> _var <span class=\"token operator\">=</span> explist</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token keyword\">true</span> <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">local</span> var_1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">...</span> <span class=\"token punctuation\">,</span> var_n <span class=\"token operator\">=</span> <span class=\"token function\">_f</span><span class=\"token punctuation\">(</span>_s<span class=\"token punctuation\">,</span> _var<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>_var <span class=\"token operator\">=</span> var_1</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">if</span> _var <span class=\"token operator\">==</span> <span class=\"token keyword\">nil</span> <span class=\"token keyword\">then</span> <span class=\"token keyword\">break</span> <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>block</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><h3>无状态迭代器</h3>\n<blockquote>\n  上面我们依据闭包的思想实现的迭代器其核心思想就是保留状态，那有没有一种方式<font color=red>无需保留状态</font>构建迭代器呢？\n</blockquote>\n<p>让我们回想一下，系统自带的<code>pairs(t)</code>迭代器有使用到闭包吗？答案是：没有<br>\n所以<code>pairs(t)</code>迭代器就是一种无状态迭代器～<br>\n 我们尝试着实现一个 pairs 的效果，其代码如下：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">iter</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    i<span class=\"token operator\">=</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">local</span> v<span class=\"token operator\">=</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> v <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">,</span>v</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">ipairs</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> iter<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">local</span> tt<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">45</span><span class=\"token punctuation\">,</span><span class=\"token number\">46</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">for</span> key<span class=\"token punctuation\">,</span> value <span class=\"token keyword\">in</span> <span class=\"token function\">ipairs</span><span class=\"token punctuation\">(</span>tt<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><p>我们每次调用 ipairs 时，都自动去调用 iter，并且在调用时保留 iter 迭代函数，a 迭代数据，0 迭代索引。（很神奇吧，这种写法估计只有 lua 的作者才能想到，简直天才～）<br>\n<strong>Ps</strong>：同理，lua 中 ipairs 也是这样调用其他函数的（调用 next 函数）</p>\n<h3>多状态控制器</h3>\n<p>很多情况下，迭代器需要保存多个状态信息而不是简单的状态常量和控制变量，最<br>\n简单的方法是使用闭包，还有一种方法就是将所有的状态信息封装到 table 内，将 table<br>\n 作为迭代器的状态常量，因为这种情况下可以将所有的信息存放在 table 内，所以迭代函<br>\n数通常不需要第二个参数。</p>\n<p>[toc]</p>\n",
            "tags": [
                "Lua"
            ]
        },
        {
            "id": "http://www.fasty97.top/2020/02/01/Lua-%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%89%EF%BC%89%E5%87%BD%E6%95%B0/",
            "url": "http://www.fasty97.top/2020/02/01/Lua-%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%89%EF%BC%89%E5%87%BD%E6%95%B0/",
            "title": "Lua-基础（三）函数",
            "date_published": "2020-02-01T12:49:38.000Z",
            "content_html": "<blockquote>\n  函数可以完成2件事，<code>完成工作</code>或者<code>计算并返回结果</code>。\n</blockquote>\n<h3>函数语法</h3>\n<pre><code class=\"line-numbers\">function func_name (arguments-list)\nstatements-list\nend\n</code></pre>\n<p><strong>Ps</strong>：Lua 使用的函数可以是 Lua 编写也可以是其他语言编写，对于 Lua 程序员来说用什<br>\n么语言实现的函数使用起来都一样。</p>\n<pre><code class=\"line-numbers\">function Show(a)\n    print(a)\nend\nShow(100)\n</code></pre>\n<h4>返回多个值</h4>\n<p>在 lua 中函数可以返回多个值，例如 string.find，其返回匹配串 “开始和结束的下标”<br>\n（如果不存在匹配串返回 nil）。</p>\n<pre><code class=\"line-numbers\">s, e = string.find(\"hello Lua users\", \"Lua\")\nprint(s, e)  --> 7 9\n</code></pre>\n<p>计算最大值和最大值的索引</p>\n<pre><code class=\"line-numbers\">function MaxM(arr)\n    local maxIndex=1\n    local max=arr[maxIndex]\n    for key, value in pairs(arr) do\n        if value>max then\n            maxIndex=key\n            max=value\n        end\n    end\n    return max,maxIndex\nend\nlocal max,maxIndex=MaxM(&#123;1.5,6,7,9&#125;)\nprint('最大值和索引为:'..max..'  '..maxIndex)\n</code></pre>\n<h4>返回函数</h4>\n<p>如<code>return fac()</code>这样的形式就是返回函数，其意义是执行 fac 函数并返回 fac 的返回值，若没有返回 nil。</p>\n<h4>可变参数</h4>\n<h5>unpack</h5>\n<p><code>unpack</code>，接受一个数组作为输入参数，返回数组的所有元素。</p>\n<pre><code class=\"line-numbers\">f = string.find\na = &#123;\"hello\", \"ll\"&#125;\nprint(f(unpack(a))) --> 3 4\n</code></pre>\n<h5>...可变参数</h5>\n<p>可以使用… 表示不明确数量的可变参数，在使用时在函数中以表的形式获取。</p>\n<pre><code class=\"line-numbers\">function Sum(a,b,c,...)\n    local arg=&#123;...&#125; --将可变参数存储到arg表中\n    for key, value in pairs(arg) do\n        print(value) -- 9 7 4 10\n    end\nend\n\nSum(5,4,8,9,7,4,10)\n</code></pre>\n<h4>使用命名参数</h4>\n<p>由于 lua 使用弱类型的缘故，我们可以像这样使用命名参数，在这种情况下调用函数可以写为<code>函数名 &#123;参数&#125;</code>的形式。</p>\n<pre><code class=\"line-numbers\">function Show(arg)\n    print(arg.name..'  '..arg.title)\nend\n\nShow&#123;name='小屋',title='学习lua'&#125;\n</code></pre>\n<h3>深入理解函数</h3>\n<p>Lua 中的函数是带有词法定界（lexical scoping）的第一类值（first-class values）。<br>\n<font color=blue>第一类值</font>指：在 Lua 中函数和其他值（数值、字符串）一样，函数可以被存放在变量中，也可以存放在表中，可以作为函数的参数，还可以作为函数的返回值。</p>\n<p><font color=blue>词法定界</font>指：被嵌套的函数可以访问他外部函数中的变量。这一特性给 Lua 提供了强大的编程能力。</p>\n<h4>匿名函数</h4>\n<p>得益于上面的第一条规则，其实我们声明函数，本是 <code>fac=function(arg) body end</code>。<br>\n这个语句创建了一个匿名函数，并把这个函数赋值为 fac，我们就可以称这个函数为 fac 了。<br>\n在<strong><code>table.sort()</code></strong>函数中使用匿名函数：</p>\n<p>在函数中接收 2 个参数，第一个参数接收一个表，第二个参数接收一个<strong>比较函数</strong>。</p>\n<pre><code class=\"line-numbers\">arr=&#123;\n    &#123;name='A',age=16&#125;,\n    &#123;name='B',age=20&#125;,\n    &#123;name='C',age=9&#125;,\n&#125;\ntable.sort(arr,function (a,b)\n    return a.age>b.age\nend)\n\nfor key, value in pairs(arr) do\n    for k, v in pairs(value) do\n        print(k,v)\n    end\nend\n</code></pre>\n<p>以其他函数作为参数的函数在 Lua 中被称作高级函数，高级函数在 Lua 中并没有特<br>\n权，只是 Lua 把函数当作第一类函数处理的一个简单的结果。</p>\n<h4>闭包</h4>\n<p>当一个函数内容嵌套另一个函数时，被嵌套的匿名函数还可以访问第一函数中的参数，这就被称为闭包；事实上仅有很少的语言支持这样的特性。<br>\n来看看下面这个例子：</p>\n<pre><code class=\"line-numbers\">function NewCount()\n    local i=0\n    return function ()\n        i=i+1\n        return i\n    end\nend\n</code></pre>\n<p>在匿名函数中，我们依然可以直接正确的访问 i。</p>\n<hr />\n<p>现在，假如我们这样调用这个函数结果是怎样呢？</p>\n<pre><code class=\"line-numbers\">local c1=NewCount()\nlocal c2=NewCount()\nprint(c1())\nprint(c1())\nprint(c2())\nprint(c1())\n</code></pre>\n<p>!{函数闭包}(<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjAvMDIvMDIvcjJmdHBHUGpzVmxtcXlnLnBuZw==\">https://i.loli.net/2020/02/02/r2ftpGPjsVlmqyg.png</span>)<br>\n 可以发现，函数的结果并非我们的预期，在第一函数体中的 i 的值可以被保留下来，而且 c1 和 c2 的保存值并不相同，这就是闭包。<br>\n<strong>Ps</strong>：我们把这个 i 称为<font color=gree>外部的局部变量或者 <strong>upvalue</strong></font>。<br>\n简单的说闭包是一个函数加上它可以正确访问的 upvalues。如果我们再次调用 newCounter，将创建一个新的局部变量 i，因此我们得到了一个作用在新的变量 i 上的新闭包。</p>\n<p><strong>分析</strong>：c1 和 c2 是作用同一个局部变量上的不同实例上的两个闭包。</p>\n<h4>使用闭包重写函数</h4>\n<p>闭包在完全不同的上下文中也是很有用途的。因为函数被存储在普通的变量内我们<br>\n可以很方便的重定义或者预定义函数。通常当你需要原始函数有一个新的实现时可以重<br>\n定义函数。例如你可以重定义 sin 使其接受一个度数而不是弧度作为参数：</p>\n<pre><code class=\"line-numbers\">local oldSin=math.sin\nmath.sin=function (x)\n    return oldSin(x*math.pi/180)\nend\n</code></pre>\n<p>通过这个特性我们可以对原函数进行修改，在某些时刻可以构建运行危险代码的沙盘。</p>\n<h4>局部函数</h4>\n<p>Lua 中函数既可以作为全局变量也可以作为局部变量，函数作为 table 的域。<br>\n<strong>使用表声明函数</strong>：</p>\n<pre><code class=\"line-numbers\">Lib=&#123;&#125;\nLib.foo=function (x,y)\n    return x+y\nend\nLib.goo=function (x,y)\n    return x-y\nend\n\nLib=&#123;\n    foo=function (x,y)\n        return x+y\n    end,\n    goo=function (x,y)\n        return x-y\n    end\n&#125;\n\nLib=&#123;&#125;\nfunction Lib.foo(x,y)\n    return x+y\nend\nfunction Lib.goo(x,y)\n    return x-y\nend\n\n</code></pre>\n<p><strong>Ps</strong>：在使用递归函数时，要注意要先声明函数在调用。</p>\n<h4>尾调用</h4>\n<p>尾调用是一种类似在函数结尾的 goto 调用，当函数最后一个动作是调用另外一个函<br>\n数时，我们称这种调用尾调用。<br>\n<strong>Ps</strong>:Lua 中尾调用不消耗栈空间，由于尾调用不需要使用栈空间，那么尾调用递归的层次可以无限制的</p>\n",
            "tags": [
                "Lua"
            ]
        },
        {
            "id": "http://www.fasty97.top/2020/02/01/Lua-%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89%E8%A1%A8&%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/",
            "url": "http://www.fasty97.top/2020/02/01/Lua-%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89%E8%A1%A8&%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/",
            "title": "Lua-基础（二）表&流程控制",
            "date_published": "2020-02-01T11:31:38.000Z",
            "content_html": "<h3>构建表</h3>\n<p>构造器是创建和初始化表的表达式。表是 Lua 特有的功能强大的东西。最简单的构<br>\n造函数是 {}，用来创建一个空表。可以直接初始化数组:<br>\n<strong><font color=red>表的序号从 1 开始，并非 0</font>。</strong><br>\n<strong>Ps</strong>：假如空引用，lua 也不会报错，会输出 nil。</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">local</span> numbers<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"numbers数据:\"</span><span class=\"token operator\">..</span><span class=\"token function\">tostring</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">-- 输出 1</span></pre></td></tr></table></figure><h4>构建自定义对象</h4>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">local</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>arr<span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span><span class=\"token string\">'xiao'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>arr<span class=\"token punctuation\">.</span>age<span class=\"token operator\">=</span><span class=\"token number\">16</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'arr的数据：'</span><span class=\"token operator\">..</span><span class=\"token string\">'  name:'</span><span class=\"token operator\">..</span>arr<span class=\"token punctuation\">.</span>name<span class=\"token operator\">..</span><span class=\"token string\">'   age: '</span><span class=\"token operator\">..</span>arr<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4>表的组成</h4>\n<p>表，可以包含任何类型的元素，也可以嵌套</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>arr<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>x<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>tip<span class=\"token operator\">=</span><span class=\"token string\">'text'</span><span class=\"token punctuation\">,</span>func<span class=\"token operator\">=</span>print<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4>构造注意事项</h4>\n<p>如果真的需要索引从 0 开始：<br>\n<strong>Ps</strong>：极力<font color=red>不推荐</font>这么做，这么做将不能使用很多标准库。</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>arr<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"Sunday\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Monday\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Tuesday\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在构造表时既可以使用<code>,</code>分隔元素也可以使用<code>；</code>分隔元素。</p>\n<h3>流程控制</h3>\n<p>我们来看看 lua 中的流程控制语法～</p>\n<h4>分支</h4>\n<p>在 lua 中，每一个代码块的结束都要以<strong>end</strong>结尾（有点 c++ 的味道）</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token number\">3</span><span class=\"token operator\">></span><span class=\"token number\">0</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token keyword\">false</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AAA\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"BBB\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">local</span> a<span class=\"token operator\">=</span><span class=\"token number\">8</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">if</span> a<span class=\"token operator\">></span><span class=\"token number\">8</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a>8'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">elseif</span> a<span class=\"token operator\">></span><span class=\"token number\">5</span>  <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a>5'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">elseif</span> a<span class=\"token operator\">></span><span class=\"token number\">3</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a>3'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'不满足'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><h4>循环</h4>\n<p>使用步长 for 循环（可省略步长，默认为 1）</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- for 循环</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">-- 1 起点 10 终点 2 步长</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'正向数据为:'</span><span class=\"token operator\">..</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'负向数据为：'</span><span class=\"token operator\">..</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><p><strong>Ps</strong>：在循环中不要改变控制变量的值，如果需要跳出循环可以使用<code>break</code>关键字。</p>\n<p>使用 for 循环遍历表：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>arr<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"Sunday\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Monday\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Tuesday\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> key<span class=\"token punctuation\">,</span> value <span class=\"token keyword\">in</span> <span class=\"token function\">pairs</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>key<span class=\"token operator\">..</span><span class=\"token string\">'   '</span><span class=\"token operator\">..</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><p>while 循环</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">local</span> a<span class=\"token operator\">=</span><span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">while</span> a<span class=\"token operator\">></span><span class=\"token number\">0</span> <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    a<span class=\"token operator\">=</span>a<span class=\"token operator\">-</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure>",
            "tags": [
                "Lua"
            ]
        },
        {
            "id": "http://www.fasty97.top/2020/02/01/Lua-%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89Say%20Hi/",
            "url": "http://www.fasty97.top/2020/02/01/Lua-%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89Say%20Hi/",
            "title": "Lua-基础（一）Say Hi",
            "date_published": "2020-02-01T06:01:49.000Z",
            "content_html": "<blockquote>\n  本系列将从零开始学习Lua的基本语法，用于之后使用<font color=gree>xLua</font>进行unity<font color=red>热更新</font>~\n</blockquote>\n<h3>使用Vscode开发Lua</h3>\n<p>至少要下载 Lua 和 LuaDebug 这 2 个扩展～<br>\n<img data-src=\"https://i.loli.net/2020/02/01/raxtmuBAnLNIqQO.png\" alt=\"\"><br>\n 看到 LuaDebug 的作者 actboy168，我有点惊讶，actboy168 是大名鼎鼎的 ydwe 作者之一，在以前自己玩 we 的时候用的编辑器就是 actboy168 大佬的，后面听说支持 lua 来代替 jass 编写游戏逻辑（那时候已经弃坑～）；好的，闲话不多说，我们来编写我们的第一个脚本。</p>\n<ul>\n<li>创建一个空文件夹并用vscode打开</li>\n<li>创建一个test.lua文件</li>\n<li>编写一行代码 <code>print(\"Hi,Lua~\")</code>（也可以使用<font color=red>'' 单引号</font>）</li>\n</ul>\n<p><img data-src=\"https://i.loli.net/2020/02/01/w4ds3ZquOteQX8p.png\" alt=\"\"></p>\n<h3>基本使用</h3>\n<h4>数据类型</h4>\n<p>在 lua 中和 python 类型可以直接声明并使用，无需使用类型名，lua 自动分析数据类型。<br>\nlua 的数据类型为（8 个）：</p>\n<ul>\n<li>nil 空</li>\n<li>boolean 布尔型</li>\n<li>number 数字型</li>\n<li>function 函数型</li>\n<li>string 字符串型</li>\n<li>userdata 用户自定义类型</li>\n<li>thread 线程型</li>\n<li>table 表型</li>\n</ul>\n<p>可以使用<code>type()</code>来查看类型～<br>\nPs: 在 lua 中不强制使用；结尾</p>\n<pre><code class=\"line-numbers\">--lua类型\nprint(type(3.4))\nprint(type(\"JK\"))\nprint(type(print))\nprint(type(3>5))\nprint(type(nil))\n</code></pre>\n<h5>Function类型</h5>\n<p>Function 类型有什么用呢？使用 Function 类型可以实现将函数作为函数的参数传递（类似 c++ 中的句柄，C# 中的委托）；有了这一特性，大大加强了代码的灵活性～</p>\n<h5>Userdata类型</h5>\n<p>userdata 类型可以表述用户自己创建的数据结构，也可以表示调用 c 语言函数库创建的新类型。</p>\n<h4>变量类型</h4>\n<p><font color=blue>全局变量</font>：全局变量是在整个程序中都可以使用的，默认声明的就是全局变量。<br>\n<font color=blue>局部变量</font>: 局部变量在全局变量前添加<code>local</code>关键字声明的。</p>\n<pre><code class=\"line-numbers\">local a=100 --局部变量\nb='Fasty' --全局变量\n</code></pre>\n<h4>运算符</h4>\n<p>其他的数学运算符和其他语言是一致的，在这里看一下逻辑运算符<code>and or not</code>。<br>\n在 lua 中认为 false 和 nil 为假，其他为真。（0 也为真，c 语言中认为 0 为假，非 0 为真）<br>\n值得注意的是使用逻辑运算符并非返回逻辑值：</p>\n<pre><code class=\"line-numbers\">local aa = 4 and 5 -- 若a为false则返回a，否则返回b  返回5\naa=nil and 7  --返回nil\n\nlocal bb= 7 or 8 --若a为true则返回a，否则返回b 返回7\naa=nil or 8 --返回8\n</code></pre>\n<p><font color=gree>小技巧:</font>使用 <code>aa= nil or 5</code> 可以判断 aa 是否为 nil，若为则赋值为 5。</p>\n<p>not 则为取反，一直返回布尔值。</p>\n<p>Ps：连接字符串使用<code>…</code>，如<code>A…B</code>。</p>\n",
            "tags": [
                "Lua"
            ]
        }
    ]
}